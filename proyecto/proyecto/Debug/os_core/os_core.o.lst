   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"os_core.c"
  21              	.Ltext0:
  22              		.file 1 "../os_core/os_core.c"
 1698              		.align	2
 1701              	OSMapTbl:
 1702 0000 01       		.byte	1
 1703 0001 02       		.byte	2
 1704 0002 04       		.byte	4
 1705 0003 08       		.byte	8
 1706 0004 10       		.byte	16
 1707 0005 20       		.byte	32
 1708 0006 40       		.byte	64
 1709 0007 80       		.byte	-128
 1710              		.global	OSUnMapTbl
 1711              		.align	2
 1714              	OSUnMapTbl:
 1715 0008 00       		.byte	0
 1716 0009 00       		.byte	0
 1717 000a 01       		.byte	1
 1718 000b 00       		.byte	0
 1719 000c 02       		.byte	2
 1720 000d 00       		.byte	0
 1721 000e 01       		.byte	1
 1722 000f 00       		.byte	0
 1723 0010 03       		.byte	3
 1724 0011 00       		.byte	0
 1725 0012 01       		.byte	1
 1726 0013 00       		.byte	0
 1727 0014 02       		.byte	2
 1728 0015 00       		.byte	0
 1729 0016 01       		.byte	1
 1730 0017 00       		.byte	0
 1731 0018 04       		.byte	4
 1732 0019 00       		.byte	0
 1733 001a 01       		.byte	1
 1734 001b 00       		.byte	0
 1735 001c 02       		.byte	2
 1736 001d 00       		.byte	0
 1737 001e 01       		.byte	1
 1738 001f 00       		.byte	0
 1739 0020 03       		.byte	3
 1740 0021 00       		.byte	0
 1741 0022 01       		.byte	1
 1742 0023 00       		.byte	0
 1743 0024 02       		.byte	2
 1744 0025 00       		.byte	0
 1745 0026 01       		.byte	1
 1746 0027 00       		.byte	0
 1747 0028 05       		.byte	5
 1748 0029 00       		.byte	0
 1749 002a 01       		.byte	1
 1750 002b 00       		.byte	0
 1751 002c 02       		.byte	2
 1752 002d 00       		.byte	0
 1753 002e 01       		.byte	1
 1754 002f 00       		.byte	0
 1755 0030 03       		.byte	3
 1756 0031 00       		.byte	0
 1757 0032 01       		.byte	1
 1758 0033 00       		.byte	0
 1759 0034 02       		.byte	2
 1760 0035 00       		.byte	0
 1761 0036 01       		.byte	1
 1762 0037 00       		.byte	0
 1763 0038 04       		.byte	4
 1764 0039 00       		.byte	0
 1765 003a 01       		.byte	1
 1766 003b 00       		.byte	0
 1767 003c 02       		.byte	2
 1768 003d 00       		.byte	0
 1769 003e 01       		.byte	1
 1770 003f 00       		.byte	0
 1771 0040 03       		.byte	3
 1772 0041 00       		.byte	0
 1773 0042 01       		.byte	1
 1774 0043 00       		.byte	0
 1775 0044 02       		.byte	2
 1776 0045 00       		.byte	0
 1777 0046 01       		.byte	1
 1778 0047 00       		.byte	0
 1779 0048 06       		.byte	6
 1780 0049 00       		.byte	0
 1781 004a 01       		.byte	1
 1782 004b 00       		.byte	0
 1783 004c 02       		.byte	2
 1784 004d 00       		.byte	0
 1785 004e 01       		.byte	1
 1786 004f 00       		.byte	0
 1787 0050 03       		.byte	3
 1788 0051 00       		.byte	0
 1789 0052 01       		.byte	1
 1790 0053 00       		.byte	0
 1791 0054 02       		.byte	2
 1792 0055 00       		.byte	0
 1793 0056 01       		.byte	1
 1794 0057 00       		.byte	0
 1795 0058 04       		.byte	4
 1796 0059 00       		.byte	0
 1797 005a 01       		.byte	1
 1798 005b 00       		.byte	0
 1799 005c 02       		.byte	2
 1800 005d 00       		.byte	0
 1801 005e 01       		.byte	1
 1802 005f 00       		.byte	0
 1803 0060 03       		.byte	3
 1804 0061 00       		.byte	0
 1805 0062 01       		.byte	1
 1806 0063 00       		.byte	0
 1807 0064 02       		.byte	2
 1808 0065 00       		.byte	0
 1809 0066 01       		.byte	1
 1810 0067 00       		.byte	0
 1811 0068 05       		.byte	5
 1812 0069 00       		.byte	0
 1813 006a 01       		.byte	1
 1814 006b 00       		.byte	0
 1815 006c 02       		.byte	2
 1816 006d 00       		.byte	0
 1817 006e 01       		.byte	1
 1818 006f 00       		.byte	0
 1819 0070 03       		.byte	3
 1820 0071 00       		.byte	0
 1821 0072 01       		.byte	1
 1822 0073 00       		.byte	0
 1823 0074 02       		.byte	2
 1824 0075 00       		.byte	0
 1825 0076 01       		.byte	1
 1826 0077 00       		.byte	0
 1827 0078 04       		.byte	4
 1828 0079 00       		.byte	0
 1829 007a 01       		.byte	1
 1830 007b 00       		.byte	0
 1831 007c 02       		.byte	2
 1832 007d 00       		.byte	0
 1833 007e 01       		.byte	1
 1834 007f 00       		.byte	0
 1835 0080 03       		.byte	3
 1836 0081 00       		.byte	0
 1837 0082 01       		.byte	1
 1838 0083 00       		.byte	0
 1839 0084 02       		.byte	2
 1840 0085 00       		.byte	0
 1841 0086 01       		.byte	1
 1842 0087 00       		.byte	0
 1843 0088 07       		.byte	7
 1844 0089 00       		.byte	0
 1845 008a 01       		.byte	1
 1846 008b 00       		.byte	0
 1847 008c 02       		.byte	2
 1848 008d 00       		.byte	0
 1849 008e 01       		.byte	1
 1850 008f 00       		.byte	0
 1851 0090 03       		.byte	3
 1852 0091 00       		.byte	0
 1853 0092 01       		.byte	1
 1854 0093 00       		.byte	0
 1855 0094 02       		.byte	2
 1856 0095 00       		.byte	0
 1857 0096 01       		.byte	1
 1858 0097 00       		.byte	0
 1859 0098 04       		.byte	4
 1860 0099 00       		.byte	0
 1861 009a 01       		.byte	1
 1862 009b 00       		.byte	0
 1863 009c 02       		.byte	2
 1864 009d 00       		.byte	0
 1865 009e 01       		.byte	1
 1866 009f 00       		.byte	0
 1867 00a0 03       		.byte	3
 1868 00a1 00       		.byte	0
 1869 00a2 01       		.byte	1
 1870 00a3 00       		.byte	0
 1871 00a4 02       		.byte	2
 1872 00a5 00       		.byte	0
 1873 00a6 01       		.byte	1
 1874 00a7 00       		.byte	0
 1875 00a8 05       		.byte	5
 1876 00a9 00       		.byte	0
 1877 00aa 01       		.byte	1
 1878 00ab 00       		.byte	0
 1879 00ac 02       		.byte	2
 1880 00ad 00       		.byte	0
 1881 00ae 01       		.byte	1
 1882 00af 00       		.byte	0
 1883 00b0 03       		.byte	3
 1884 00b1 00       		.byte	0
 1885 00b2 01       		.byte	1
 1886 00b3 00       		.byte	0
 1887 00b4 02       		.byte	2
 1888 00b5 00       		.byte	0
 1889 00b6 01       		.byte	1
 1890 00b7 00       		.byte	0
 1891 00b8 04       		.byte	4
 1892 00b9 00       		.byte	0
 1893 00ba 01       		.byte	1
 1894 00bb 00       		.byte	0
 1895 00bc 02       		.byte	2
 1896 00bd 00       		.byte	0
 1897 00be 01       		.byte	1
 1898 00bf 00       		.byte	0
 1899 00c0 03       		.byte	3
 1900 00c1 00       		.byte	0
 1901 00c2 01       		.byte	1
 1902 00c3 00       		.byte	0
 1903 00c4 02       		.byte	2
 1904 00c5 00       		.byte	0
 1905 00c6 01       		.byte	1
 1906 00c7 00       		.byte	0
 1907 00c8 06       		.byte	6
 1908 00c9 00       		.byte	0
 1909 00ca 01       		.byte	1
 1910 00cb 00       		.byte	0
 1911 00cc 02       		.byte	2
 1912 00cd 00       		.byte	0
 1913 00ce 01       		.byte	1
 1914 00cf 00       		.byte	0
 1915 00d0 03       		.byte	3
 1916 00d1 00       		.byte	0
 1917 00d2 01       		.byte	1
 1918 00d3 00       		.byte	0
 1919 00d4 02       		.byte	2
 1920 00d5 00       		.byte	0
 1921 00d6 01       		.byte	1
 1922 00d7 00       		.byte	0
 1923 00d8 04       		.byte	4
 1924 00d9 00       		.byte	0
 1925 00da 01       		.byte	1
 1926 00db 00       		.byte	0
 1927 00dc 02       		.byte	2
 1928 00dd 00       		.byte	0
 1929 00de 01       		.byte	1
 1930 00df 00       		.byte	0
 1931 00e0 03       		.byte	3
 1932 00e1 00       		.byte	0
 1933 00e2 01       		.byte	1
 1934 00e3 00       		.byte	0
 1935 00e4 02       		.byte	2
 1936 00e5 00       		.byte	0
 1937 00e6 01       		.byte	1
 1938 00e7 00       		.byte	0
 1939 00e8 05       		.byte	5
 1940 00e9 00       		.byte	0
 1941 00ea 01       		.byte	1
 1942 00eb 00       		.byte	0
 1943 00ec 02       		.byte	2
 1944 00ed 00       		.byte	0
 1945 00ee 01       		.byte	1
 1946 00ef 00       		.byte	0
 1947 00f0 03       		.byte	3
 1948 00f1 00       		.byte	0
 1949 00f2 01       		.byte	1
 1950 00f3 00       		.byte	0
 1951 00f4 02       		.byte	2
 1952 00f5 00       		.byte	0
 1953 00f6 01       		.byte	1
 1954 00f7 00       		.byte	0
 1955 00f8 04       		.byte	4
 1956 00f9 00       		.byte	0
 1957 00fa 01       		.byte	1
 1958 00fb 00       		.byte	0
 1959 00fc 02       		.byte	2
 1960 00fd 00       		.byte	0
 1961 00fe 01       		.byte	1
 1962 00ff 00       		.byte	0
 1963 0100 03       		.byte	3
 1964 0101 00       		.byte	0
 1965 0102 01       		.byte	1
 1966 0103 00       		.byte	0
 1967 0104 02       		.byte	2
 1968 0105 00       		.byte	0
 1969 0106 01       		.byte	1
 1970 0107 00       		.byte	0
 1971              		.text
 1972              		.align	2
 1973              		.global	OSEventNameGet
 1975              	OSEventNameGet:
 1976              	.LFB0:
   1:../os_core/os_core.c **** /*
   2:../os_core/os_core.c **** ***************************************************************************************************
   3:../os_core/os_core.c **** *                                                uC/OS-II
   4:../os_core/os_core.c **** *                                          The Real-Time Kernel
   5:../os_core/os_core.c **** *                                             CORE FUNCTIONS
   6:../os_core/os_core.c **** *
   7:../os_core/os_core.c **** *                          (c) Copyright 1992-2003, Jean J. Labrosse, Weston, FL
   8:../os_core/os_core.c **** *                                           All Rights Reserved
   9:../os_core/os_core.c **** *
  10:../os_core/os_core.c **** * File    : OS_CORE.C
  11:../os_core/os_core.c **** * By      : Jean J. Labrosse
  12:../os_core/os_core.c **** * Version : V2.76
  13:../os_core/os_core.c **** ***************************************************************************************************
  14:../os_core/os_core.c **** */
  15:../os_core/os_core.c **** 
  16:../os_core/os_core.c **** #ifndef  OS_MASTER_FILE
  17:../os_core/os_core.c **** #define  OS_GLOBALS
  18:../os_core/os_core.c **** #include "ucos_ii.h"
  19:../os_core/os_core.c **** #endif
  20:../os_core/os_core.c **** 
  21:../os_core/os_core.c **** /*
  22:../os_core/os_core.c **** ***************************************************************************************************
  23:../os_core/os_core.c **** *                              MAPPING TABLE TO MAP BIT POSITION TO BIT MASK
  24:../os_core/os_core.c **** *
  25:../os_core/os_core.c **** * Note: Index into table is desired bit position, 0..7
  26:../os_core/os_core.c **** *       Indexed value corresponds to bit mask
  27:../os_core/os_core.c **** ***************************************************************************************************
  28:../os_core/os_core.c **** */
  29:../os_core/os_core.c **** 
  30:../os_core/os_core.c **** INT8U  const  OSMapTbl[8]   = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
  31:../os_core/os_core.c **** 
  32:../os_core/os_core.c **** /*
  33:../os_core/os_core.c **** ***************************************************************************************************
  34:../os_core/os_core.c **** *                                       PRIORITY RESOLUTION TABLE
  35:../os_core/os_core.c **** *
  36:../os_core/os_core.c **** * Note: Index into table is bit pattern to resolve highest priority
  37:../os_core/os_core.c **** *       Indexed value corresponds to highest priority bit position (i.e. 0..7)
  38:../os_core/os_core.c **** ***************************************************************************************************
  39:../os_core/os_core.c **** */
  40:../os_core/os_core.c **** 
  41:../os_core/os_core.c **** INT8U  const  OSUnMapTbl[256] = {
  42:../os_core/os_core.c ****     0, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x00 to 0x0F                          
  43:../os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x10 to 0x1F                          
  44:../os_core/os_core.c ****     5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x20 to 0x2F                          
  45:../os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x30 to 0x3F                          
  46:../os_core/os_core.c ****     6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x40 to 0x4F                          
  47:../os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x50 to 0x5F                          
  48:../os_core/os_core.c ****     5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x60 to 0x6F                          
  49:../os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x70 to 0x7F                          
  50:../os_core/os_core.c ****     7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x80 to 0x8F                          
  51:../os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x90 to 0x9F                          
  52:../os_core/os_core.c ****     5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0xA0 to 0xAF                          
  53:../os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0xB0 to 0xBF                          
  54:../os_core/os_core.c ****     6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0xC0 to 0xCF                          
  55:../os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0xD0 to 0xDF                          
  56:../os_core/os_core.c ****     5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0xE0 to 0xEF                          
  57:../os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0        /* 0xF0 to 0xFF                          
  58:../os_core/os_core.c **** };
  59:../os_core/os_core.c **** 
  60:../os_core/os_core.c **** /*$PAGE*/
  61:../os_core/os_core.c **** /*
  62:../os_core/os_core.c **** ***************************************************************************************************
  63:../os_core/os_core.c **** *                                       FUNCTION PROTOTYPES
  64:../os_core/os_core.c **** ***************************************************************************************************
  65:../os_core/os_core.c **** */
  66:../os_core/os_core.c **** static  void  OS_InitEventList(void);
  67:../os_core/os_core.c **** static  void  OS_InitMisc(void);
  68:../os_core/os_core.c **** static  void  OS_InitRdyList(void);
  69:../os_core/os_core.c **** static  void  OS_InitTaskIdle(void);
  70:../os_core/os_core.c **** #if OS_TASK_STAT_EN > 0
  71:../os_core/os_core.c **** static  void  OS_InitTaskStat(void);
  72:../os_core/os_core.c **** #endif
  73:../os_core/os_core.c **** static  void  OS_InitTCBList(void);
  74:../os_core/os_core.c ****   
  75:../os_core/os_core.c **** /*$PAGE*/
  76:../os_core/os_core.c **** /*
  77:../os_core/os_core.c **** ***************************************************************************************************
  78:../os_core/os_core.c **** *                         GET THE NAME OF A SEMAPHORE, MUTEX, MAILBOX or QUEUE
  79:../os_core/os_core.c **** *
  80:../os_core/os_core.c **** * Description: This function is used to obtain the name assigned to a semaphore, mutex, mailbox or 
  81:../os_core/os_core.c **** *
  82:../os_core/os_core.c **** * Arguments  : pevent    is a pointer to the event group.  'pevent' can point either to a semaphore
  83:../os_core/os_core.c **** *                        a mutex, a mailbox or a queue.  Where this function is concerned, the actu
  84:../os_core/os_core.c **** *                        type is irrelevant.
  85:../os_core/os_core.c **** *
  86:../os_core/os_core.c **** *              pname     is a pointer to an ASCII string that will receive the name of the semaphor
  87:../os_core/os_core.c **** *                        mutex, mailbox or queue.  The string must be able to hold at least 
  88:../os_core/os_core.c **** *                        OS_EVENT_NAME_SIZE characters.
  89:../os_core/os_core.c **** *
  90:../os_core/os_core.c **** *              err       is a pointer to an error code that can contain one of the following values
  91:../os_core/os_core.c **** *
  92:../os_core/os_core.c **** *                        OS_NO_ERR                  if the name was copied to 'pname'
  93:../os_core/os_core.c **** *                        OS_ERR_EVENT_TYPE          if 'pevent' is not pointing to the proper event
  94:../os_core/os_core.c **** *                                                   control block type.
  95:../os_core/os_core.c **** *                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
  96:../os_core/os_core.c **** *                        OS_ERR_PEVENT_NULL         if you passed a NULL pointer for 'pevent'
  97:../os_core/os_core.c **** *
  98:../os_core/os_core.c **** * Returns    : The length of the string or 0 if the 'pevent' is a NULL pointer.
  99:../os_core/os_core.c **** ***************************************************************************************************
 100:../os_core/os_core.c **** */
 101:../os_core/os_core.c **** 
 102:../os_core/os_core.c **** #if OS_EVENT_EN && (OS_EVENT_NAME_SIZE > 1)
 103:../os_core/os_core.c **** INT8U  OSEventNameGet (OS_EVENT *pevent, char *pname, INT8U *err)
 104:../os_core/os_core.c **** {
 1977              		.loc 1 104 0
 1978              		.cfi_startproc
 1979              		@ Function supports interworking.
 1980              		@ args = 0, pretend = 0, frame = 24
 1981              		@ frame_needed = 1, uses_anonymous_args = 0
 1982 0000 0DC0A0E1 		mov	ip, sp
 1983              	.LCFI0:
 1984              		.cfi_def_cfa_register 12
 1985 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1986 0008 04B04CE2 		sub	fp, ip, #4
 1987              		.cfi_offset 14, -8
 1988              		.cfi_offset 13, -12
 1989              		.cfi_offset 11, -16
 1990              	.LCFI1:
 1991              		.cfi_def_cfa 11, 4
 1992 000c 18D04DE2 		sub	sp, sp, #24
 1993 0010 18000BE5 		str	r0, [fp, #-24]
 1994 0014 1C100BE5 		str	r1, [fp, #-28]
 1995 0018 20200BE5 		str	r2, [fp, #-32]
 105:../os_core/os_core.c ****     INT8U      len;
 106:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
 107:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 108:../os_core/os_core.c **** 
 109:../os_core/os_core.c **** 
 110:../os_core/os_core.c **** 
 111:../os_core/os_core.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
 112:../os_core/os_core.c **** #endif    
 113:../os_core/os_core.c ****     OS_ENTER_CRITICAL();
 1996              		.loc 1 113 0
 1997              	@ 113 "../os_core/os_core.c" 1
 1998 001c 00000FE1 		mrs   r0, cpsr
 1999              	@ 0 "" 2
 2000              	@ 113 "../os_core/os_core.c" 1
 2001 0020 04002DE5 		stmfd sp!, {r0}
 2002              	@ 0 "" 2
 2003              	@ 113 "../os_core/os_core.c" 1
 2004 0024 C00080E3 		orr   r0, r0, #0b11000000
 2005              	@ 0 "" 2
 2006              	@ 113 "../os_core/os_core.c" 1
 2007 0028 00F021E1 		msr   cpsr_c, r0
 2008              	@ 0 "" 2
 114:../os_core/os_core.c **** #if OS_ARG_CHK_EN > 0
 115:../os_core/os_core.c ****     if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                    
 2009              		.loc 1 115 0
 2010 002c 18301BE5 		ldr	r3, [fp, #-24]
 2011 0030 000053E3 		cmp	r3, #0
 2012 0034 0600001A 		bne	.L2
 116:../os_core/os_core.c ****         OS_EXIT_CRITICAL();                      /* Yes                                            
 2013              		.loc 1 116 0
 2014              	@ 116 "../os_core/os_core.c" 1
 2015 0038 04009DE4 		ldmfd sp!, {r0}
 2016              	@ 0 "" 2
 2017              	@ 116 "../os_core/os_core.c" 1
 2018 003c 00F021E1 		msr   cpsr_c, r0
 2019              	@ 0 "" 2
 117:../os_core/os_core.c ****         *err = OS_ERR_PEVENT_NULL;
 2020              		.loc 1 117 0
 2021 0040 20301BE5 		ldr	r3, [fp, #-32]
 2022 0044 0420A0E3 		mov	r2, #4
 2023 0048 0020C3E5 		strb	r2, [r3, #0]
 118:../os_core/os_core.c ****         return (0);
 2024              		.loc 1 118 0
 2025 004c 0030A0E3 		mov	r3, #0
 2026 0050 220000EA 		b	.L3
 2027              	.L2:
 119:../os_core/os_core.c ****     }
 120:../os_core/os_core.c ****     if (pname == (char *)0) {                    /* Is 'pname' a NULL pointer?                     
 2028              		.loc 1 120 0
 2029 0054 1C301BE5 		ldr	r3, [fp, #-28]
 2030 0058 000053E3 		cmp	r3, #0
 2031 005c 0600001A 		bne	.L4
 121:../os_core/os_core.c ****         OS_EXIT_CRITICAL();                      /* Yes                                            
 2032              		.loc 1 121 0
 2033              	@ 121 "../os_core/os_core.c" 1
 2034 0060 04009DE4 		ldmfd sp!, {r0}
 2035              	@ 0 "" 2
 2036              	@ 121 "../os_core/os_core.c" 1
 2037 0064 00F021E1 		msr   cpsr_c, r0
 2038              	@ 0 "" 2
 122:../os_core/os_core.c ****         *err = OS_ERR_PNAME_NULL;
 2039              		.loc 1 122 0
 2040 0068 20301BE5 		ldr	r3, [fp, #-32]
 2041 006c 0F20A0E3 		mov	r2, #15
 2042 0070 0020C3E5 		strb	r2, [r3, #0]
 123:../os_core/os_core.c ****         return (0);
 2043              		.loc 1 123 0
 2044 0074 0030A0E3 		mov	r3, #0
 2045 0078 180000EA 		b	.L3
 2046              	.L4:
 124:../os_core/os_core.c ****     }
 125:../os_core/os_core.c **** #endif
 126:../os_core/os_core.c ****     switch (pevent->OSEventType) {
 2047              		.loc 1 126 0
 2048 007c 18301BE5 		ldr	r3, [fp, #-24]
 2049 0080 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2050 0084 013043E2 		sub	r3, r3, #1
 2051 0088 030053E3 		cmp	r3, #3
 2052 008c 0D00008A 		bhi	.L5
 127:../os_core/os_core.c ****         case OS_EVENT_TYPE_SEM:
 128:../os_core/os_core.c ****         case OS_EVENT_TYPE_MUTEX:
 129:../os_core/os_core.c ****         case OS_EVENT_TYPE_MBOX:
 130:../os_core/os_core.c ****         case OS_EVENT_TYPE_Q:
 131:../os_core/os_core.c ****              break;
 132:../os_core/os_core.c **** 
 133:../os_core/os_core.c ****         default:
 134:../os_core/os_core.c ****              OS_EXIT_CRITICAL();
 135:../os_core/os_core.c ****              *err = OS_ERR_EVENT_TYPE;
 136:../os_core/os_core.c ****              return (0);
 137:../os_core/os_core.c ****     }
 138:../os_core/os_core.c ****     len  = OS_StrCopy(pname, pevent->OSEventName);    /* Copy name from OS_EVENT                   
 2053              		.loc 1 138 0
 2054 0090 18301BE5 		ldr	r3, [fp, #-24]
 2055 0094 103083E2 		add	r3, r3, #16
 2056 0098 1C001BE5 		ldr	r0, [fp, #-28]
 2057 009c 0310A0E1 		mov	r1, r3
 2058 00a0 FEFFFFEB 		bl	OS_StrCopy
 2059 00a4 0030A0E1 		mov	r3, r0
 2060 00a8 0D304BE5 		strb	r3, [fp, #-13]
 139:../os_core/os_core.c ****     OS_EXIT_CRITICAL();
 2061              		.loc 1 139 0
 2062              	@ 139 "../os_core/os_core.c" 1
 2063 00ac 04009DE4 		ldmfd sp!, {r0}
 2064              	@ 0 "" 2
 2065              	@ 139 "../os_core/os_core.c" 1
 2066 00b0 00F021E1 		msr   cpsr_c, r0
 2067              	@ 0 "" 2
 140:../os_core/os_core.c ****     *err = OS_NO_ERR;
 2068              		.loc 1 140 0
 2069 00b4 20301BE5 		ldr	r3, [fp, #-32]
 2070 00b8 0020A0E3 		mov	r2, #0
 2071 00bc 0020C3E5 		strb	r2, [r3, #0]
 141:../os_core/os_core.c ****     return (len);
 2072              		.loc 1 141 0
 2073 00c0 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2074 00c4 050000EA 		b	.L3
 2075              	.L5:
 134:../os_core/os_core.c ****              OS_EXIT_CRITICAL();
 2076              		.loc 1 134 0
 2077              	@ 134 "../os_core/os_core.c" 1
 2078 00c8 04009DE4 		ldmfd sp!, {r0}
 2079              	@ 0 "" 2
 2080              	@ 134 "../os_core/os_core.c" 1
 2081 00cc 00F021E1 		msr   cpsr_c, r0
 2082              	@ 0 "" 2
 135:../os_core/os_core.c ****              *err = OS_ERR_EVENT_TYPE;
 2083              		.loc 1 135 0
 2084 00d0 20301BE5 		ldr	r3, [fp, #-32]
 2085 00d4 0120A0E3 		mov	r2, #1
 2086 00d8 0020C3E5 		strb	r2, [r3, #0]
 136:../os_core/os_core.c ****              return (0);
 2087              		.loc 1 136 0
 2088 00dc 0030A0E3 		mov	r3, #0
 2089              	.L3:
 142:../os_core/os_core.c **** }
 2090              		.loc 1 142 0
 2091 00e0 0300A0E1 		mov	r0, r3
 2092 00e4 0CD04BE2 		sub	sp, fp, #12
 2093 00e8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2094 00ec 1EFF2FE1 		bx	lr
 2095              		.cfi_endproc
 2096              	.LFE0:
 2098              		.align	2
 2099              		.global	OSEventNameSet
 2101              	OSEventNameSet:
 2102              	.LFB1:
 143:../os_core/os_core.c **** #endif
 144:../os_core/os_core.c **** 
 145:../os_core/os_core.c **** /*$PAGE*/
 146:../os_core/os_core.c **** /*
 147:../os_core/os_core.c **** ***************************************************************************************************
 148:../os_core/os_core.c **** *                         ASSIGN A NAME TO A SEMAPHORE, MUTEX, MAILBOX or QUEUE
 149:../os_core/os_core.c **** *
 150:../os_core/os_core.c **** * Description: This function assigns a name to a semaphore, mutex, mailbox or queue.
 151:../os_core/os_core.c **** *
 152:../os_core/os_core.c **** * Arguments  : pevent    is a pointer to the event group.  'pevent' can point either to a semaphore
 153:../os_core/os_core.c **** *                        a mutex, a mailbox or a queue.  Where this function is concerned, it doesn
 154:../os_core/os_core.c **** *                        matter the actual type.
 155:../os_core/os_core.c **** *
 156:../os_core/os_core.c **** *              pname     is a pointer to an ASCII string that will be used as the name of the semap
 157:../os_core/os_core.c **** *                        mutex, mailbox or queue.  The string must be able to hold at least 
 158:../os_core/os_core.c **** *                        OS_EVENT_NAME_SIZE characters.
 159:../os_core/os_core.c **** *
 160:../os_core/os_core.c **** *              err       is a pointer to an error code that can contain one of the following values
 161:../os_core/os_core.c **** *
 162:../os_core/os_core.c **** *                        OS_NO_ERR                  if the requested task is resumed
 163:../os_core/os_core.c **** *                        OS_ERR_EVENT_TYPE          if 'pevent' is not pointing to the proper event
 164:../os_core/os_core.c **** *                                                   control block type.
 165:../os_core/os_core.c **** *                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
 166:../os_core/os_core.c **** *                        OS_ERR_PEVENT_NULL         if you passed a NULL pointer for 'pevent'
 167:../os_core/os_core.c **** *
 168:../os_core/os_core.c **** * Returns    : None
 169:../os_core/os_core.c **** ***************************************************************************************************
 170:../os_core/os_core.c **** */
 171:../os_core/os_core.c **** 
 172:../os_core/os_core.c **** #if OS_EVENT_EN && (OS_EVENT_NAME_SIZE > 1)
 173:../os_core/os_core.c **** void  OSEventNameSet (OS_EVENT *pevent, char *pname, INT8U *err)
 174:../os_core/os_core.c **** {
 2103              		.loc 1 174 0
 2104              		.cfi_startproc
 2105              		@ Function supports interworking.
 2106              		@ args = 0, pretend = 0, frame = 24
 2107              		@ frame_needed = 1, uses_anonymous_args = 0
 2108 00f0 0DC0A0E1 		mov	ip, sp
 2109              	.LCFI2:
 2110              		.cfi_def_cfa_register 12
 2111 00f4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2112 00f8 04B04CE2 		sub	fp, ip, #4
 2113              		.cfi_offset 14, -8
 2114              		.cfi_offset 13, -12
 2115              		.cfi_offset 11, -16
 2116              	.LCFI3:
 2117              		.cfi_def_cfa 11, 4
 2118 00fc 18D04DE2 		sub	sp, sp, #24
 2119 0100 18000BE5 		str	r0, [fp, #-24]
 2120 0104 1C100BE5 		str	r1, [fp, #-28]
 2121 0108 20200BE5 		str	r2, [fp, #-32]
 175:../os_core/os_core.c ****     INT8U      len;
 176:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
 177:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 178:../os_core/os_core.c **** 
 179:../os_core/os_core.c **** 
 180:../os_core/os_core.c **** 
 181:../os_core/os_core.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
 182:../os_core/os_core.c **** #endif    
 183:../os_core/os_core.c ****     OS_ENTER_CRITICAL();
 2122              		.loc 1 183 0
 2123              	@ 183 "../os_core/os_core.c" 1
 2124 010c 00000FE1 		mrs   r0, cpsr
 2125              	@ 0 "" 2
 2126              	@ 183 "../os_core/os_core.c" 1
 2127 0110 04002DE5 		stmfd sp!, {r0}
 2128              	@ 0 "" 2
 2129              	@ 183 "../os_core/os_core.c" 1
 2130 0114 C00080E3 		orr   r0, r0, #0b11000000
 2131              	@ 0 "" 2
 2132              	@ 183 "../os_core/os_core.c" 1
 2133 0118 00F021E1 		msr   cpsr_c, r0
 2134              	@ 0 "" 2
 184:../os_core/os_core.c **** #if OS_ARG_CHK_EN > 0
 185:../os_core/os_core.c ****     if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                    
 2135              		.loc 1 185 0
 2136 011c 18301BE5 		ldr	r3, [fp, #-24]
 2137 0120 000053E3 		cmp	r3, #0
 2138 0124 0500001A 		bne	.L8
 186:../os_core/os_core.c ****         OS_EXIT_CRITICAL();                      /* Yes                                            
 2139              		.loc 1 186 0
 2140              	@ 186 "../os_core/os_core.c" 1
 2141 0128 04009DE4 		ldmfd sp!, {r0}
 2142              	@ 0 "" 2
 2143              	@ 186 "../os_core/os_core.c" 1
 2144 012c 00F021E1 		msr   cpsr_c, r0
 2145              	@ 0 "" 2
 187:../os_core/os_core.c ****         *err = OS_ERR_PEVENT_NULL;
 2146              		.loc 1 187 0
 2147 0130 20301BE5 		ldr	r3, [fp, #-32]
 2148 0134 0420A0E3 		mov	r2, #4
 2149 0138 0020C3E5 		strb	r2, [r3, #0]
 188:../os_core/os_core.c ****         return;
 2150              		.loc 1 188 0
 2151 013c 2B0000EA 		b	.L7
 2152              	.L8:
 189:../os_core/os_core.c ****     }
 190:../os_core/os_core.c ****     if (pname == (char *)0) {                    /* Is 'pname' a NULL pointer?                     
 2153              		.loc 1 190 0
 2154 0140 1C301BE5 		ldr	r3, [fp, #-28]
 2155 0144 000053E3 		cmp	r3, #0
 2156 0148 0500001A 		bne	.L10
 191:../os_core/os_core.c ****         OS_EXIT_CRITICAL();                      /* Yes                                            
 2157              		.loc 1 191 0
 2158              	@ 191 "../os_core/os_core.c" 1
 2159 014c 04009DE4 		ldmfd sp!, {r0}
 2160              	@ 0 "" 2
 2161              	@ 191 "../os_core/os_core.c" 1
 2162 0150 00F021E1 		msr   cpsr_c, r0
 2163              	@ 0 "" 2
 192:../os_core/os_core.c ****         *err = OS_ERR_PNAME_NULL;
 2164              		.loc 1 192 0
 2165 0154 20301BE5 		ldr	r3, [fp, #-32]
 2166 0158 0F20A0E3 		mov	r2, #15
 2167 015c 0020C3E5 		strb	r2, [r3, #0]
 193:../os_core/os_core.c ****         return;
 2168              		.loc 1 193 0
 2169 0160 220000EA 		b	.L7
 2170              	.L10:
 194:../os_core/os_core.c ****     }
 195:../os_core/os_core.c **** #endif
 196:../os_core/os_core.c ****     switch (pevent->OSEventType) {
 2171              		.loc 1 196 0
 2172 0164 18301BE5 		ldr	r3, [fp, #-24]
 2173 0168 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2174 016c 013043E2 		sub	r3, r3, #1
 2175 0170 030053E3 		cmp	r3, #3
 2176 0174 0700008A 		bhi	.L11
 197:../os_core/os_core.c ****         case OS_EVENT_TYPE_SEM:
 198:../os_core/os_core.c ****         case OS_EVENT_TYPE_MUTEX:
 199:../os_core/os_core.c ****         case OS_EVENT_TYPE_MBOX:
 200:../os_core/os_core.c ****         case OS_EVENT_TYPE_Q:
 201:../os_core/os_core.c ****              break;
 202:../os_core/os_core.c **** 
 203:../os_core/os_core.c ****         default:
 204:../os_core/os_core.c ****              OS_EXIT_CRITICAL();
 205:../os_core/os_core.c ****              *err = OS_ERR_EVENT_TYPE;
 206:../os_core/os_core.c ****              return;
 207:../os_core/os_core.c ****     }
 208:../os_core/os_core.c ****     len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?
 2177              		.loc 1 208 0
 2178 0178 1C001BE5 		ldr	r0, [fp, #-28]
 2179 017c FEFFFFEB 		bl	OS_StrLen
 2180 0180 0030A0E1 		mov	r3, r0
 2181 0184 0D304BE5 		strb	r3, [fp, #-13]
 209:../os_core/os_core.c ****     if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                        
 2182              		.loc 1 209 0
 2183 0188 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2184 018c 1F0053E3 		cmp	r3, #31
 2185 0190 0600008A 		bhi	.L13
 2186 0194 0B0000EA 		b	.L15
 2187              	.L11:
 204:../os_core/os_core.c ****              OS_EXIT_CRITICAL();
 2188              		.loc 1 204 0
 2189              	@ 204 "../os_core/os_core.c" 1
 2190 0198 04009DE4 		ldmfd sp!, {r0}
 2191              	@ 0 "" 2
 2192              	@ 204 "../os_core/os_core.c" 1
 2193 019c 00F021E1 		msr   cpsr_c, r0
 2194              	@ 0 "" 2
 205:../os_core/os_core.c ****              *err = OS_ERR_EVENT_TYPE;
 2195              		.loc 1 205 0
 2196 01a0 20301BE5 		ldr	r3, [fp, #-32]
 2197 01a4 0120A0E3 		mov	r2, #1
 2198 01a8 0020C3E5 		strb	r2, [r3, #0]
 206:../os_core/os_core.c ****              return;
 2199              		.loc 1 206 0
 2200 01ac 0F0000EA 		b	.L7
 2201              	.L13:
 210:../os_core/os_core.c ****         OS_EXIT_CRITICAL();
 2202              		.loc 1 210 0
 2203              	@ 210 "../os_core/os_core.c" 1
 2204 01b0 04009DE4 		ldmfd sp!, {r0}
 2205              	@ 0 "" 2
 2206              	@ 210 "../os_core/os_core.c" 1
 2207 01b4 00F021E1 		msr   cpsr_c, r0
 2208              	@ 0 "" 2
 211:../os_core/os_core.c ****         *err = OS_ERR_EVENT_NAME_TOO_LONG;
 2209              		.loc 1 211 0
 2210 01b8 20301BE5 		ldr	r3, [fp, #-32]
 2211 01bc 0C20A0E3 		mov	r2, #12
 2212 01c0 0020C3E5 		strb	r2, [r3, #0]
 212:../os_core/os_core.c ****         return;
 2213              		.loc 1 212 0
 2214 01c4 090000EA 		b	.L7
 2215              	.L15:
 213:../os_core/os_core.c ****     } 
 214:../os_core/os_core.c ****     (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block 
 2216              		.loc 1 214 0
 2217 01c8 18301BE5 		ldr	r3, [fp, #-24]
 2218 01cc 103083E2 		add	r3, r3, #16
 2219 01d0 0300A0E1 		mov	r0, r3
 2220 01d4 1C101BE5 		ldr	r1, [fp, #-28]
 2221 01d8 FEFFFFEB 		bl	OS_StrCopy
 215:../os_core/os_core.c ****     OS_EXIT_CRITICAL();
 2222              		.loc 1 215 0
 2223              	@ 215 "../os_core/os_core.c" 1
 2224 01dc 04009DE4 		ldmfd sp!, {r0}
 2225              	@ 0 "" 2
 2226              	@ 215 "../os_core/os_core.c" 1
 2227 01e0 00F021E1 		msr   cpsr_c, r0
 2228              	@ 0 "" 2
 216:../os_core/os_core.c ****     *err = OS_NO_ERR;
 2229              		.loc 1 216 0
 2230 01e4 20301BE5 		ldr	r3, [fp, #-32]
 2231 01e8 0020A0E3 		mov	r2, #0
 2232 01ec 0020C3E5 		strb	r2, [r3, #0]
 2233              	.L7:
 217:../os_core/os_core.c **** }
 2234              		.loc 1 217 0
 2235 01f0 0CD04BE2 		sub	sp, fp, #12
 2236 01f4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2237 01f8 1EFF2FE1 		bx	lr
 2238              		.cfi_endproc
 2239              	.LFE1:
 2241              		.align	2
 2242              		.global	OSInit
 2244              	OSInit:
 2245              	.LFB2:
 218:../os_core/os_core.c **** #endif
 219:../os_core/os_core.c **** 
 220:../os_core/os_core.c **** /*$PAGE*/
 221:../os_core/os_core.c **** /*
 222:../os_core/os_core.c **** ***************************************************************************************************
 223:../os_core/os_core.c **** *                                             INITIALIZATION
 224:../os_core/os_core.c **** *
 225:../os_core/os_core.c **** * Description: This function is used to initialize the internals of uC/OS-II and MUST be called pri
 226:../os_core/os_core.c **** *              creating any uC/OS-II object and, prior to calling OSStart().
 227:../os_core/os_core.c **** *
 228:../os_core/os_core.c **** * Arguments  : none
 229:../os_core/os_core.c **** *
 230:../os_core/os_core.c **** * Returns    : none
 231:../os_core/os_core.c **** ***************************************************************************************************
 232:../os_core/os_core.c **** */
 233:../os_core/os_core.c **** 
 234:../os_core/os_core.c **** void  OSInit (void)
 235:../os_core/os_core.c **** {
 2246              		.loc 1 235 0
 2247              		.cfi_startproc
 2248              		@ Function supports interworking.
 2249              		@ args = 0, pretend = 0, frame = 0
 2250              		@ frame_needed = 1, uses_anonymous_args = 0
 2251 01fc 0DC0A0E1 		mov	ip, sp
 2252              	.LCFI4:
 2253              		.cfi_def_cfa_register 12
 2254 0200 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2255 0204 04B04CE2 		sub	fp, ip, #4
 2256              		.cfi_offset 14, -8
 2257              		.cfi_offset 13, -12
 2258              		.cfi_offset 11, -16
 2259              	.LCFI5:
 2260              		.cfi_def_cfa 11, 4
 236:../os_core/os_core.c **** #if OS_VERSION >= 204
 237:../os_core/os_core.c ****     OSInitHookBegin();                                           /* Call port specific initializati
 2261              		.loc 1 237 0
 2262 0208 FEFFFFEB 		bl	OSInitHookBegin
 238:../os_core/os_core.c **** #endif
 239:../os_core/os_core.c **** 
 240:../os_core/os_core.c ****     OS_InitMisc();                                               /* Initialize miscellaneous variab
 2263              		.loc 1 240 0
 2264 020c 480300EB 		bl	OS_InitMisc
 241:../os_core/os_core.c **** 
 242:../os_core/os_core.c ****     OS_InitRdyList();                                            /* Initialize the Ready List      
 2265              		.loc 1 242 0
 2266 0210 750300EB 		bl	OS_InitRdyList
 243:../os_core/os_core.c **** 
 244:../os_core/os_core.c ****     OS_InitTCBList();                                            /* Initialize the free list of OS_
 2267              		.loc 1 244 0
 2268 0214 D50300EB 		bl	OS_InitTCBList
 245:../os_core/os_core.c **** 
 246:../os_core/os_core.c ****     OS_InitEventList();                                          /* Initialize the free list of OS_
 2269              		.loc 1 246 0
 2270 0218 090300EB 		bl	OS_InitEventList
 247:../os_core/os_core.c **** 
 248:../os_core/os_core.c **** #if (OS_VERSION >= 251) && (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
 249:../os_core/os_core.c ****     OS_FlagInit();                                               /* Initialize the event flag struc
 2271              		.loc 1 249 0
 2272 021c FEFFFFEB 		bl	OS_FlagInit
 250:../os_core/os_core.c **** #endif
 251:../os_core/os_core.c **** 
 252:../os_core/os_core.c **** #if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
 253:../os_core/os_core.c ****     OS_MemInit();                                                /* Initialize the memory manager  
 2273              		.loc 1 253 0
 2274 0220 FEFFFFEB 		bl	OS_MemInit
 254:../os_core/os_core.c **** #endif
 255:../os_core/os_core.c **** 
 256:../os_core/os_core.c **** #if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
 257:../os_core/os_core.c ****     OS_QInit();                                                  /* Initialize the message queue st
 2275              		.loc 1 257 0
 2276 0224 FEFFFFEB 		bl	OS_QInit
 258:../os_core/os_core.c **** #endif
 259:../os_core/os_core.c **** 
 260:../os_core/os_core.c ****     OS_InitTaskIdle();                                           /* Create the Idle Task           
 2277              		.loc 1 260 0
 2278 0228 9C0300EB 		bl	OS_InitTaskIdle
 261:../os_core/os_core.c **** #if OS_TASK_STAT_EN > 0
 262:../os_core/os_core.c ****     OS_InitTaskStat();                                           /* Create the Statistic Task      
 2279              		.loc 1 262 0
 2280 022c B50300EB 		bl	OS_InitTaskStat
 263:../os_core/os_core.c **** #endif
 264:../os_core/os_core.c **** 
 265:../os_core/os_core.c **** #if OS_VERSION >= 204
 266:../os_core/os_core.c ****     OSInitHookEnd();                                             /* Call port specific init. code  
 2281              		.loc 1 266 0
 2282 0230 FEFFFFEB 		bl	OSInitHookEnd
 267:../os_core/os_core.c **** #endif
 268:../os_core/os_core.c **** 
 269:../os_core/os_core.c **** #if OS_VERSION >= 270 && OS_DEBUG_EN > 0
 270:../os_core/os_core.c ****     OSDebugInit();
 2283              		.loc 1 270 0
 2284 0234 FEFFFFEB 		bl	OSDebugInit
 271:../os_core/os_core.c **** #endif
 272:../os_core/os_core.c **** }
 2285              		.loc 1 272 0
 2286 0238 0CD04BE2 		sub	sp, fp, #12
 2287 023c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2288 0240 1EFF2FE1 		bx	lr
 2289              		.cfi_endproc
 2290              	.LFE2:
 2292              		.align	2
 2293              		.global	OSIntEnter
 2295              	OSIntEnter:
 2296              	.LFB3:
 273:../os_core/os_core.c **** /*$PAGE*/
 274:../os_core/os_core.c **** /*
 275:../os_core/os_core.c **** ***************************************************************************************************
 276:../os_core/os_core.c **** *                                              ENTER ISR
 277:../os_core/os_core.c **** *
 278:../os_core/os_core.c **** * Description: This function is used to notify uC/OS-II that you are about to service an interrupt
 279:../os_core/os_core.c **** *              service routine (ISR).  This allows uC/OS-II to keep track of interrupt nesting and 
 280:../os_core/os_core.c **** *              only perform rescheduling at the last nested ISR.
 281:../os_core/os_core.c **** *
 282:../os_core/os_core.c **** * Arguments  : none
 283:../os_core/os_core.c **** *
 284:../os_core/os_core.c **** * Returns    : none
 285:../os_core/os_core.c **** *
 286:../os_core/os_core.c **** * Notes      : 1) This function should be called ith interrupts already disabled
 287:../os_core/os_core.c **** *              2) Your ISR can directly increment OSIntNesting without calling this function becaus
 288:../os_core/os_core.c **** *                 OSIntNesting has been declared 'global'.  
 289:../os_core/os_core.c **** *              3) You MUST still call OSIntExit() even though you increment OSIntNesting directly.
 290:../os_core/os_core.c **** *              4) You MUST invoke OSIntEnter() and OSIntExit() in pair.  In other words, for every 
 291:../os_core/os_core.c **** *                 to OSIntEnter() at the beginning of the ISR you MUST have a call to OSIntExit() a
 292:../os_core/os_core.c **** *                 end of the ISR.
 293:../os_core/os_core.c **** *              5) You are allowed to nest interrupts up to 255 levels deep.
 294:../os_core/os_core.c **** *              6) I removed the OS_ENTER_CRITICAL() and OS_EXIT_CRITICAL() around the increment bec
 295:../os_core/os_core.c **** *                 OSIntEnter() is always called with interrupts disabled.
 296:../os_core/os_core.c **** ***************************************************************************************************
 297:../os_core/os_core.c **** */
 298:../os_core/os_core.c **** 
 299:../os_core/os_core.c **** void  OSIntEnter (void)
 300:../os_core/os_core.c **** {
 2297              		.loc 1 300 0
 2298              		.cfi_startproc
 2299              		@ Function supports interworking.
 2300              		@ args = 0, pretend = 0, frame = 0
 2301              		@ frame_needed = 1, uses_anonymous_args = 0
 2302 0244 0DC0A0E1 		mov	ip, sp
 2303              	.LCFI6:
 2304              		.cfi_def_cfa_register 12
 2305 0248 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2306 024c 04B04CE2 		sub	fp, ip, #4
 2307              		.cfi_offset 14, -8
 2308              		.cfi_offset 13, -12
 2309              		.cfi_offset 11, -16
 2310              	.LCFI7:
 2311              		.cfi_def_cfa 11, 4
 301:../os_core/os_core.c ****     if (OSRunning == TRUE) {
 2312              		.loc 1 301 0
 2313 0250 3C309FE5 		ldr	r3, .L19
 2314 0254 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2315 0258 010053E3 		cmp	r3, #1
 2316 025c 0900001A 		bne	.L17
 302:../os_core/os_core.c ****         if (OSIntNesting < 255u) {
 2317              		.loc 1 302 0
 2318 0260 30309FE5 		ldr	r3, .L19+4
 2319 0264 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2320 0268 FF0053E3 		cmp	r3, #255
 2321 026c 0500000A 		beq	.L17
 303:../os_core/os_core.c ****             OSIntNesting++;                      /* Increment ISR nesting level                    
 2322              		.loc 1 303 0
 2323 0270 20309FE5 		ldr	r3, .L19+4
 2324 0274 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2325 0278 013083E2 		add	r3, r3, #1
 2326 027c FF2003E2 		and	r2, r3, #255
 2327 0280 10309FE5 		ldr	r3, .L19+4
 2328 0284 0020C3E5 		strb	r2, [r3, #0]
 2329              	.L17:
 304:../os_core/os_core.c ****         }
 305:../os_core/os_core.c ****     }
 306:../os_core/os_core.c **** }
 2330              		.loc 1 306 0
 2331 0288 0CD04BE2 		sub	sp, fp, #12
 2332 028c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2333 0290 1EFF2FE1 		bx	lr
 2334              	.L20:
 2335              		.align	2
 2336              	.L19:
 2337 0294 00000000 		.word	OSRunning
 2338 0298 00000000 		.word	OSIntNesting
 2339              		.cfi_endproc
 2340              	.LFE3:
 2342              		.align	2
 2343              		.global	OSIntExit
 2345              	OSIntExit:
 2346              	.LFB4:
 307:../os_core/os_core.c **** /*$PAGE*/
 308:../os_core/os_core.c **** /*
 309:../os_core/os_core.c **** ***************************************************************************************************
 310:../os_core/os_core.c **** *                                               EXIT ISR
 311:../os_core/os_core.c **** *
 312:../os_core/os_core.c **** * Description: This function is used to notify uC/OS-II that you have completed serviving an ISR.  
 313:../os_core/os_core.c **** *              the last nested ISR has completed, uC/OS-II will call the scheduler to determine whe
 314:../os_core/os_core.c **** *              a new, high-priority task, is ready to run.
 315:../os_core/os_core.c **** *
 316:../os_core/os_core.c **** * Arguments  : none
 317:../os_core/os_core.c **** *
 318:../os_core/os_core.c **** * Returns    : none
 319:../os_core/os_core.c **** *
 320:../os_core/os_core.c **** * Notes      : 1) You MUST invoke OSIntEnter() and OSIntExit() in pair.  In other words, for every 
 321:../os_core/os_core.c **** *                 to OSIntEnter() at the beginning of the ISR you MUST have a call to OSIntExit() a
 322:../os_core/os_core.c **** *                 end of the ISR.
 323:../os_core/os_core.c **** *              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
 324:../os_core/os_core.c **** ***************************************************************************************************
 325:../os_core/os_core.c **** */
 326:../os_core/os_core.c **** 
 327:../os_core/os_core.c **** void  OSIntExit (void)
 328:../os_core/os_core.c **** {
 2347              		.loc 1 328 0
 2348              		.cfi_startproc
 2349              		@ Function supports interworking.
 2350              		@ args = 0, pretend = 0, frame = 8
 2351              		@ frame_needed = 1, uses_anonymous_args = 0
 2352 029c 0DC0A0E1 		mov	ip, sp
 2353              	.LCFI8:
 2354              		.cfi_def_cfa_register 12
 2355 02a0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2356 02a4 04B04CE2 		sub	fp, ip, #4
 2357              		.cfi_offset 14, -8
 2358              		.cfi_offset 13, -12
 2359              		.cfi_offset 11, -16
 2360              	.LCFI9:
 2361              		.cfi_def_cfa 11, 4
 2362 02a8 08D04DE2 		sub	sp, sp, #8
 329:../os_core/os_core.c ****     INT8U      y;
 330:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status regis
 331:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 332:../os_core/os_core.c ****     
 333:../os_core/os_core.c ****     
 334:../os_core/os_core.c **** 
 335:../os_core/os_core.c ****     cpu_sr = 0;                                            /* Prevent compiler warning             
 336:../os_core/os_core.c **** #endif    
 337:../os_core/os_core.c ****     if (OSRunning == TRUE) {
 2363              		.loc 1 337 0
 2364 02ac 18319FE5 		ldr	r3, .L25
 2365 02b0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2366 02b4 010053E3 		cmp	r3, #1
 2367 02b8 4000001A 		bne	.L21
 338:../os_core/os_core.c ****         OS_ENTER_CRITICAL();
 2368              		.loc 1 338 0
 2369              	@ 338 "../os_core/os_core.c" 1
 2370 02bc 00000FE1 		mrs   r0, cpsr
 2371              	@ 0 "" 2
 2372              	@ 338 "../os_core/os_core.c" 1
 2373 02c0 04002DE5 		stmfd sp!, {r0}
 2374              	@ 0 "" 2
 2375              	@ 338 "../os_core/os_core.c" 1
 2376 02c4 C00080E3 		orr   r0, r0, #0b11000000
 2377              	@ 0 "" 2
 2378              	@ 338 "../os_core/os_core.c" 1
 2379 02c8 00F021E1 		msr   cpsr_c, r0
 2380              	@ 0 "" 2
 339:../os_core/os_core.c ****         if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping   
 2381              		.loc 1 339 0
 2382 02cc FC309FE5 		ldr	r3, .L25+4
 2383 02d0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2384 02d4 000053E3 		cmp	r3, #0
 2385 02d8 0500000A 		beq	.L23
 340:../os_core/os_core.c ****             OSIntNesting--;
 2386              		.loc 1 340 0
 2387 02dc EC309FE5 		ldr	r3, .L25+4
 2388 02e0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2389 02e4 013043E2 		sub	r3, r3, #1
 2390 02e8 FF2003E2 		and	r2, r3, #255
 2391 02ec DC309FE5 		ldr	r3, .L25+4
 2392 02f0 0020C3E5 		strb	r2, [r3, #0]
 2393              	.L23:
 341:../os_core/os_core.c ****         }
 342:../os_core/os_core.c ****         if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete 
 2394              		.loc 1 342 0
 2395 02f4 D4309FE5 		ldr	r3, .L25+4
 2396 02f8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2397 02fc 000053E3 		cmp	r3, #0
 2398 0300 2C00001A 		bne	.L24
 343:../os_core/os_core.c ****             if (OSLockNesting == 0) {                      /* ... and not locked.                  
 2399              		.loc 1 343 0
 2400 0304 C8309FE5 		ldr	r3, .L25+8
 2401 0308 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2402 030c 000053E3 		cmp	r3, #0
 2403 0310 2800001A 		bne	.L24
 344:../os_core/os_core.c ****                 y             = OSUnMapTbl[OSRdyGrp];          
 2404              		.loc 1 344 0
 2405 0314 BC309FE5 		ldr	r3, .L25+12
 2406 0318 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2407 031c B8209FE5 		ldr	r2, .L25+16
 2408 0320 0330D2E7 		ldrb	r3, [r2, r3]
 2409 0324 0D304BE5 		strb	r3, [fp, #-13]
 345:../os_core/os_core.c ****                 OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 2410              		.loc 1 345 0
 2411 0328 0D305BE5 		ldrb	r3, [fp, #-13]
 2412 032c 8331A0E1 		mov	r3, r3, asl #3
 2413 0330 FF2003E2 		and	r2, r3, #255
 2414 0334 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2415 0338 A0109FE5 		ldr	r1, .L25+20
 2416 033c 0330D1E7 		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 2417 0340 94109FE5 		ldr	r1, .L25+16
 2418 0344 0330D1E7 		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 2419 0348 033082E0 		add	r3, r2, r3
 2420 034c FF2003E2 		and	r2, r3, #255
 2421 0350 8C309FE5 		ldr	r3, .L25+24
 2422 0354 0020C3E5 		strb	r2, [r3, #0]
 346:../os_core/os_core.c ****                 if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest 
 2423              		.loc 1 346 0
 2424 0358 84309FE5 		ldr	r3, .L25+24
 2425 035c 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2426 0360 80309FE5 		ldr	r3, .L25+28
 2427 0364 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2428 0368 030052E1 		cmp	r2, r3
 2429 036c 1100000A 		beq	.L24
 347:../os_core/os_core.c ****                     OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 2430              		.loc 1 347 0
 2431 0370 6C309FE5 		ldr	r3, .L25+24
 2432 0374 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2433 0378 0320A0E1 		mov	r2, r3
 2434 037c 68309FE5 		ldr	r3, .L25+32
 2435 0380 022193E7 		ldr	r2, [r3, r2, asl #2]
 2436 0384 64309FE5 		ldr	r3, .L25+36
 2437 0388 002083E5 		str	r2, [r3, #0]
 348:../os_core/os_core.c **** #if OS_TASK_PROFILE_EN > 0
 349:../os_core/os_core.c ****                     OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this ta
 2438              		.loc 1 349 0
 2439 038c 5C309FE5 		ldr	r3, .L25+36
 2440 0390 003093E5 		ldr	r3, [r3, #0]
 2441 0394 342093E5 		ldr	r2, [r3, #52]
 2442 0398 012082E2 		add	r2, r2, #1
 2443 039c 342083E5 		str	r2, [r3, #52]
 350:../os_core/os_core.c **** #endif
 351:../os_core/os_core.c ****                     OSCtxSwCtr++;                          /* Keep track of the number of ctx switc
 2444              		.loc 1 351 0
 2445 03a0 4C309FE5 		ldr	r3, .L25+40
 2446 03a4 003093E5 		ldr	r3, [r3, #0]
 2447 03a8 012083E2 		add	r2, r3, #1
 2448 03ac 40309FE5 		ldr	r3, .L25+40
 2449 03b0 002083E5 		str	r2, [r3, #0]
 352:../os_core/os_core.c ****                     OSIntCtxSw();                          /* Perform interrupt level ctx switch   
 2450              		.loc 1 352 0
 2451 03b4 FEFFFFEB 		bl	OSIntCtxSw
 2452              	.L24:
 353:../os_core/os_core.c ****                 }
 354:../os_core/os_core.c ****             }
 355:../os_core/os_core.c ****         }
 356:../os_core/os_core.c ****         OS_EXIT_CRITICAL();
 2453              		.loc 1 356 0
 2454              	@ 356 "../os_core/os_core.c" 1
 2455 03b8 04009DE4 		ldmfd sp!, {r0}
 2456              	@ 0 "" 2
 2457              	@ 356 "../os_core/os_core.c" 1
 2458 03bc 00F021E1 		msr   cpsr_c, r0
 2459              	@ 0 "" 2
 2460              	.L21:
 357:../os_core/os_core.c ****     }
 358:../os_core/os_core.c **** }
 2461              		.loc 1 358 0
 2462 03c0 0CD04BE2 		sub	sp, fp, #12
 2463 03c4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2464 03c8 1EFF2FE1 		bx	lr
 2465              	.L26:
 2466              		.align	2
 2467              	.L25:
 2468 03cc 00000000 		.word	OSRunning
 2469 03d0 00000000 		.word	OSIntNesting
 2470 03d4 00000000 		.word	OSLockNesting
 2471 03d8 00000000 		.word	OSRdyGrp
 2472 03dc 00000000 		.word	OSUnMapTbl
 2473 03e0 00000000 		.word	OSRdyTbl
 2474 03e4 00000000 		.word	OSPrioHighRdy
 2475 03e8 00000000 		.word	OSPrioCur
 2476 03ec 00000000 		.word	OSTCBPrioTbl
 2477 03f0 00000000 		.word	OSTCBHighRdy
 2478 03f4 00000000 		.word	OSCtxSwCtr
 2479              		.cfi_endproc
 2480              	.LFE4:
 2482              		.align	2
 2483              		.global	OSSchedLock
 2485              	OSSchedLock:
 2486              	.LFB5:
 359:../os_core/os_core.c **** /*$PAGE*/
 360:../os_core/os_core.c **** /*
 361:../os_core/os_core.c **** ***************************************************************************************************
 362:../os_core/os_core.c **** *                                          PREVENT SCHEDULING
 363:../os_core/os_core.c **** *
 364:../os_core/os_core.c **** * Description: This function is used to prevent rescheduling to take place.  This allows your appli
 365:../os_core/os_core.c **** *              to prevent context switches until you are ready to permit context switching.
 366:../os_core/os_core.c **** *
 367:../os_core/os_core.c **** * Arguments  : none
 368:../os_core/os_core.c **** *
 369:../os_core/os_core.c **** * Returns    : none
 370:../os_core/os_core.c **** *
 371:../os_core/os_core.c **** * Notes      : 1) You MUST invoke OSSchedLock() and OSSchedUnlock() in pair.  In other words, for e
 372:../os_core/os_core.c **** *                 call to OSSchedLock() you MUST have a call to OSSchedUnlock().
 373:../os_core/os_core.c **** ***************************************************************************************************
 374:../os_core/os_core.c **** */
 375:../os_core/os_core.c **** 
 376:../os_core/os_core.c **** #if OS_SCHED_LOCK_EN > 0
 377:../os_core/os_core.c **** void  OSSchedLock (void)
 378:../os_core/os_core.c **** {
 2487              		.loc 1 378 0
 2488              		.cfi_startproc
 2489              		@ Function supports interworking.
 2490              		@ args = 0, pretend = 0, frame = 0
 2491              		@ frame_needed = 1, uses_anonymous_args = 0
 2492 03f8 0DC0A0E1 		mov	ip, sp
 2493              	.LCFI10:
 2494              		.cfi_def_cfa_register 12
 2495 03fc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2496 0400 04B04CE2 		sub	fp, ip, #4
 2497              		.cfi_offset 14, -8
 2498              		.cfi_offset 13, -12
 2499              		.cfi_offset 11, -16
 2500              	.LCFI11:
 2501              		.cfi_def_cfa 11, 4
 379:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
 380:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 381:../os_core/os_core.c ****     
 382:../os_core/os_core.c ****     
 383:../os_core/os_core.c **** 
 384:../os_core/os_core.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
 385:../os_core/os_core.c **** #endif    
 386:../os_core/os_core.c ****     if (OSRunning == TRUE) {                     /* Make sure multitasking is running              
 2502              		.loc 1 386 0
 2503 0404 54309FE5 		ldr	r3, .L30
 2504 0408 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2505 040c 010053E3 		cmp	r3, #1
 2506 0410 0F00001A 		bne	.L27
 387:../os_core/os_core.c ****         OS_ENTER_CRITICAL();
 2507              		.loc 1 387 0
 2508              	@ 387 "../os_core/os_core.c" 1
 2509 0414 00000FE1 		mrs   r0, cpsr
 2510              	@ 0 "" 2
 2511              	@ 387 "../os_core/os_core.c" 1
 2512 0418 04002DE5 		stmfd sp!, {r0}
 2513              	@ 0 "" 2
 2514              	@ 387 "../os_core/os_core.c" 1
 2515 041c C00080E3 		orr   r0, r0, #0b11000000
 2516              	@ 0 "" 2
 2517              	@ 387 "../os_core/os_core.c" 1
 2518 0420 00F021E1 		msr   cpsr_c, r0
 2519              	@ 0 "" 2
 388:../os_core/os_core.c ****         if (OSLockNesting < 255u) {              /* Prevent OSLockNesting from wrapping back to 0  
 2520              		.loc 1 388 0
 2521 0424 38309FE5 		ldr	r3, .L30+4
 2522 0428 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2523 042c FF0053E3 		cmp	r3, #255
 2524 0430 0500000A 		beq	.L29
 389:../os_core/os_core.c ****             OSLockNesting++;                     /* Increment lock nesting level                   
 2525              		.loc 1 389 0
 2526 0434 28309FE5 		ldr	r3, .L30+4
 2527 0438 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2528 043c 013083E2 		add	r3, r3, #1
 2529 0440 FF2003E2 		and	r2, r3, #255
 2530 0444 18309FE5 		ldr	r3, .L30+4
 2531 0448 0020C3E5 		strb	r2, [r3, #0]
 2532              	.L29:
 390:../os_core/os_core.c ****         }
 391:../os_core/os_core.c ****         OS_EXIT_CRITICAL();
 2533              		.loc 1 391 0
 2534              	@ 391 "../os_core/os_core.c" 1
 2535 044c 04009DE4 		ldmfd sp!, {r0}
 2536              	@ 0 "" 2
 2537              	@ 391 "../os_core/os_core.c" 1
 2538 0450 00F021E1 		msr   cpsr_c, r0
 2539              	@ 0 "" 2
 2540              	.L27:
 392:../os_core/os_core.c ****     }
 393:../os_core/os_core.c **** }
 2541              		.loc 1 393 0
 2542 0454 0CD04BE2 		sub	sp, fp, #12
 2543 0458 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2544 045c 1EFF2FE1 		bx	lr
 2545              	.L31:
 2546              		.align	2
 2547              	.L30:
 2548 0460 00000000 		.word	OSRunning
 2549 0464 00000000 		.word	OSLockNesting
 2550              		.cfi_endproc
 2551              	.LFE5:
 2553              		.align	2
 2554              		.global	OSSchedUnlock
 2556              	OSSchedUnlock:
 2557              	.LFB6:
 394:../os_core/os_core.c **** #endif    
 395:../os_core/os_core.c **** 
 396:../os_core/os_core.c **** /*$PAGE*/
 397:../os_core/os_core.c **** /*
 398:../os_core/os_core.c **** ***************************************************************************************************
 399:../os_core/os_core.c **** *                                          ENABLE SCHEDULING
 400:../os_core/os_core.c **** *
 401:../os_core/os_core.c **** * Description: This function is used to re-allow rescheduling.
 402:../os_core/os_core.c **** *
 403:../os_core/os_core.c **** * Arguments  : none
 404:../os_core/os_core.c **** *
 405:../os_core/os_core.c **** * Returns    : none
 406:../os_core/os_core.c **** *
 407:../os_core/os_core.c **** * Notes      : 1) You MUST invoke OSSchedLock() and OSSchedUnlock() in pair.  In other words, for e
 408:../os_core/os_core.c **** *                 call to OSSchedLock() you MUST have a call to OSSchedUnlock().
 409:../os_core/os_core.c **** ***************************************************************************************************
 410:../os_core/os_core.c **** */
 411:../os_core/os_core.c **** 
 412:../os_core/os_core.c **** #if OS_SCHED_LOCK_EN > 0
 413:../os_core/os_core.c **** void  OSSchedUnlock (void)
 414:../os_core/os_core.c **** {
 2558              		.loc 1 414 0
 2559              		.cfi_startproc
 2560              		@ Function supports interworking.
 2561              		@ args = 0, pretend = 0, frame = 0
 2562              		@ frame_needed = 1, uses_anonymous_args = 0
 2563 0468 0DC0A0E1 		mov	ip, sp
 2564              	.LCFI12:
 2565              		.cfi_def_cfa_register 12
 2566 046c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2567 0470 04B04CE2 		sub	fp, ip, #4
 2568              		.cfi_offset 14, -8
 2569              		.cfi_offset 13, -12
 2570              		.cfi_offset 11, -16
 2571              	.LCFI13:
 2572              		.cfi_def_cfa 11, 4
 415:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status regis
 416:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 417:../os_core/os_core.c ****     
 418:../os_core/os_core.c ****     
 419:../os_core/os_core.c **** 
 420:../os_core/os_core.c ****     cpu_sr = 0;                                            /* Prevent compiler warning             
 421:../os_core/os_core.c **** #endif    
 422:../os_core/os_core.c ****     if (OSRunning == TRUE) {                               /* Make sure multitasking is running    
 2573              		.loc 1 422 0
 2574 0474 9C309FE5 		ldr	r3, .L37
 2575 0478 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2576 047c 010053E3 		cmp	r3, #1
 2577 0480 2100001A 		bne	.L32
 423:../os_core/os_core.c ****         OS_ENTER_CRITICAL();
 2578              		.loc 1 423 0
 2579              	@ 423 "../os_core/os_core.c" 1
 2580 0484 00000FE1 		mrs   r0, cpsr
 2581              	@ 0 "" 2
 2582              	@ 423 "../os_core/os_core.c" 1
 2583 0488 04002DE5 		stmfd sp!, {r0}
 2584              	@ 0 "" 2
 2585              	@ 423 "../os_core/os_core.c" 1
 2586 048c C00080E3 		orr   r0, r0, #0b11000000
 2587              	@ 0 "" 2
 2588              	@ 423 "../os_core/os_core.c" 1
 2589 0490 00F021E1 		msr   cpsr_c, r0
 2590              	@ 0 "" 2
 424:../os_core/os_core.c ****         if (OSLockNesting > 0) {                           /* Do not decrement if already 0        
 2591              		.loc 1 424 0
 2592 0494 80309FE5 		ldr	r3, .L37+4
 2593 0498 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2594 049c 000053E3 		cmp	r3, #0
 2595 04a0 1700000A 		beq	.L34
 425:../os_core/os_core.c ****             OSLockNesting--;                               /* Decrement lock nesting level         
 2596              		.loc 1 425 0
 2597 04a4 70309FE5 		ldr	r3, .L37+4
 2598 04a8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2599 04ac 013043E2 		sub	r3, r3, #1
 2600 04b0 FF2003E2 		and	r2, r3, #255
 2601 04b4 60309FE5 		ldr	r3, .L37+4
 2602 04b8 0020C3E5 		strb	r2, [r3, #0]
 426:../os_core/os_core.c ****             if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...  
 2603              		.loc 1 426 0
 2604 04bc 58309FE5 		ldr	r3, .L37+4
 2605 04c0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2606 04c4 000053E3 		cmp	r3, #0
 2607 04c8 0A00001A 		bne	.L35
 427:../os_core/os_core.c ****                 if (OSIntNesting == 0) {                   /* ... not in an ISR                    
 2608              		.loc 1 427 0
 2609 04cc 4C309FE5 		ldr	r3, .L37+8
 2610 04d0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2611 04d4 000053E3 		cmp	r3, #0
 2612 04d8 0300001A 		bne	.L36
 428:../os_core/os_core.c ****                     OS_EXIT_CRITICAL();
 2613              		.loc 1 428 0
 2614              	@ 428 "../os_core/os_core.c" 1
 2615 04dc 04009DE4 		ldmfd sp!, {r0}
 2616              	@ 0 "" 2
 2617              	@ 428 "../os_core/os_core.c" 1
 2618 04e0 00F021E1 		msr   cpsr_c, r0
 2619              	@ 0 "" 2
 429:../os_core/os_core.c ****                     OS_Sched();                            /* See if a HPT is ready                
 2620              		.loc 1 429 0
 2621 04e4 FEFFFFEB 		bl	OS_Sched
 2622 04e8 070000EA 		b	.L32
 2623              	.L36:
 430:../os_core/os_core.c ****                 } else {
 431:../os_core/os_core.c ****                     OS_EXIT_CRITICAL();
 2624              		.loc 1 431 0
 2625              	@ 431 "../os_core/os_core.c" 1
 2626 04ec 04009DE4 		ldmfd sp!, {r0}
 2627              	@ 0 "" 2
 2628              	@ 431 "../os_core/os_core.c" 1
 2629 04f0 00F021E1 		msr   cpsr_c, r0
 2630              	@ 0 "" 2
 2631 04f4 040000EA 		b	.L32
 2632              	.L35:
 432:../os_core/os_core.c ****                 }
 433:../os_core/os_core.c ****             } else {
 434:../os_core/os_core.c ****                 OS_EXIT_CRITICAL();
 2633              		.loc 1 434 0
 2634              	@ 434 "../os_core/os_core.c" 1
 2635 04f8 04009DE4 		ldmfd sp!, {r0}
 2636              	@ 0 "" 2
 2637              	@ 434 "../os_core/os_core.c" 1
 2638 04fc 00F021E1 		msr   cpsr_c, r0
 2639              	@ 0 "" 2
 2640 0500 010000EA 		b	.L32
 2641              	.L34:
 435:../os_core/os_core.c ****             }
 436:../os_core/os_core.c ****         } else {
 437:../os_core/os_core.c ****             OS_EXIT_CRITICAL();
 2642              		.loc 1 437 0
 2643              	@ 437 "../os_core/os_core.c" 1
 2644 0504 04009DE4 		ldmfd sp!, {r0}
 2645              	@ 0 "" 2
 2646              	@ 437 "../os_core/os_core.c" 1
 2647 0508 00F021E1 		msr   cpsr_c, r0
 2648              	@ 0 "" 2
 2649              	.L32:
 438:../os_core/os_core.c ****         }
 439:../os_core/os_core.c ****     }
 440:../os_core/os_core.c **** }
 2650              		.loc 1 440 0
 2651 050c 0CD04BE2 		sub	sp, fp, #12
 2652 0510 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2653 0514 1EFF2FE1 		bx	lr
 2654              	.L38:
 2655              		.align	2
 2656              	.L37:
 2657 0518 00000000 		.word	OSRunning
 2658 051c 00000000 		.word	OSLockNesting
 2659 0520 00000000 		.word	OSIntNesting
 2660              		.cfi_endproc
 2661              	.LFE6:
 2663              		.align	2
 2664              		.global	OSStart
 2666              	OSStart:
 2667              	.LFB7:
 441:../os_core/os_core.c **** #endif    
 442:../os_core/os_core.c **** 
 443:../os_core/os_core.c **** /*$PAGE*/
 444:../os_core/os_core.c **** /*
 445:../os_core/os_core.c **** ***************************************************************************************************
 446:../os_core/os_core.c **** *                                          START MULTITASKING
 447:../os_core/os_core.c **** *
 448:../os_core/os_core.c **** * Description: This function is used to start the multitasking process which lets uC/OS-II manages 
 449:../os_core/os_core.c **** *              task that you have created.  Before you can call OSStart(), you MUST have called OSI
 450:../os_core/os_core.c **** *              and you MUST have created at least one task.
 451:../os_core/os_core.c **** *
 452:../os_core/os_core.c **** * Arguments  : none
 453:../os_core/os_core.c **** *
 454:../os_core/os_core.c **** * Returns    : none
 455:../os_core/os_core.c **** *
 456:../os_core/os_core.c **** * Note       : OSStartHighRdy() MUST:
 457:../os_core/os_core.c **** *                 a) Call OSTaskSwHook() then,
 458:../os_core/os_core.c **** *                 b) Set OSRunning to TRUE.
 459:../os_core/os_core.c **** *                 c) Load the context of the task pointed to by OSTCBHighRdy.
 460:../os_core/os_core.c **** *                 d_ Execute the task.
 461:../os_core/os_core.c **** ***************************************************************************************************
 462:../os_core/os_core.c **** */
 463:../os_core/os_core.c **** 
 464:../os_core/os_core.c **** void  OSStart (void)
 465:../os_core/os_core.c **** {
 2668              		.loc 1 465 0
 2669              		.cfi_startproc
 2670              		@ Function supports interworking.
 2671              		@ args = 0, pretend = 0, frame = 8
 2672              		@ frame_needed = 1, uses_anonymous_args = 0
 2673 0524 0DC0A0E1 		mov	ip, sp
 2674              	.LCFI14:
 2675              		.cfi_def_cfa_register 12
 2676 0528 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2677 052c 04B04CE2 		sub	fp, ip, #4
 2678              		.cfi_offset 14, -8
 2679              		.cfi_offset 13, -12
 2680              		.cfi_offset 11, -16
 2681              	.LCFI15:
 2682              		.cfi_def_cfa 11, 4
 2683 0530 08D04DE2 		sub	sp, sp, #8
 466:../os_core/os_core.c ****     INT8U y;
 467:../os_core/os_core.c ****     INT8U x;
 468:../os_core/os_core.c **** 
 469:../os_core/os_core.c **** 
 470:../os_core/os_core.c ****     if (OSRunning == FALSE) {
 2684              		.loc 1 470 0
 2685 0534 A0309FE5 		ldr	r3, .L41
 2686 0538 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2687 053c 000053E3 		cmp	r3, #0
 2688 0540 2200001A 		bne	.L39
 471:../os_core/os_core.c ****         y             = OSUnMapTbl[OSRdyGrp];        /* Find highest priority's task priority numbe
 2689              		.loc 1 471 0
 2690 0544 94309FE5 		ldr	r3, .L41+4
 2691 0548 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2692 054c 90209FE5 		ldr	r2, .L41+8
 2693 0550 0330D2E7 		ldrb	r3, [r2, r3]
 2694 0554 0D304BE5 		strb	r3, [fp, #-13]
 472:../os_core/os_core.c ****         x             = OSUnMapTbl[OSRdyTbl[y]];
 2695              		.loc 1 472 0
 2696 0558 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2697 055c 84209FE5 		ldr	r2, .L41+12
 2698 0560 0330D2E7 		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2699 0564 78209FE5 		ldr	r2, .L41+8
 2700 0568 0330D2E7 		ldrb	r3, [r2, r3]
 2701 056c 0E304BE5 		strb	r3, [fp, #-14]
 473:../os_core/os_core.c ****         OSPrioHighRdy = (INT8U)((y << 3) + x);
 2702              		.loc 1 473 0
 2703 0570 0D305BE5 		ldrb	r3, [fp, #-13]
 2704 0574 8331A0E1 		mov	r3, r3, asl #3
 2705 0578 FF2003E2 		and	r2, r3, #255
 2706 057c 0E305BE5 		ldrb	r3, [fp, #-14]
 2707 0580 033082E0 		add	r3, r2, r3
 2708 0584 FF2003E2 		and	r2, r3, #255
 2709 0588 5C309FE5 		ldr	r3, .L41+16
 2710 058c 0020C3E5 		strb	r2, [r3, #0]
 474:../os_core/os_core.c ****         OSPrioCur     = OSPrioHighRdy;
 2711              		.loc 1 474 0
 2712 0590 54309FE5 		ldr	r3, .L41+16
 2713 0594 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2714 0598 50309FE5 		ldr	r3, .L41+20
 2715 059c 0020C3E5 		strb	r2, [r3, #0]
 475:../os_core/os_core.c ****         OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run
 2716              		.loc 1 475 0
 2717 05a0 44309FE5 		ldr	r3, .L41+16
 2718 05a4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2719 05a8 0320A0E1 		mov	r2, r3
 2720 05ac 40309FE5 		ldr	r3, .L41+24
 2721 05b0 022193E7 		ldr	r2, [r3, r2, asl #2]
 2722 05b4 3C309FE5 		ldr	r3, .L41+28
 2723 05b8 002083E5 		str	r2, [r3, #0]
 476:../os_core/os_core.c ****         OSTCBCur      = OSTCBHighRdy;
 2724              		.loc 1 476 0
 2725 05bc 34309FE5 		ldr	r3, .L41+28
 2726 05c0 002093E5 		ldr	r2, [r3, #0]
 2727 05c4 30309FE5 		ldr	r3, .L41+32
 2728 05c8 002083E5 		str	r2, [r3, #0]
 477:../os_core/os_core.c ****         OSStartHighRdy();                            /* Execute target specific code to start task 
 2729              		.loc 1 477 0
 2730 05cc FEFFFFEB 		bl	OSStartHighRdy
 2731              	.L39:
 478:../os_core/os_core.c ****     }
 479:../os_core/os_core.c **** }
 2732              		.loc 1 479 0
 2733 05d0 0CD04BE2 		sub	sp, fp, #12
 2734 05d4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2735 05d8 1EFF2FE1 		bx	lr
 2736              	.L42:
 2737              		.align	2
 2738              	.L41:
 2739 05dc 00000000 		.word	OSRunning
 2740 05e0 00000000 		.word	OSRdyGrp
 2741 05e4 00000000 		.word	OSUnMapTbl
 2742 05e8 00000000 		.word	OSRdyTbl
 2743 05ec 00000000 		.word	OSPrioHighRdy
 2744 05f0 00000000 		.word	OSPrioCur
 2745 05f4 00000000 		.word	OSTCBPrioTbl
 2746 05f8 00000000 		.word	OSTCBHighRdy
 2747 05fc 00000000 		.word	OSTCBCur
 2748              		.cfi_endproc
 2749              	.LFE7:
 2751              		.align	2
 2752              		.global	OSStatInit
 2754              	OSStatInit:
 2755              	.LFB8:
 480:../os_core/os_core.c **** /*$PAGE*/
 481:../os_core/os_core.c **** /*
 482:../os_core/os_core.c **** ***************************************************************************************************
 483:../os_core/os_core.c **** *                                        STATISTICS INITIALIZATION
 484:../os_core/os_core.c **** *
 485:../os_core/os_core.c **** * Description: This function is called by your application to establish CPU usage by first determin
 486:../os_core/os_core.c **** *              how high a 32-bit counter would count to in 1 second if no other tasks were to execu
 487:../os_core/os_core.c **** *              during that time.  CPU usage is then determined by a low priority task which keeps t
 488:../os_core/os_core.c **** *              of this 32-bit counter every second but this time, with other tasks running.  CPU us
 489:../os_core/os_core.c **** *              determined by:
 490:../os_core/os_core.c **** *
 491:../os_core/os_core.c **** *                                             OSIdleCtr
 492:../os_core/os_core.c **** *                 CPU Usage (%) = 100 * (1 - ------------)
 493:../os_core/os_core.c **** *                                            OSIdleCtrMax
 494:../os_core/os_core.c **** *
 495:../os_core/os_core.c **** * Arguments  : none
 496:../os_core/os_core.c **** *
 497:../os_core/os_core.c **** * Returns    : none
 498:../os_core/os_core.c **** ***************************************************************************************************
 499:../os_core/os_core.c **** */
 500:../os_core/os_core.c **** 
 501:../os_core/os_core.c **** #if OS_TASK_STAT_EN > 0
 502:../os_core/os_core.c **** void  OSStatInit (void)
 503:../os_core/os_core.c **** {
 2756              		.loc 1 503 0
 2757              		.cfi_startproc
 2758              		@ Function supports interworking.
 2759              		@ args = 0, pretend = 0, frame = 0
 2760              		@ frame_needed = 1, uses_anonymous_args = 0
 2761 0600 0DC0A0E1 		mov	ip, sp
 2762              	.LCFI16:
 2763              		.cfi_def_cfa_register 12
 2764 0604 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2765 0608 04B04CE2 		sub	fp, ip, #4
 2766              		.cfi_offset 14, -8
 2767              		.cfi_offset 13, -12
 2768              		.cfi_offset 11, -16
 2769              	.LCFI17:
 2770              		.cfi_def_cfa 11, 4
 504:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
 505:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 506:../os_core/os_core.c ****     
 507:../os_core/os_core.c ****     
 508:../os_core/os_core.c **** 
 509:../os_core/os_core.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
 510:../os_core/os_core.c **** #endif    
 511:../os_core/os_core.c ****     OSTimeDly(2);                                /* Synchronize with clock tick                    
 2771              		.loc 1 511 0
 2772 060c 0200A0E3 		mov	r0, #2
 2773 0610 FEFFFFEB 		bl	OSTimeDly
 512:../os_core/os_core.c ****     OS_ENTER_CRITICAL();
 2774              		.loc 1 512 0
 2775              	@ 512 "../os_core/os_core.c" 1
 2776 0614 00000FE1 		mrs   r0, cpsr
 2777              	@ 0 "" 2
 2778              	@ 512 "../os_core/os_core.c" 1
 2779 0618 04002DE5 		stmfd sp!, {r0}
 2780              	@ 0 "" 2
 2781              	@ 512 "../os_core/os_core.c" 1
 2782 061c C00080E3 		orr   r0, r0, #0b11000000
 2783              	@ 0 "" 2
 2784              	@ 512 "../os_core/os_core.c" 1
 2785 0620 00F021E1 		msr   cpsr_c, r0
 2786              	@ 0 "" 2
 513:../os_core/os_core.c ****     OSIdleCtr    = 0L;                           /* Clear idle counter                             
 2787              		.loc 1 513 0
 2788 0624 54309FE5 		ldr	r3, .L44
 2789 0628 0020A0E3 		mov	r2, #0
 2790 062c 002083E5 		str	r2, [r3, #0]
 514:../os_core/os_core.c ****     OS_EXIT_CRITICAL();
 2791              		.loc 1 514 0
 2792              	@ 514 "../os_core/os_core.c" 1
 2793 0630 04009DE4 		ldmfd sp!, {r0}
 2794              	@ 0 "" 2
 2795              	@ 514 "../os_core/os_core.c" 1
 2796 0634 00F021E1 		msr   cpsr_c, r0
 2797              	@ 0 "" 2
 515:../os_core/os_core.c ****     OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 seco
 2798              		.loc 1 515 0
 2799 0638 0A00A0E3 		mov	r0, #10
 2800 063c FEFFFFEB 		bl	OSTimeDly
 516:../os_core/os_core.c ****     OS_ENTER_CRITICAL();
 2801              		.loc 1 516 0
 2802              	@ 516 "../os_core/os_core.c" 1
 2803 0640 00000FE1 		mrs   r0, cpsr
 2804              	@ 0 "" 2
 2805              	@ 516 "../os_core/os_core.c" 1
 2806 0644 04002DE5 		stmfd sp!, {r0}
 2807              	@ 0 "" 2
 2808              	@ 516 "../os_core/os_core.c" 1
 2809 0648 C00080E3 		orr   r0, r0, #0b11000000
 2810              	@ 0 "" 2
 2811              	@ 516 "../os_core/os_core.c" 1
 2812 064c 00F021E1 		msr   cpsr_c, r0
 2813              	@ 0 "" 2
 517:../os_core/os_core.c ****     OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second
 2814              		.loc 1 517 0
 2815 0650 28309FE5 		ldr	r3, .L44
 2816 0654 002093E5 		ldr	r2, [r3, #0]
 2817 0658 24309FE5 		ldr	r3, .L44+4
 2818 065c 002083E5 		str	r2, [r3, #0]
 518:../os_core/os_core.c ****     OSStatRdy    = TRUE;
 2819              		.loc 1 518 0
 2820 0660 20309FE5 		ldr	r3, .L44+8
 2821 0664 0120A0E3 		mov	r2, #1
 2822 0668 0020C3E5 		strb	r2, [r3, #0]
 519:../os_core/os_core.c ****     OS_EXIT_CRITICAL();
 2823              		.loc 1 519 0
 2824              	@ 519 "../os_core/os_core.c" 1
 2825 066c 04009DE4 		ldmfd sp!, {r0}
 2826              	@ 0 "" 2
 2827              	@ 519 "../os_core/os_core.c" 1
 2828 0670 00F021E1 		msr   cpsr_c, r0
 2829              	@ 0 "" 2
 520:../os_core/os_core.c **** }
 2830              		.loc 1 520 0
 2831 0674 0CD04BE2 		sub	sp, fp, #12
 2832 0678 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2833 067c 1EFF2FE1 		bx	lr
 2834              	.L45:
 2835              		.align	2
 2836              	.L44:
 2837 0680 00000000 		.word	OSIdleCtr
 2838 0684 00000000 		.word	OSIdleCtrMax
 2839 0688 00000000 		.word	OSStatRdy
 2840              		.cfi_endproc
 2841              	.LFE8:
 2843              		.align	2
 2844              		.global	OSTimeTick
 2846              	OSTimeTick:
 2847              	.LFB9:
 521:../os_core/os_core.c **** #endif
 522:../os_core/os_core.c **** /*$PAGE*/
 523:../os_core/os_core.c **** /*
 524:../os_core/os_core.c **** ***************************************************************************************************
 525:../os_core/os_core.c **** *                                         PROCESS SYSTEM TICK
 526:../os_core/os_core.c **** *
 527:../os_core/os_core.c **** * Description: This function is used to signal to uC/OS-II the occurrence of a 'system tick' (also 
 528:../os_core/os_core.c **** *              as a 'clock tick').  This function should be called by the ticker ISR but, can also 
 529:../os_core/os_core.c **** *              called by a high priority task.
 530:../os_core/os_core.c **** *
 531:../os_core/os_core.c **** * Arguments  : none
 532:../os_core/os_core.c **** *
 533:../os_core/os_core.c **** * Returns    : none
 534:../os_core/os_core.c **** ***************************************************************************************************
 535:../os_core/os_core.c **** */
 536:../os_core/os_core.c **** 
 537:../os_core/os_core.c **** void  OSTimeTick (void)
 538:../os_core/os_core.c **** {
 2848              		.loc 1 538 0
 2849              		.cfi_startproc
 2850              		@ Function supports interworking.
 2851              		@ args = 0, pretend = 0, frame = 8
 2852              		@ frame_needed = 1, uses_anonymous_args = 0
 2853 068c 0DC0A0E1 		mov	ip, sp
 2854              	.LCFI18:
 2855              		.cfi_def_cfa_register 12
 2856 0690 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2857 0694 04B04CE2 		sub	fp, ip, #4
 2858              		.cfi_offset 14, -8
 2859              		.cfi_offset 13, -12
 2860              		.cfi_offset 11, -16
 2861              	.LCFI19:
 2862              		.cfi_def_cfa 11, 4
 2863 0698 08D04DE2 		sub	sp, sp, #8
 539:../os_core/os_core.c ****     OS_TCB    *ptcb;
 540:../os_core/os_core.c **** #if OS_TICK_STEP_EN > 0
 541:../os_core/os_core.c ****     BOOLEAN    step;
 542:../os_core/os_core.c **** #endif
 543:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status regis
 544:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 545:../os_core/os_core.c **** 
 546:../os_core/os_core.c **** 
 547:../os_core/os_core.c **** 
 548:../os_core/os_core.c ****     cpu_sr = 0;                                            /* Prevent compiler warning             
 549:../os_core/os_core.c **** #endif
 550:../os_core/os_core.c **** #if OS_TIME_TICK_HOOK_EN > 0
 551:../os_core/os_core.c ****     OSTimeTickHook();                                      /* Call user definable hook             
 2864              		.loc 1 551 0
 2865 069c FEFFFFEB 		bl	OSTimeTickHook
 552:../os_core/os_core.c **** #endif
 553:../os_core/os_core.c **** #if OS_TIME_GET_SET_EN > 0
 554:../os_core/os_core.c ****     OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter       
 2866              		.loc 1 554 0
 2867              	@ 554 "../os_core/os_core.c" 1
 2868 06a0 00000FE1 		mrs   r0, cpsr
 2869              	@ 0 "" 2
 2870              	@ 554 "../os_core/os_core.c" 1
 2871 06a4 04002DE5 		stmfd sp!, {r0}
 2872              	@ 0 "" 2
 2873              	@ 554 "../os_core/os_core.c" 1
 2874 06a8 C00080E3 		orr   r0, r0, #0b11000000
 2875              	@ 0 "" 2
 2876              	@ 554 "../os_core/os_core.c" 1
 2877 06ac 00F021E1 		msr   cpsr_c, r0
 2878              	@ 0 "" 2
 555:../os_core/os_core.c ****     OSTime++;
 2879              		.loc 1 555 0
 2880 06b0 D8319FE5 		ldr	r3, .L61
 2881 06b4 003093E5 		ldr	r3, [r3, #0]
 2882 06b8 012083E2 		add	r2, r3, #1
 2883 06bc CC319FE5 		ldr	r3, .L61
 2884 06c0 002083E5 		str	r2, [r3, #0]
 556:../os_core/os_core.c ****     OS_EXIT_CRITICAL();
 2885              		.loc 1 556 0
 2886              	@ 556 "../os_core/os_core.c" 1
 2887 06c4 04009DE4 		ldmfd sp!, {r0}
 2888              	@ 0 "" 2
 2889              	@ 556 "../os_core/os_core.c" 1
 2890 06c8 00F021E1 		msr   cpsr_c, r0
 2891              	@ 0 "" 2
 557:../os_core/os_core.c **** #endif
 558:../os_core/os_core.c ****     if (OSRunning == TRUE) {
 2892              		.loc 1 558 0
 2893 06cc C0319FE5 		ldr	r3, .L61+4
 2894 06d0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2895 06d4 010053E3 		cmp	r3, #1
 2896 06d8 6900001A 		bne	.L46
 559:../os_core/os_core.c **** #if OS_TICK_STEP_EN > 0
 560:../os_core/os_core.c ****         switch (OSTickStepState) {                         /* Determine whether we need to process 
 2897              		.loc 1 560 0
 2898 06dc B4319FE5 		ldr	r3, .L61+8
 2899 06e0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2900 06e4 010053E3 		cmp	r3, #1
 2901 06e8 0600000A 		beq	.L50
 2902 06ec 020053E3 		cmp	r3, #2
 2903 06f0 0700000A 		beq	.L51
 2904 06f4 000053E3 		cmp	r3, #0
 2905 06f8 0B00001A 		bne	.L59
 2906              	.L49:
 561:../os_core/os_core.c ****             case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled            
 562:../os_core/os_core.c ****                  step = TRUE;
 2907              		.loc 1 562 0
 2908 06fc 0130A0E3 		mov	r3, #1
 2909 0700 11304BE5 		strb	r3, [fp, #-17]
 563:../os_core/os_core.c ****                  break;
 2910              		.loc 1 563 0
 2911 0704 0E0000EA 		b	.L52
 2912              	.L50:
 564:../os_core/os_core.c **** 
 565:../os_core/os_core.c ****             case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ..
 566:../os_core/os_core.c ****                  step = FALSE;                             /*      .. OSTickStepState to OS_TICK_ST
 2913              		.loc 1 566 0
 2914 0708 0030A0E3 		mov	r3, #0
 2915 070c 11304BE5 		strb	r3, [fp, #-17]
 567:../os_core/os_core.c ****                  break;
 2916              		.loc 1 567 0
 2917 0710 0B0000EA 		b	.L52
 2918              	.L51:
 568:../os_core/os_core.c **** 
 569:../os_core/os_core.c ****             case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for n
 570:../os_core/os_core.c ****                  step            = TRUE;                   /*      ... step command from uC/OS-View
 2919              		.loc 1 570 0
 2920 0714 0130A0E3 		mov	r3, #1
 2921 0718 11304BE5 		strb	r3, [fp, #-17]
 571:../os_core/os_core.c ****                  OSTickStepState = OS_TICK_STEP_WAIT;
 2922              		.loc 1 571 0
 2923 071c 74319FE5 		ldr	r3, .L61+8
 2924 0720 0120A0E3 		mov	r2, #1
 2925 0724 0020C3E5 		strb	r2, [r3, #0]
 572:../os_core/os_core.c ****                  break;
 2926              		.loc 1 572 0
 2927 0728 050000EA 		b	.L52
 2928              	.L59:
 573:../os_core/os_core.c **** 
 574:../os_core/os_core.c ****             default:                                       /* Invalid case, correct situation      
 575:../os_core/os_core.c ****                  step            = TRUE;
 2929              		.loc 1 575 0
 2930 072c 0130A0E3 		mov	r3, #1
 2931 0730 11304BE5 		strb	r3, [fp, #-17]
 576:../os_core/os_core.c ****                  OSTickStepState = OS_TICK_STEP_DIS;
 2932              		.loc 1 576 0
 2933 0734 5C319FE5 		ldr	r3, .L61+8
 2934 0738 0020A0E3 		mov	r2, #0
 2935 073c 0020C3E5 		strb	r2, [r3, #0]
 577:../os_core/os_core.c ****                  break;
 2936              		.loc 1 577 0
 2937 0740 0000A0E1 		mov	r0, r0	@ nop
 2938              	.L52:
 578:../os_core/os_core.c ****         }
 579:../os_core/os_core.c ****         if (step == FALSE) {                               /* Return if waiting for step command   
 2939              		.loc 1 579 0
 2940 0744 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2941 0748 000053E3 		cmp	r3, #0
 2942 074c 4B00000A 		beq	.L60
 2943              	.L53:
 580:../os_core/os_core.c ****             return;
 581:../os_core/os_core.c ****         }
 582:../os_core/os_core.c **** #endif
 583:../os_core/os_core.c ****         ptcb = OSTCBList;                                  /* Point at first TCB in TCB list       
 2944              		.loc 1 583 0
 2945 0750 44319FE5 		ldr	r3, .L61+12
 2946 0754 003093E5 		ldr	r3, [r3, #0]
 2947 0758 10300BE5 		str	r3, [fp, #-16]
 584:../os_core/os_core.c ****         while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {          /* Go through all TCBs in TCB list      
 2948              		.loc 1 584 0
 2949 075c 420000EA 		b	.L54
 2950              	.L58:
 585:../os_core/os_core.c ****             OS_ENTER_CRITICAL();
 2951              		.loc 1 585 0
 2952              	@ 585 "../os_core/os_core.c" 1
 2953 0760 00000FE1 		mrs   r0, cpsr
 2954              	@ 0 "" 2
 2955              	@ 585 "../os_core/os_core.c" 1
 2956 0764 04002DE5 		stmfd sp!, {r0}
 2957              	@ 0 "" 2
 2958              	@ 585 "../os_core/os_core.c" 1
 2959 0768 C00080E3 		orr   r0, r0, #0b11000000
 2960              	@ 0 "" 2
 2961              	@ 585 "../os_core/os_core.c" 1
 2962 076c 00F021E1 		msr   cpsr_c, r0
 2963              	@ 0 "" 2
 586:../os_core/os_core.c ****             if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with
 2964              		.loc 1 586 0
 2965 0770 10301BE5 		ldr	r3, [fp, #-16]
 2966 0774 BA32D3E1 		ldrh	r3, [r3, #42]
 2967 0778 000053E3 		cmp	r3, #0
 2968 077c 3500000A 		beq	.L55
 587:../os_core/os_core.c ****                 if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of dela
 2969              		.loc 1 587 0
 2970 0780 10301BE5 		ldr	r3, [fp, #-16]
 2971 0784 BA32D3E1 		ldrh	r3, [r3, #42]
 2972 0788 013043E2 		sub	r3, r3, #1
 2973 078c 0338A0E1 		mov	r3, r3, asl #16
 2974 0790 2328A0E1 		mov	r2, r3, lsr #16
 2975 0794 10301BE5 		ldr	r3, [fp, #-16]
 2976 0798 BA22C3E1 		strh	r2, [r3, #42]	@ movhi
 2977 079c 10301BE5 		ldr	r3, [fp, #-16]
 2978 07a0 BA32D3E1 		ldrh	r3, [r3, #42]
 2979 07a4 000053E3 		cmp	r3, #0
 2980 07a8 2A00001A 		bne	.L55
 588:../os_core/os_core.c ****                                                            /* Check for timeout                    
 589:../os_core/os_core.c ****                     if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2981              		.loc 1 589 0
 2982 07ac 10301BE5 		ldr	r3, [fp, #-16]
 2983 07b0 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 2984 07b4 373003E2 		and	r3, r3, #55
 2985 07b8 000053E3 		cmp	r3, #0
 2986 07bc 0900000A 		beq	.L56
 590:../os_core/os_core.c ****                         ptcb->OSTCBStat   &= ~OS_STAT_PEND_ANY;                /* Yes, Clear status
 2987              		.loc 1 590 0
 2988 07c0 10301BE5 		ldr	r3, [fp, #-16]
 2989 07c4 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 2990 07c8 3730C3E3 		bic	r3, r3, #55
 2991 07cc FF2003E2 		and	r2, r3, #255
 2992 07d0 10301BE5 		ldr	r3, [fp, #-16]
 2993 07d4 2C20C3E5 		strb	r2, [r3, #44]
 591:../os_core/os_core.c ****                         ptcb->OSTCBPendTO  = TRUE;                             /* Indicate PEND tim
 2994              		.loc 1 591 0
 2995 07d8 10301BE5 		ldr	r3, [fp, #-16]
 2996 07dc 0120A0E3 		mov	r2, #1
 2997 07e0 2D20C3E5 		strb	r2, [r3, #45]
 2998 07e4 020000EA 		b	.L57
 2999              	.L56:
 592:../os_core/os_core.c ****                     } else {
 593:../os_core/os_core.c ****                         ptcb->OSTCBPendTO  = FALSE;
 3000              		.loc 1 593 0
 3001 07e8 10301BE5 		ldr	r3, [fp, #-16]
 3002 07ec 0020A0E3 		mov	r2, #0
 3003 07f0 2D20C3E5 		strb	r2, [r3, #45]
 3004              	.L57:
 594:../os_core/os_core.c ****                     }
 595:../os_core/os_core.c **** 
 596:../os_core/os_core.c ****                     if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended
 3005              		.loc 1 596 0
 3006 07f4 10301BE5 		ldr	r3, [fp, #-16]
 3007 07f8 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 3008 07fc 083003E2 		and	r3, r3, #8
 3009 0800 000053E3 		cmp	r3, #0
 3010 0804 1300001A 		bne	.L55
 597:../os_core/os_core.c ****                         OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready  
 3011              		.loc 1 597 0
 3012 0808 10301BE5 		ldr	r3, [fp, #-16]
 3013 080c 3220D3E5 		ldrb	r2, [r3, #50]	@ zero_extendqisi2
 3014 0810 88309FE5 		ldr	r3, .L61+16
 3015 0814 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3016 0818 033082E1 		orr	r3, r2, r3
 3017 081c FF2003E2 		and	r2, r3, #255
 3018 0820 78309FE5 		ldr	r3, .L61+16
 3019 0824 0020C3E5 		strb	r2, [r3, #0]
 598:../os_core/os_core.c ****                         OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 3020              		.loc 1 598 0
 3021 0828 10301BE5 		ldr	r3, [fp, #-16]
 3022 082c 3030D3E5 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 3023 0830 10201BE5 		ldr	r2, [fp, #-16]
 3024 0834 3020D2E5 		ldrb	r2, [r2, #48]	@ zero_extendqisi2
 3025 0838 64109FE5 		ldr	r1, .L61+20
 3026 083c 0210D1E7 		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 3027 0840 10201BE5 		ldr	r2, [fp, #-16]
 3028 0844 3120D2E5 		ldrb	r2, [r2, #49]	@ zero_extendqisi2
 3029 0848 022081E1 		orr	r2, r1, r2
 3030 084c FF1002E2 		and	r1, r2, #255
 3031 0850 4C209FE5 		ldr	r2, .L61+20
 3032 0854 0310C2E7 		strb	r1, [r2, r3]
 3033              	.L55:
 599:../os_core/os_core.c ****                     }
 600:../os_core/os_core.c ****                 }
 601:../os_core/os_core.c ****             }
 602:../os_core/os_core.c ****             ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list        
 3034              		.loc 1 602 0
 3035 0858 10301BE5 		ldr	r3, [fp, #-16]
 3036 085c 143093E5 		ldr	r3, [r3, #20]
 3037 0860 10300BE5 		str	r3, [fp, #-16]
 603:../os_core/os_core.c ****             OS_EXIT_CRITICAL();
 3038              		.loc 1 603 0
 3039              	@ 603 "../os_core/os_core.c" 1
 3040 0864 04009DE4 		ldmfd sp!, {r0}
 3041              	@ 0 "" 2
 3042              	@ 603 "../os_core/os_core.c" 1
 3043 0868 00F021E1 		msr   cpsr_c, r0
 3044              	@ 0 "" 2
 3045              	.L54:
 584:../os_core/os_core.c ****         while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {          /* Go through all TCBs in TCB list      
 3046              		.loc 1 584 0 discriminator 1
 3047 086c 10301BE5 		ldr	r3, [fp, #-16]
 3048 0870 2E30D3E5 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 3049 0874 3F0053E3 		cmp	r3, #63
 3050 0878 B8FFFF1A 		bne	.L58
 3051 087c 000000EA 		b	.L46
 3052              	.L60:
 580:../os_core/os_core.c ****             return;
 3053              		.loc 1 580 0
 3054 0880 0000A0E1 		mov	r0, r0	@ nop
 3055              	.L46:
 604:../os_core/os_core.c ****         }
 605:../os_core/os_core.c ****     }
 606:../os_core/os_core.c **** }
 3056              		.loc 1 606 0
 3057 0884 0CD04BE2 		sub	sp, fp, #12
 3058 0888 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3059 088c 1EFF2FE1 		bx	lr
 3060              	.L62:
 3061              		.align	2
 3062              	.L61:
 3063 0890 00000000 		.word	OSTime
 3064 0894 00000000 		.word	OSRunning
 3065 0898 00000000 		.word	OSTickStepState
 3066 089c 00000000 		.word	OSTCBList
 3067 08a0 00000000 		.word	OSRdyGrp
 3068 08a4 00000000 		.word	OSRdyTbl
 3069              		.cfi_endproc
 3070              	.LFE9:
 3072              		.align	2
 3073              		.global	OSVersion
 3075              	OSVersion:
 3076              	.LFB10:
 607:../os_core/os_core.c **** /*$PAGE*/
 608:../os_core/os_core.c **** /*
 609:../os_core/os_core.c **** ***************************************************************************************************
 610:../os_core/os_core.c **** *                                             GET VERSION
 611:../os_core/os_core.c **** *
 612:../os_core/os_core.c **** * Description: This function is used to return the version number of uC/OS-II.  The returned value
 613:../os_core/os_core.c **** *              corresponds to uC/OS-II's version number multiplied by 100.  In other words, version
 614:../os_core/os_core.c **** *              would be returned as 200.
 615:../os_core/os_core.c **** *
 616:../os_core/os_core.c **** * Arguments  : none
 617:../os_core/os_core.c **** *
 618:../os_core/os_core.c **** * Returns    : the version number of uC/OS-II multiplied by 100.
 619:../os_core/os_core.c **** ***************************************************************************************************
 620:../os_core/os_core.c **** */
 621:../os_core/os_core.c **** 
 622:../os_core/os_core.c **** INT16U  OSVersion (void)
 623:../os_core/os_core.c **** {
 3077              		.loc 1 623 0
 3078              		.cfi_startproc
 3079              		@ Function supports interworking.
 3080              		@ args = 0, pretend = 0, frame = 0
 3081              		@ frame_needed = 1, uses_anonymous_args = 0
 3082 08a8 0DC0A0E1 		mov	ip, sp
 3083              	.LCFI20:
 3084              		.cfi_def_cfa_register 12
 3085 08ac 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3086 08b0 04B04CE2 		sub	fp, ip, #4
 3087              		.cfi_offset 14, -8
 3088              		.cfi_offset 13, -12
 3089              		.cfi_offset 11, -16
 3090              	.LCFI21:
 3091              		.cfi_def_cfa 11, 4
 624:../os_core/os_core.c ****     return (OS_VERSION);
 3092              		.loc 1 624 0
 3093 08b4 453FA0E3 		mov	r3, #276
 625:../os_core/os_core.c **** }
 3094              		.loc 1 625 0
 3095 08b8 0300A0E1 		mov	r0, r3
 3096 08bc 0CD04BE2 		sub	sp, fp, #12
 3097 08c0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3098 08c4 1EFF2FE1 		bx	lr
 3099              		.cfi_endproc
 3100              	.LFE10:
 3102              		.align	2
 3103              		.global	OS_Dummy
 3105              	OS_Dummy:
 3106              	.LFB11:
 626:../os_core/os_core.c **** 
 627:../os_core/os_core.c **** /*$PAGE*/
 628:../os_core/os_core.c **** /*
 629:../os_core/os_core.c **** ***************************************************************************************************
 630:../os_core/os_core.c **** *                                            DUMMY FUNCTION
 631:../os_core/os_core.c **** *
 632:../os_core/os_core.c **** * Description: This function doesn't do anything.  It is called by OSTaskDel().
 633:../os_core/os_core.c **** *
 634:../os_core/os_core.c **** * Arguments  : none
 635:../os_core/os_core.c **** *
 636:../os_core/os_core.c **** * Returns    : none
 637:../os_core/os_core.c **** ***************************************************************************************************
 638:../os_core/os_core.c **** */
 639:../os_core/os_core.c **** 
 640:../os_core/os_core.c **** #if OS_TASK_DEL_EN > 0
 641:../os_core/os_core.c **** void  OS_Dummy (void)
 642:../os_core/os_core.c **** {
 3107              		.loc 1 642 0
 3108              		.cfi_startproc
 3109              		@ Function supports interworking.
 3110              		@ args = 0, pretend = 0, frame = 0
 3111              		@ frame_needed = 1, uses_anonymous_args = 0
 3112 08c8 0DC0A0E1 		mov	ip, sp
 3113              	.LCFI22:
 3114              		.cfi_def_cfa_register 12
 3115 08cc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3116 08d0 04B04CE2 		sub	fp, ip, #4
 3117              		.cfi_offset 14, -8
 3118              		.cfi_offset 13, -12
 3119              		.cfi_offset 11, -16
 3120              	.LCFI23:
 3121              		.cfi_def_cfa 11, 4
 643:../os_core/os_core.c **** }
 3122              		.loc 1 643 0
 3123 08d4 0CD04BE2 		sub	sp, fp, #12
 3124 08d8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3125 08dc 1EFF2FE1 		bx	lr
 3126              		.cfi_endproc
 3127              	.LFE11:
 3129              		.align	2
 3130              		.global	OS_EventTaskRdy
 3132              	OS_EventTaskRdy:
 3133              	.LFB12:
 644:../os_core/os_core.c **** #endif
 645:../os_core/os_core.c **** 
 646:../os_core/os_core.c **** /*$PAGE*/
 647:../os_core/os_core.c **** /*
 648:../os_core/os_core.c **** ***************************************************************************************************
 649:../os_core/os_core.c **** *                             MAKE TASK READY TO RUN BASED ON EVENT OCCURING
 650:../os_core/os_core.c **** *
 651:../os_core/os_core.c **** * Description: This function is called by other uC/OS-II services and is used to ready a task that 
 652:../os_core/os_core.c **** *              waiting for an event to occur.
 653:../os_core/os_core.c **** *
 654:../os_core/os_core.c **** * Arguments  : pevent    is a pointer to the event control block corresponding to the event.
 655:../os_core/os_core.c **** *
 656:../os_core/os_core.c **** *              msg       is a pointer to a message.  This pointer is used by message oriented servi
 657:../os_core/os_core.c **** *                        such as MAILBOXEs and QUEUEs.  The pointer is not used when called by othe
 658:../os_core/os_core.c **** *                        service functions.
 659:../os_core/os_core.c **** *
 660:../os_core/os_core.c **** *              msk       is a mask that is used to clear the status byte of the TCB.  For example,
 661:../os_core/os_core.c **** *                        OSSemPost() will pass OS_STAT_SEM, OSMboxPost() will pass OS_STAT_MBOX etc
 662:../os_core/os_core.c **** *
 663:../os_core/os_core.c **** * Returns    : none
 664:../os_core/os_core.c **** *
 665:../os_core/os_core.c **** * Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
 666:../os_core/os_core.c **** ***************************************************************************************************
 667:../os_core/os_core.c **** */
 668:../os_core/os_core.c **** #if OS_EVENT_EN
 669:../os_core/os_core.c **** INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *msg, INT8U msk)
 670:../os_core/os_core.c **** {
 3134              		.loc 1 670 0
 3135              		.cfi_startproc
 3136              		@ Function supports interworking.
 3137              		@ args = 0, pretend = 0, frame = 32
 3138              		@ frame_needed = 1, uses_anonymous_args = 0
 3139 08e0 0DC0A0E1 		mov	ip, sp
 3140              	.LCFI24:
 3141              		.cfi_def_cfa_register 12
 3142 08e4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3143 08e8 04B04CE2 		sub	fp, ip, #4
 3144              		.cfi_offset 14, -8
 3145              		.cfi_offset 13, -12
 3146              		.cfi_offset 11, -16
 3147              	.LCFI25:
 3148              		.cfi_def_cfa 11, 4
 3149 08ec 20D04DE2 		sub	sp, sp, #32
 3150 08f0 20000BE5 		str	r0, [fp, #-32]
 3151 08f4 24100BE5 		str	r1, [fp, #-36]
 3152 08f8 0230A0E1 		mov	r3, r2
 3153 08fc 25304BE5 		strb	r3, [fp, #-37]
 671:../os_core/os_core.c ****     OS_TCB *ptcb;
 672:../os_core/os_core.c ****     INT8U   x;
 673:../os_core/os_core.c ****     INT8U   y;
 674:../os_core/os_core.c ****     INT8U   bitx;
 675:../os_core/os_core.c ****     INT8U   bity;
 676:../os_core/os_core.c ****     INT8U   prio;
 677:../os_core/os_core.c **** 
 678:../os_core/os_core.c **** 
 679:../os_core/os_core.c ****     y                      = OSUnMapTbl[pevent->OSEventGrp];   /* Find HPT waiting for message     
 3154              		.loc 1 679 0
 3155 0900 20301BE5 		ldr	r3, [fp, #-32]
 3156 0904 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3157 0908 C8219FE5 		ldr	r2, .L68
 3158 090c 0330D2E7 		ldrb	r3, [r2, r3]
 3159 0910 0D304BE5 		strb	r3, [fp, #-13]
 680:../os_core/os_core.c ****     bity                   = OSMapTbl[y];
 3160              		.loc 1 680 0
 3161 0914 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3162 0918 BC219FE5 		ldr	r2, .L68+4
 3163 091c 0330D2E7 		ldrb	r3, [r2, r3]
 3164 0920 0E304BE5 		strb	r3, [fp, #-14]
 681:../os_core/os_core.c ****     x                      = OSUnMapTbl[pevent->OSEventTbl[y]];
 3165              		.loc 1 681 0
 3166 0924 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3167 0928 20101BE5 		ldr	r1, [fp, #-32]
 3168 092c 0830A0E3 		mov	r3, #8
 3169 0930 022081E0 		add	r2, r1, r2
 3170 0934 033082E0 		add	r3, r2, r3
 3171 0938 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3172 093c 94219FE5 		ldr	r2, .L68
 3173 0940 0330D2E7 		ldrb	r3, [r2, r3]
 3174 0944 0F304BE5 		strb	r3, [fp, #-15]
 682:../os_core/os_core.c ****     bitx                   = OSMapTbl[x];
 3175              		.loc 1 682 0
 3176 0948 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 3177 094c 88219FE5 		ldr	r2, .L68+4
 3178 0950 0330D2E7 		ldrb	r3, [r2, r3]
 3179 0954 10304BE5 		strb	r3, [fp, #-16]
 683:../os_core/os_core.c ****     prio                   = (INT8U)((y << 3) + x);     /* Find priority of task getting the msg   
 3180              		.loc 1 683 0
 3181 0958 0D305BE5 		ldrb	r3, [fp, #-13]
 3182 095c 8331A0E1 		mov	r3, r3, asl #3
 3183 0960 FF2003E2 		and	r2, r3, #255
 3184 0964 0F305BE5 		ldrb	r3, [fp, #-15]
 3185 0968 033082E0 		add	r3, r2, r3
 3186 096c 11304BE5 		strb	r3, [fp, #-17]
 684:../os_core/os_core.c ****     pevent->OSEventTbl[y] &= ~bitx;                     /* Remove this task from the waiting list  
 3187              		.loc 1 684 0
 3188 0970 0D105BE5 		ldrb	r1, [fp, #-13]	@ zero_extendqisi2
 3189 0974 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3190 0978 20001BE5 		ldr	r0, [fp, #-32]
 3191 097c 0830A0E3 		mov	r3, #8
 3192 0980 022080E0 		add	r2, r0, r2
 3193 0984 033082E0 		add	r3, r2, r3
 3194 0988 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3195 098c FF2003E2 		and	r2, r3, #255
 3196 0990 10305BE5 		ldrb	r3, [fp, #-16]	@ zero_extendqisi2
 3197 0994 0330E0E1 		mvn	r3, r3
 3198 0998 FF3003E2 		and	r3, r3, #255
 3199 099c 033002E0 		and	r3, r2, r3
 3200 09a0 FF3003E2 		and	r3, r3, #255
 3201 09a4 FF2003E2 		and	r2, r3, #255
 3202 09a8 20001BE5 		ldr	r0, [fp, #-32]
 3203 09ac 0830A0E3 		mov	r3, #8
 3204 09b0 011080E0 		add	r1, r0, r1
 3205 09b4 033081E0 		add	r3, r1, r3
 3206 09b8 0020C3E5 		strb	r2, [r3, #0]
 685:../os_core/os_core.c ****     if (pevent->OSEventTbl[y] == 0x00) {                
 3207              		.loc 1 685 0
 3208 09bc 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3209 09c0 20101BE5 		ldr	r1, [fp, #-32]
 3210 09c4 0830A0E3 		mov	r3, #8
 3211 09c8 022081E0 		add	r2, r1, r2
 3212 09cc 033082E0 		add	r3, r2, r3
 3213 09d0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3214 09d4 000053E3 		cmp	r3, #0
 3215 09d8 0A00001A 		bne	.L66
 686:../os_core/os_core.c ****         pevent->OSEventGrp &= ~bity;                    /* Clr group bit if this was only task pend
 3216              		.loc 1 686 0
 3217 09dc 20301BE5 		ldr	r3, [fp, #-32]
 3218 09e0 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3219 09e4 FF2003E2 		and	r2, r3, #255
 3220 09e8 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3221 09ec 0330E0E1 		mvn	r3, r3
 3222 09f0 FF3003E2 		and	r3, r3, #255
 3223 09f4 033002E0 		and	r3, r2, r3
 3224 09f8 FF3003E2 		and	r3, r3, #255
 3225 09fc FF2003E2 		and	r2, r3, #255
 3226 0a00 20301BE5 		ldr	r3, [fp, #-32]
 3227 0a04 0120C3E5 		strb	r2, [r3, #1]
 3228              	.L66:
 687:../os_core/os_core.c ****     }
 688:../os_core/os_core.c ****     ptcb                 =  OSTCBPrioTbl[prio];         /* Point to this task's OS_TCB             
 3229              		.loc 1 688 0
 3230 0a08 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 3231 0a0c CC309FE5 		ldr	r3, .L68+8
 3232 0a10 023193E7 		ldr	r3, [r3, r2, asl #2]
 3233 0a14 18300BE5 		str	r3, [fp, #-24]
 689:../os_core/os_core.c ****     ptcb->OSTCBDly       =  0;                          /* Prevent OSTimeTick() from readying task 
 3234              		.loc 1 689 0
 3235 0a18 18301BE5 		ldr	r3, [fp, #-24]
 3236 0a1c 0020A0E3 		mov	r2, #0
 3237 0a20 BA22C3E1 		strh	r2, [r3, #42]	@ movhi
 690:../os_core/os_core.c ****     ptcb->OSTCBEventPtr  = (OS_EVENT *)0;               /* Unlink ECB from this task               
 3238              		.loc 1 690 0
 3239 0a24 18301BE5 		ldr	r3, [fp, #-24]
 3240 0a28 0020A0E3 		mov	r2, #0
 3241 0a2c 1C2083E5 		str	r2, [r3, #28]
 691:../os_core/os_core.c **** #if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
 692:../os_core/os_core.c ****     ptcb->OSTCBMsg       = msg;                         /* Send message directly to waiting task   
 3242              		.loc 1 692 0
 3243 0a30 18301BE5 		ldr	r3, [fp, #-24]
 3244 0a34 24201BE5 		ldr	r2, [fp, #-36]
 3245 0a38 202083E5 		str	r2, [r3, #32]
 693:../os_core/os_core.c **** #else
 694:../os_core/os_core.c ****     msg                  = msg;                         /* Prevent compiler warning if not used    
 695:../os_core/os_core.c **** #endif
 696:../os_core/os_core.c ****     ptcb->OSTCBPendTO    = FALSE;                       /* Cancel 'any' timeout because of post    
 3246              		.loc 1 696 0
 3247 0a3c 18301BE5 		ldr	r3, [fp, #-24]
 3248 0a40 0020A0E3 		mov	r2, #0
 3249 0a44 2D20C3E5 		strb	r2, [r3, #45]
 697:../os_core/os_core.c ****     ptcb->OSTCBStat     &= ~msk;                        /* Clear bit associated with event type    
 3250              		.loc 1 697 0
 3251 0a48 18301BE5 		ldr	r3, [fp, #-24]
 3252 0a4c 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 3253 0a50 FF2003E2 		and	r2, r3, #255
 3254 0a54 25305BE5 		ldrb	r3, [fp, #-37]	@ zero_extendqisi2
 3255 0a58 0330E0E1 		mvn	r3, r3
 3256 0a5c FF3003E2 		and	r3, r3, #255
 3257 0a60 033002E0 		and	r3, r2, r3
 3258 0a64 FF3003E2 		and	r3, r3, #255
 3259 0a68 FF2003E2 		and	r2, r3, #255
 3260 0a6c 18301BE5 		ldr	r3, [fp, #-24]
 3261 0a70 2C20C3E5 		strb	r2, [r3, #44]
 698:../os_core/os_core.c ****     if (ptcb->OSTCBStat == OS_STAT_RDY) {               /* See if task is ready (could be susp'd)  
 3262              		.loc 1 698 0
 3263 0a74 18301BE5 		ldr	r3, [fp, #-24]
 3264 0a78 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 3265 0a7c 000053E3 		cmp	r3, #0
 3266 0a80 0F00001A 		bne	.L67
 699:../os_core/os_core.c ****         OSRdyGrp        |=  bity;                       /* Put task in the ready to run list       
 3267              		.loc 1 699 0
 3268 0a84 58309FE5 		ldr	r3, .L68+12
 3269 0a88 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3270 0a8c 0E305BE5 		ldrb	r3, [fp, #-14]
 3271 0a90 033082E1 		orr	r3, r2, r3
 3272 0a94 FF2003E2 		and	r2, r3, #255
 3273 0a98 44309FE5 		ldr	r3, .L68+12
 3274 0a9c 0020C3E5 		strb	r2, [r3, #0]
 700:../os_core/os_core.c ****         OSRdyTbl[y]     |=  bitx;
 3275              		.loc 1 700 0
 3276 0aa0 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3277 0aa4 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3278 0aa8 38109FE5 		ldr	r1, .L68+16
 3279 0aac 0210D1E7 		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 3280 0ab0 10205BE5 		ldrb	r2, [fp, #-16]
 3281 0ab4 022081E1 		orr	r2, r1, r2
 3282 0ab8 FF1002E2 		and	r1, r2, #255
 3283 0abc 24209FE5 		ldr	r2, .L68+16
 3284 0ac0 0310C2E7 		strb	r1, [r2, r3]
 3285              	.L67:
 701:../os_core/os_core.c ****     }
 702:../os_core/os_core.c ****     return (prio);
 3286              		.loc 1 702 0
 3287 0ac4 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 703:../os_core/os_core.c **** }
 3288              		.loc 1 703 0
 3289 0ac8 0300A0E1 		mov	r0, r3
 3290 0acc 0CD04BE2 		sub	sp, fp, #12
 3291 0ad0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3292 0ad4 1EFF2FE1 		bx	lr
 3293              	.L69:
 3294              		.align	2
 3295              	.L68:
 3296 0ad8 00000000 		.word	OSUnMapTbl
 3297 0adc 00000000 		.word	OSMapTbl
 3298 0ae0 00000000 		.word	OSTCBPrioTbl
 3299 0ae4 00000000 		.word	OSRdyGrp
 3300 0ae8 00000000 		.word	OSRdyTbl
 3301              		.cfi_endproc
 3302              	.LFE12:
 3304              		.align	2
 3305              		.global	OS_EventTaskWait
 3307              	OS_EventTaskWait:
 3308              	.LFB13:
 704:../os_core/os_core.c **** #endif
 705:../os_core/os_core.c **** /*$PAGE*/
 706:../os_core/os_core.c **** /*
 707:../os_core/os_core.c **** ***************************************************************************************************
 708:../os_core/os_core.c **** *                                   MAKE TASK WAIT FOR EVENT TO OCCUR
 709:../os_core/os_core.c **** *
 710:../os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to suspend a task because an even
 711:../os_core/os_core.c **** *              not occurred.
 712:../os_core/os_core.c **** *
 713:../os_core/os_core.c **** * Arguments  : pevent   is a pointer to the event control block for which the task will be waiting 
 714:../os_core/os_core.c **** *
 715:../os_core/os_core.c **** * Returns    : none
 716:../os_core/os_core.c **** *
 717:../os_core/os_core.c **** * Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
 718:../os_core/os_core.c **** ***************************************************************************************************
 719:../os_core/os_core.c **** */
 720:../os_core/os_core.c **** #if OS_EVENT_EN
 721:../os_core/os_core.c **** void  OS_EventTaskWait (OS_EVENT *pevent)
 722:../os_core/os_core.c **** {
 3309              		.loc 1 722 0
 3310              		.cfi_startproc
 3311              		@ Function supports interworking.
 3312              		@ args = 0, pretend = 0, frame = 16
 3313              		@ frame_needed = 1, uses_anonymous_args = 0
 3314 0aec 0DC0A0E1 		mov	ip, sp
 3315              	.LCFI26:
 3316              		.cfi_def_cfa_register 12
 3317 0af0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3318 0af4 04B04CE2 		sub	fp, ip, #4
 3319              		.cfi_offset 14, -8
 3320              		.cfi_offset 13, -12
 3321              		.cfi_offset 11, -16
 3322              	.LCFI27:
 3323              		.cfi_def_cfa 11, 4
 3324 0af8 10D04DE2 		sub	sp, sp, #16
 3325 0afc 18000BE5 		str	r0, [fp, #-24]
 723:../os_core/os_core.c ****     INT8U  y;
 724:../os_core/os_core.c **** 
 725:../os_core/os_core.c **** 
 726:../os_core/os_core.c ****     OSTCBCur->OSTCBEventPtr = pevent;             /* Store pointer to event control block in TCB   
 3326              		.loc 1 726 0
 3327 0b00 30319FE5 		ldr	r3, .L72
 3328 0b04 003093E5 		ldr	r3, [r3, #0]
 3329 0b08 18201BE5 		ldr	r2, [fp, #-24]
 3330 0b0c 1C2083E5 		str	r2, [r3, #28]
 727:../os_core/os_core.c ****     y                       = OSTCBCur->OSTCBY;   /* Task no longer ready                          
 3331              		.loc 1 727 0
 3332 0b10 20319FE5 		ldr	r3, .L72
 3333 0b14 003093E5 		ldr	r3, [r3, #0]
 3334 0b18 3030D3E5 		ldrb	r3, [r3, #48]
 3335 0b1c 0D304BE5 		strb	r3, [fp, #-13]
 728:../os_core/os_core.c ****     OSRdyTbl[y]            &= ~OSTCBCur->OSTCBBitX;
 3336              		.loc 1 728 0
 3337 0b20 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3338 0b24 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3339 0b28 0C119FE5 		ldr	r1, .L72+4
 3340 0b2c 0220D1E7 		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 3341 0b30 FF1002E2 		and	r1, r2, #255
 3342 0b34 FC209FE5 		ldr	r2, .L72
 3343 0b38 002092E5 		ldr	r2, [r2, #0]
 3344 0b3c 3120D2E5 		ldrb	r2, [r2, #49]	@ zero_extendqisi2
 3345 0b40 FF2002E2 		and	r2, r2, #255
 3346 0b44 0220E0E1 		mvn	r2, r2
 3347 0b48 FF2002E2 		and	r2, r2, #255
 3348 0b4c 022001E0 		and	r2, r1, r2
 3349 0b50 FF2002E2 		and	r2, r2, #255
 3350 0b54 FF1002E2 		and	r1, r2, #255
 3351 0b58 DC209FE5 		ldr	r2, .L72+4
 3352 0b5c 0310C2E7 		strb	r1, [r2, r3]
 729:../os_core/os_core.c ****     if (OSRdyTbl[y] == 0x00) {                   
 3353              		.loc 1 729 0
 3354 0b60 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3355 0b64 D0209FE5 		ldr	r2, .L72+4
 3356 0b68 0330D2E7 		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3357 0b6c 000053E3 		cmp	r3, #0
 3358 0b70 0D00001A 		bne	.L71
 730:../os_core/os_core.c ****         OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pend
 3359              		.loc 1 730 0
 3360 0b74 BC309FE5 		ldr	r3, .L72
 3361 0b78 003093E5 		ldr	r3, [r3, #0]
 3362 0b7c 3230D3E5 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 3363 0b80 FF3003E2 		and	r3, r3, #255
 3364 0b84 0330E0E1 		mvn	r3, r3
 3365 0b88 FF2003E2 		and	r2, r3, #255
 3366 0b8c AC309FE5 		ldr	r3, .L72+8
 3367 0b90 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3368 0b94 FF3003E2 		and	r3, r3, #255
 3369 0b98 033002E0 		and	r3, r2, r3
 3370 0b9c FF3003E2 		and	r3, r3, #255
 3371 0ba0 FF2003E2 		and	r2, r3, #255
 3372 0ba4 94309FE5 		ldr	r3, .L72+8
 3373 0ba8 0020C3E5 		strb	r2, [r3, #0]
 3374              	.L71:
 731:../os_core/os_core.c ****     }
 732:../os_core/os_core.c ****     pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;          /* Put task in waiting li
 3375              		.loc 1 732 0
 3376 0bac 84309FE5 		ldr	r3, .L72
 3377 0bb0 003093E5 		ldr	r3, [r3, #0]
 3378 0bb4 3030D3E5 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 3379 0bb8 0310A0E1 		mov	r1, r3
 3380 0bbc 74309FE5 		ldr	r3, .L72
 3381 0bc0 003093E5 		ldr	r3, [r3, #0]
 3382 0bc4 3030D3E5 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 3383 0bc8 0320A0E1 		mov	r2, r3
 3384 0bcc 18001BE5 		ldr	r0, [fp, #-24]
 3385 0bd0 0830A0E3 		mov	r3, #8
 3386 0bd4 022080E0 		add	r2, r0, r2
 3387 0bd8 033082E0 		add	r3, r2, r3
 3388 0bdc 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3389 0be0 50309FE5 		ldr	r3, .L72
 3390 0be4 003093E5 		ldr	r3, [r3, #0]
 3391 0be8 3130D3E5 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 3392 0bec 033082E1 		orr	r3, r2, r3
 3393 0bf0 FF2003E2 		and	r2, r3, #255
 3394 0bf4 18001BE5 		ldr	r0, [fp, #-24]
 3395 0bf8 0830A0E3 		mov	r3, #8
 3396 0bfc 011080E0 		add	r1, r0, r1
 3397 0c00 033081E0 		add	r3, r1, r3
 3398 0c04 0020C3E5 		strb	r2, [r3, #0]
 733:../os_core/os_core.c ****     pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 3399              		.loc 1 733 0
 3400 0c08 18301BE5 		ldr	r3, [fp, #-24]
 3401 0c0c 0120D3E5 		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 3402 0c10 20309FE5 		ldr	r3, .L72
 3403 0c14 003093E5 		ldr	r3, [r3, #0]
 3404 0c18 3230D3E5 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 3405 0c1c 033082E1 		orr	r3, r2, r3
 3406 0c20 FF2003E2 		and	r2, r3, #255
 3407 0c24 18301BE5 		ldr	r3, [fp, #-24]
 3408 0c28 0120C3E5 		strb	r2, [r3, #1]
 734:../os_core/os_core.c **** }
 3409              		.loc 1 734 0
 3410 0c2c 0CD04BE2 		sub	sp, fp, #12
 3411 0c30 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3412 0c34 1EFF2FE1 		bx	lr
 3413              	.L73:
 3414              		.align	2
 3415              	.L72:
 3416 0c38 00000000 		.word	OSTCBCur
 3417 0c3c 00000000 		.word	OSRdyTbl
 3418 0c40 00000000 		.word	OSRdyGrp
 3419              		.cfi_endproc
 3420              	.LFE13:
 3422              		.align	2
 3423              		.global	OS_EventTO
 3425              	OS_EventTO:
 3426              	.LFB14:
 735:../os_core/os_core.c **** #endif
 736:../os_core/os_core.c **** /*$PAGE*/
 737:../os_core/os_core.c **** /*
 738:../os_core/os_core.c **** ***************************************************************************************************
 739:../os_core/os_core.c **** *                              MAKE TASK READY TO RUN BASED ON EVENT TIMEOUT
 740:../os_core/os_core.c **** *
 741:../os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to make a task ready to run becau
 742:../os_core/os_core.c **** *              timeout occurred.
 743:../os_core/os_core.c **** *
 744:../os_core/os_core.c **** * Arguments  : pevent   is a pointer to the event control block which is readying a task.
 745:../os_core/os_core.c **** *
 746:../os_core/os_core.c **** * Returns    : none
 747:../os_core/os_core.c **** *
 748:../os_core/os_core.c **** * Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
 749:../os_core/os_core.c **** ***************************************************************************************************
 750:../os_core/os_core.c **** */
 751:../os_core/os_core.c **** #if OS_EVENT_EN
 752:../os_core/os_core.c **** void  OS_EventTO (OS_EVENT *pevent)
 753:../os_core/os_core.c **** {
 3427              		.loc 1 753 0
 3428              		.cfi_startproc
 3429              		@ Function supports interworking.
 3430              		@ args = 0, pretend = 0, frame = 16
 3431              		@ frame_needed = 1, uses_anonymous_args = 0
 3432 0c44 0DC0A0E1 		mov	ip, sp
 3433              	.LCFI28:
 3434              		.cfi_def_cfa_register 12
 3435 0c48 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3436 0c4c 04B04CE2 		sub	fp, ip, #4
 3437              		.cfi_offset 14, -8
 3438              		.cfi_offset 13, -12
 3439              		.cfi_offset 11, -16
 3440              	.LCFI29:
 3441              		.cfi_def_cfa 11, 4
 3442 0c50 10D04DE2 		sub	sp, sp, #16
 3443 0c54 18000BE5 		str	r0, [fp, #-24]
 754:../os_core/os_core.c ****     INT8U  y;
 755:../os_core/os_core.c **** 
 756:../os_core/os_core.c **** 
 757:../os_core/os_core.c ****     y                      = OSTCBCur->OSTCBY;
 3444              		.loc 1 757 0
 3445 0c58 F4309FE5 		ldr	r3, .L76
 3446 0c5c 003093E5 		ldr	r3, [r3, #0]
 3447 0c60 3030D3E5 		ldrb	r3, [r3, #48]
 3448 0c64 0D304BE5 		strb	r3, [fp, #-13]
 758:../os_core/os_core.c ****     pevent->OSEventTbl[y] &= ~OSTCBCur->OSTCBBitX;     /* Remove task from wait list               
 3449              		.loc 1 758 0
 3450 0c68 0D105BE5 		ldrb	r1, [fp, #-13]	@ zero_extendqisi2
 3451 0c6c 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3452 0c70 18001BE5 		ldr	r0, [fp, #-24]
 3453 0c74 0830A0E3 		mov	r3, #8
 3454 0c78 022080E0 		add	r2, r0, r2
 3455 0c7c 033082E0 		add	r3, r2, r3
 3456 0c80 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3457 0c84 FF2003E2 		and	r2, r3, #255
 3458 0c88 C4309FE5 		ldr	r3, .L76
 3459 0c8c 003093E5 		ldr	r3, [r3, #0]
 3460 0c90 3130D3E5 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 3461 0c94 FF3003E2 		and	r3, r3, #255
 3462 0c98 0330E0E1 		mvn	r3, r3
 3463 0c9c FF3003E2 		and	r3, r3, #255
 3464 0ca0 033002E0 		and	r3, r2, r3
 3465 0ca4 FF3003E2 		and	r3, r3, #255
 3466 0ca8 FF2003E2 		and	r2, r3, #255
 3467 0cac 18001BE5 		ldr	r0, [fp, #-24]
 3468 0cb0 0830A0E3 		mov	r3, #8
 3469 0cb4 011080E0 		add	r1, r0, r1
 3470 0cb8 033081E0 		add	r3, r1, r3
 3471 0cbc 0020C3E5 		strb	r2, [r3, #0]
 759:../os_core/os_core.c ****     if (pevent->OSEventTbl[y] == 0x00) {
 3472              		.loc 1 759 0
 3473 0cc0 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3474 0cc4 18101BE5 		ldr	r1, [fp, #-24]
 3475 0cc8 0830A0E3 		mov	r3, #8
 3476 0ccc 022081E0 		add	r2, r1, r2
 3477 0cd0 033082E0 		add	r3, r2, r3
 3478 0cd4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3479 0cd8 000053E3 		cmp	r3, #0
 3480 0cdc 0D00001A 		bne	.L75
 760:../os_core/os_core.c ****         pevent->OSEventGrp &= ~OSTCBCur->OSTCBBitY;
 3481              		.loc 1 760 0
 3482 0ce0 18301BE5 		ldr	r3, [fp, #-24]
 3483 0ce4 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3484 0ce8 FF2003E2 		and	r2, r3, #255
 3485 0cec 60309FE5 		ldr	r3, .L76
 3486 0cf0 003093E5 		ldr	r3, [r3, #0]
 3487 0cf4 3230D3E5 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 3488 0cf8 FF3003E2 		and	r3, r3, #255
 3489 0cfc 0330E0E1 		mvn	r3, r3
 3490 0d00 FF3003E2 		and	r3, r3, #255
 3491 0d04 033002E0 		and	r3, r2, r3
 3492 0d08 FF3003E2 		and	r3, r3, #255
 3493 0d0c FF2003E2 		and	r2, r3, #255
 3494 0d10 18301BE5 		ldr	r3, [fp, #-24]
 3495 0d14 0120C3E5 		strb	r2, [r3, #1]
 3496              	.L75:
 761:../os_core/os_core.c ****     }
 762:../os_core/os_core.c ****     OSTCBCur->OSTCBPendTO   = FALSE;                   /* Clear the Pend Timeout flag              
 3497              		.loc 1 762 0
 3498 0d18 34309FE5 		ldr	r3, .L76
 3499 0d1c 003093E5 		ldr	r3, [r3, #0]
 3500 0d20 0020A0E3 		mov	r2, #0
 3501 0d24 2D20C3E5 		strb	r2, [r3, #45]
 763:../os_core/os_core.c ****     OSTCBCur->OSTCBStat     = OS_STAT_RDY;             /* Set status to ready                      
 3502              		.loc 1 763 0
 3503 0d28 24309FE5 		ldr	r3, .L76
 3504 0d2c 003093E5 		ldr	r3, [r3, #0]
 3505 0d30 0020A0E3 		mov	r2, #0
 3506 0d34 2C20C3E5 		strb	r2, [r3, #44]
 764:../os_core/os_core.c ****     OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;           /* No longer waiting for event              
 3507              		.loc 1 764 0
 3508 0d38 14309FE5 		ldr	r3, .L76
 3509 0d3c 003093E5 		ldr	r3, [r3, #0]
 3510 0d40 0020A0E3 		mov	r2, #0
 3511 0d44 1C2083E5 		str	r2, [r3, #28]
 765:../os_core/os_core.c **** }
 3512              		.loc 1 765 0
 3513 0d48 0CD04BE2 		sub	sp, fp, #12
 3514 0d4c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3515 0d50 1EFF2FE1 		bx	lr
 3516              	.L77:
 3517              		.align	2
 3518              	.L76:
 3519 0d54 00000000 		.word	OSTCBCur
 3520              		.cfi_endproc
 3521              	.LFE14:
 3523              		.align	2
 3524              		.global	OS_EventWaitListInit
 3526              	OS_EventWaitListInit:
 3527              	.LFB15:
 766:../os_core/os_core.c **** #endif
 767:../os_core/os_core.c **** /*$PAGE*/
 768:../os_core/os_core.c **** /*
 769:../os_core/os_core.c **** ***************************************************************************************************
 770:../os_core/os_core.c **** *                                 INITIALIZE EVENT CONTROL BLOCK'S WAIT LIST
 771:../os_core/os_core.c **** *
 772:../os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to initialize the event wait list
 773:../os_core/os_core.c **** *
 774:../os_core/os_core.c **** * Arguments  : pevent    is a pointer to the event control block allocated to the event.
 775:../os_core/os_core.c **** *
 776:../os_core/os_core.c **** * Returns    : none
 777:../os_core/os_core.c **** *
 778:../os_core/os_core.c **** * Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
 779:../os_core/os_core.c **** ***************************************************************************************************
 780:../os_core/os_core.c **** */
 781:../os_core/os_core.c **** #if OS_EVENT_EN
 782:../os_core/os_core.c **** void  OS_EventWaitListInit (OS_EVENT *pevent)
 783:../os_core/os_core.c **** {
 3528              		.loc 1 783 0
 3529              		.cfi_startproc
 3530              		@ Function supports interworking.
 3531              		@ args = 0, pretend = 0, frame = 16
 3532              		@ frame_needed = 1, uses_anonymous_args = 0
 3533 0d58 0DC0A0E1 		mov	ip, sp
 3534              	.LCFI30:
 3535              		.cfi_def_cfa_register 12
 3536 0d5c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3537 0d60 04B04CE2 		sub	fp, ip, #4
 3538              		.cfi_offset 14, -8
 3539              		.cfi_offset 13, -12
 3540              		.cfi_offset 11, -16
 3541              	.LCFI31:
 3542              		.cfi_def_cfa 11, 4
 3543 0d64 10D04DE2 		sub	sp, sp, #16
 3544 0d68 18000BE5 		str	r0, [fp, #-24]
 784:../os_core/os_core.c ****     INT8U  *ptbl;
 785:../os_core/os_core.c **** 
 786:../os_core/os_core.c **** 
 787:../os_core/os_core.c ****     pevent->OSEventGrp = 0x00;                   /* No task waiting on event                       
 3545              		.loc 1 787 0
 3546 0d6c 18301BE5 		ldr	r3, [fp, #-24]
 3547 0d70 0020A0E3 		mov	r2, #0
 3548 0d74 0120C3E5 		strb	r2, [r3, #1]
 788:../os_core/os_core.c ****     ptbl               = &pevent->OSEventTbl[0];
 3549              		.loc 1 788 0
 3550 0d78 18301BE5 		ldr	r3, [fp, #-24]
 3551 0d7c 083083E2 		add	r3, r3, #8
 3552 0d80 10300BE5 		str	r3, [fp, #-16]
 789:../os_core/os_core.c **** 
 790:../os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 0
 791:../os_core/os_core.c ****     *ptbl++            = 0x00;
 3553              		.loc 1 791 0
 3554 0d84 10301BE5 		ldr	r3, [fp, #-16]
 3555 0d88 0020A0E3 		mov	r2, #0
 3556 0d8c 0020C3E5 		strb	r2, [r3, #0]
 3557 0d90 10301BE5 		ldr	r3, [fp, #-16]
 3558 0d94 013083E2 		add	r3, r3, #1
 3559 0d98 10300BE5 		str	r3, [fp, #-16]
 792:../os_core/os_core.c **** #endif
 793:../os_core/os_core.c **** 
 794:../os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 1
 795:../os_core/os_core.c ****     *ptbl++            = 0x00;
 3560              		.loc 1 795 0
 3561 0d9c 10301BE5 		ldr	r3, [fp, #-16]
 3562 0da0 0020A0E3 		mov	r2, #0
 3563 0da4 0020C3E5 		strb	r2, [r3, #0]
 3564 0da8 10301BE5 		ldr	r3, [fp, #-16]
 3565 0dac 013083E2 		add	r3, r3, #1
 3566 0db0 10300BE5 		str	r3, [fp, #-16]
 796:../os_core/os_core.c **** #endif
 797:../os_core/os_core.c **** 
 798:../os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 2
 799:../os_core/os_core.c ****     *ptbl++            = 0x00;
 3567              		.loc 1 799 0
 3568 0db4 10301BE5 		ldr	r3, [fp, #-16]
 3569 0db8 0020A0E3 		mov	r2, #0
 3570 0dbc 0020C3E5 		strb	r2, [r3, #0]
 3571 0dc0 10301BE5 		ldr	r3, [fp, #-16]
 3572 0dc4 013083E2 		add	r3, r3, #1
 3573 0dc8 10300BE5 		str	r3, [fp, #-16]
 800:../os_core/os_core.c **** #endif
 801:../os_core/os_core.c **** 
 802:../os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 3
 803:../os_core/os_core.c ****     *ptbl++            = 0x00;
 3574              		.loc 1 803 0
 3575 0dcc 10301BE5 		ldr	r3, [fp, #-16]
 3576 0dd0 0020A0E3 		mov	r2, #0
 3577 0dd4 0020C3E5 		strb	r2, [r3, #0]
 3578 0dd8 10301BE5 		ldr	r3, [fp, #-16]
 3579 0ddc 013083E2 		add	r3, r3, #1
 3580 0de0 10300BE5 		str	r3, [fp, #-16]
 804:../os_core/os_core.c **** #endif
 805:../os_core/os_core.c **** 
 806:../os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 4
 807:../os_core/os_core.c ****     *ptbl++            = 0x00;
 3581              		.loc 1 807 0
 3582 0de4 10301BE5 		ldr	r3, [fp, #-16]
 3583 0de8 0020A0E3 		mov	r2, #0
 3584 0dec 0020C3E5 		strb	r2, [r3, #0]
 3585 0df0 10301BE5 		ldr	r3, [fp, #-16]
 3586 0df4 013083E2 		add	r3, r3, #1
 3587 0df8 10300BE5 		str	r3, [fp, #-16]
 808:../os_core/os_core.c **** #endif
 809:../os_core/os_core.c **** 
 810:../os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 5
 811:../os_core/os_core.c ****     *ptbl++            = 0x00;
 3588              		.loc 1 811 0
 3589 0dfc 10301BE5 		ldr	r3, [fp, #-16]
 3590 0e00 0020A0E3 		mov	r2, #0
 3591 0e04 0020C3E5 		strb	r2, [r3, #0]
 3592 0e08 10301BE5 		ldr	r3, [fp, #-16]
 3593 0e0c 013083E2 		add	r3, r3, #1
 3594 0e10 10300BE5 		str	r3, [fp, #-16]
 812:../os_core/os_core.c **** #endif
 813:../os_core/os_core.c **** 
 814:../os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 6
 815:../os_core/os_core.c ****     *ptbl++            = 0x00;
 3595              		.loc 1 815 0
 3596 0e14 10301BE5 		ldr	r3, [fp, #-16]
 3597 0e18 0020A0E3 		mov	r2, #0
 3598 0e1c 0020C3E5 		strb	r2, [r3, #0]
 3599 0e20 10301BE5 		ldr	r3, [fp, #-16]
 3600 0e24 013083E2 		add	r3, r3, #1
 3601 0e28 10300BE5 		str	r3, [fp, #-16]
 816:../os_core/os_core.c **** #endif
 817:../os_core/os_core.c **** 
 818:../os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 7
 819:../os_core/os_core.c ****     *ptbl              = 0x00;
 3602              		.loc 1 819 0
 3603 0e2c 10301BE5 		ldr	r3, [fp, #-16]
 3604 0e30 0020A0E3 		mov	r2, #0
 3605 0e34 0020C3E5 		strb	r2, [r3, #0]
 820:../os_core/os_core.c **** #endif
 821:../os_core/os_core.c **** }
 3606              		.loc 1 821 0
 3607 0e38 0CD04BE2 		sub	sp, fp, #12
 3608 0e3c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3609 0e40 1EFF2FE1 		bx	lr
 3610              		.cfi_endproc
 3611              	.LFE15:
 3613              		.align	2
 3615              	OS_InitEventList:
 3616              	.LFB16:
 822:../os_core/os_core.c **** #endif
 823:../os_core/os_core.c **** /*$PAGE*/
 824:../os_core/os_core.c **** /*
 825:../os_core/os_core.c **** ***************************************************************************************************
 826:../os_core/os_core.c **** *                                             INITIALIZATION
 827:../os_core/os_core.c **** *                           INITIALIZE THE FREE LIST OF EVENT CONTROL BLOCKS
 828:../os_core/os_core.c **** *
 829:../os_core/os_core.c **** * Description: This function is called by OSInit() to initialize the free list of event control blo
 830:../os_core/os_core.c **** *
 831:../os_core/os_core.c **** * Arguments  : none
 832:../os_core/os_core.c **** *
 833:../os_core/os_core.c **** * Returns    : none
 834:../os_core/os_core.c **** ***************************************************************************************************
 835:../os_core/os_core.c **** */
 836:../os_core/os_core.c **** 
 837:../os_core/os_core.c **** static  void  OS_InitEventList (void)
 838:../os_core/os_core.c **** {
 3617              		.loc 1 838 0
 3618              		.cfi_startproc
 3619              		@ Function supports interworking.
 3620              		@ args = 0, pretend = 0, frame = 16
 3621              		@ frame_needed = 1, uses_anonymous_args = 0
 3622 0e44 0DC0A0E1 		mov	ip, sp
 3623              	.LCFI32:
 3624              		.cfi_def_cfa_register 12
 3625 0e48 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3626 0e4c 04B04CE2 		sub	fp, ip, #4
 3627              		.cfi_offset 14, -8
 3628              		.cfi_offset 13, -12
 3629              		.cfi_offset 11, -16
 3630              	.LCFI33:
 3631              		.cfi_def_cfa 11, 4
 3632 0e50 10D04DE2 		sub	sp, sp, #16
 839:../os_core/os_core.c **** #if OS_EVENT_EN && (OS_MAX_EVENTS > 0)
 840:../os_core/os_core.c **** #if (OS_MAX_EVENTS > 1)
 841:../os_core/os_core.c ****     INT16U     i;
 842:../os_core/os_core.c ****     OS_EVENT  *pevent1;
 843:../os_core/os_core.c ****     OS_EVENT  *pevent2;
 844:../os_core/os_core.c **** 
 845:../os_core/os_core.c **** 
 846:../os_core/os_core.c ****     OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table               
 3633              		.loc 1 846 0
 3634 0e54 CC309FE5 		ldr	r3, .L82
 3635 0e58 0300A0E1 		mov	r0, r3
 3636 0e5c 1E1EA0E3 		mov	r1, #480
 3637 0e60 FEFFFFEB 		bl	OS_MemClr
 847:../os_core/os_core.c ****     pevent1 = &OSEventTbl[0];
 3638              		.loc 1 847 0
 3639 0e64 BC309FE5 		ldr	r3, .L82
 3640 0e68 14300BE5 		str	r3, [fp, #-20]
 848:../os_core/os_core.c ****     pevent2 = &OSEventTbl[1];
 3641              		.loc 1 848 0
 3642 0e6c B8309FE5 		ldr	r3, .L82+4
 3643 0e70 18300BE5 		str	r3, [fp, #-24]
 849:../os_core/os_core.c ****     for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blo
 3644              		.loc 1 849 0
 3645 0e74 0030A0E3 		mov	r3, #0
 3646 0e78 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3647 0e7c 140000EA 		b	.L80
 3648              	.L81:
 850:../os_core/os_core.c ****         pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 3649              		.loc 1 850 0 discriminator 2
 3650 0e80 14301BE5 		ldr	r3, [fp, #-20]
 3651 0e84 0020A0E3 		mov	r2, #0
 3652 0e88 0020C3E5 		strb	r2, [r3, #0]
 851:../os_core/os_core.c ****         pevent1->OSEventPtr     = pevent2;
 3653              		.loc 1 851 0 discriminator 2
 3654 0e8c 14301BE5 		ldr	r3, [fp, #-20]
 3655 0e90 18201BE5 		ldr	r2, [fp, #-24]
 3656 0e94 042083E5 		str	r2, [r3, #4]
 852:../os_core/os_core.c **** #if OS_EVENT_NAME_SIZE > 1
 853:../os_core/os_core.c ****         pevent1->OSEventName[0] = '?';                      /* Unknown name                        
 3657              		.loc 1 853 0 discriminator 2
 3658 0e98 14301BE5 		ldr	r3, [fp, #-20]
 3659 0e9c 3F20A0E3 		mov	r2, #63
 3660 0ea0 1020C3E5 		strb	r2, [r3, #16]
 854:../os_core/os_core.c ****         pevent1->OSEventName[1] = OS_ASCII_NUL;
 3661              		.loc 1 854 0 discriminator 2
 3662 0ea4 14301BE5 		ldr	r3, [fp, #-20]
 3663 0ea8 0020A0E3 		mov	r2, #0
 3664 0eac 1120C3E5 		strb	r2, [r3, #17]
 855:../os_core/os_core.c **** #endif
 856:../os_core/os_core.c ****         pevent1++;
 3665              		.loc 1 856 0 discriminator 2
 3666 0eb0 14301BE5 		ldr	r3, [fp, #-20]
 3667 0eb4 303083E2 		add	r3, r3, #48
 3668 0eb8 14300BE5 		str	r3, [fp, #-20]
 857:../os_core/os_core.c ****         pevent2++;
 3669              		.loc 1 857 0 discriminator 2
 3670 0ebc 18301BE5 		ldr	r3, [fp, #-24]
 3671 0ec0 303083E2 		add	r3, r3, #48
 3672 0ec4 18300BE5 		str	r3, [fp, #-24]
 849:../os_core/os_core.c ****     for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blo
 3673              		.loc 1 849 0 discriminator 2
 3674 0ec8 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 3675 0ecc 013083E2 		add	r3, r3, #1
 3676 0ed0 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3677              	.L80:
 849:../os_core/os_core.c ****     for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blo
 3678              		.loc 1 849 0 is_stmt 0 discriminator 1
 3679 0ed4 BE305BE1 		ldrh	r3, [fp, #-14]
 3680 0ed8 080053E3 		cmp	r3, #8
 3681 0edc E7FFFF9A 		bls	.L81
 858:../os_core/os_core.c ****     }
 859:../os_core/os_core.c ****     pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 3682              		.loc 1 859 0 is_stmt 1
 3683 0ee0 14301BE5 		ldr	r3, [fp, #-20]
 3684 0ee4 0020A0E3 		mov	r2, #0
 3685 0ee8 0020C3E5 		strb	r2, [r3, #0]
 860:../os_core/os_core.c ****     pevent1->OSEventPtr             = (OS_EVENT *)0;
 3686              		.loc 1 860 0
 3687 0eec 14301BE5 		ldr	r3, [fp, #-20]
 3688 0ef0 0020A0E3 		mov	r2, #0
 3689 0ef4 042083E5 		str	r2, [r3, #4]
 861:../os_core/os_core.c **** #if OS_EVENT_NAME_SIZE > 1
 862:../os_core/os_core.c ****     pevent1->OSEventName[0]         = '?';                  
 3690              		.loc 1 862 0
 3691 0ef8 14301BE5 		ldr	r3, [fp, #-20]
 3692 0efc 3F20A0E3 		mov	r2, #63
 3693 0f00 1020C3E5 		strb	r2, [r3, #16]
 863:../os_core/os_core.c ****     pevent1->OSEventName[1]         = OS_ASCII_NUL;
 3694              		.loc 1 863 0
 3695 0f04 14301BE5 		ldr	r3, [fp, #-20]
 3696 0f08 0020A0E3 		mov	r2, #0
 3697 0f0c 1120C3E5 		strb	r2, [r3, #17]
 864:../os_core/os_core.c **** #endif
 865:../os_core/os_core.c ****     OSEventFreeList                 = &OSEventTbl[0];
 3698              		.loc 1 865 0
 3699 0f10 18309FE5 		ldr	r3, .L82+8
 3700 0f14 0C209FE5 		ldr	r2, .L82
 3701 0f18 002083E5 		str	r2, [r3, #0]
 866:../os_core/os_core.c **** #else
 867:../os_core/os_core.c ****     OSEventFreeList                 = &OSEventTbl[0];       /* Only have ONE event control block   
 868:../os_core/os_core.c ****     OSEventFreeList->OSEventType    = OS_EVENT_TYPE_UNUSED;
 869:../os_core/os_core.c ****     OSEventFreeList->OSEventPtr     = (OS_EVENT *)0;
 870:../os_core/os_core.c **** #if OS_EVENT_NAME_SIZE > 1
 871:../os_core/os_core.c ****     OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                        
 872:../os_core/os_core.c ****     OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
 873:../os_core/os_core.c **** #endif
 874:../os_core/os_core.c **** #endif
 875:../os_core/os_core.c **** #endif
 876:../os_core/os_core.c **** }
 3702              		.loc 1 876 0
 3703 0f1c 0CD04BE2 		sub	sp, fp, #12
 3704 0f20 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3705 0f24 1EFF2FE1 		bx	lr
 3706              	.L83:
 3707              		.align	2
 3708              	.L82:
 3709 0f28 00000000 		.word	OSEventTbl
 3710 0f2c 30000000 		.word	OSEventTbl+48
 3711 0f30 00000000 		.word	OSEventFreeList
 3712              		.cfi_endproc
 3713              	.LFE16:
 3715              		.align	2
 3717              	OS_InitMisc:
 3718              	.LFB17:
 877:../os_core/os_core.c **** /*$PAGE*/
 878:../os_core/os_core.c **** /*
 879:../os_core/os_core.c **** ***************************************************************************************************
 880:../os_core/os_core.c **** *                                             INITIALIZATION
 881:../os_core/os_core.c **** *                                    INITIALIZE MISCELLANEOUS VARIABLES
 882:../os_core/os_core.c **** *
 883:../os_core/os_core.c **** * Description: This function is called by OSInit() to initialize miscellaneous variables.
 884:../os_core/os_core.c **** *
 885:../os_core/os_core.c **** * Arguments  : none
 886:../os_core/os_core.c **** *
 887:../os_core/os_core.c **** * Returns    : none
 888:../os_core/os_core.c **** ***************************************************************************************************
 889:../os_core/os_core.c **** */
 890:../os_core/os_core.c **** 
 891:../os_core/os_core.c **** static  void  OS_InitMisc (void)
 892:../os_core/os_core.c **** {
 3719              		.loc 1 892 0
 3720              		.cfi_startproc
 3721              		@ Function supports interworking.
 3722              		@ args = 0, pretend = 0, frame = 0
 3723              		@ frame_needed = 1, uses_anonymous_args = 0
 3724 0f34 0DC0A0E1 		mov	ip, sp
 3725              	.LCFI34:
 3726              		.cfi_def_cfa_register 12
 3727 0f38 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3728 0f3c 04B04CE2 		sub	fp, ip, #4
 3729              		.cfi_offset 14, -8
 3730              		.cfi_offset 13, -12
 3731              		.cfi_offset 11, -16
 3732              	.LCFI35:
 3733              		.cfi_def_cfa 11, 4
 893:../os_core/os_core.c **** #if OS_TIME_GET_SET_EN > 0   
 894:../os_core/os_core.c ****     OSTime        = 0L;                                    /* Clear the 32-bit system clock        
 3734              		.loc 1 894 0
 3735 0f40 7C309FE5 		ldr	r3, .L85
 3736 0f44 0020A0E3 		mov	r2, #0
 3737 0f48 002083E5 		str	r2, [r3, #0]
 895:../os_core/os_core.c **** #endif
 896:../os_core/os_core.c **** 
 897:../os_core/os_core.c ****     OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter  
 3738              		.loc 1 897 0
 3739 0f4c 74309FE5 		ldr	r3, .L85+4
 3740 0f50 0020A0E3 		mov	r2, #0
 3741 0f54 0020C3E5 		strb	r2, [r3, #0]
 898:../os_core/os_core.c ****     OSLockNesting = 0;                                     /* Clear the scheduling lock counter    
 3742              		.loc 1 898 0
 3743 0f58 6C309FE5 		ldr	r3, .L85+8
 3744 0f5c 0020A0E3 		mov	r2, #0
 3745 0f60 0020C3E5 		strb	r2, [r3, #0]
 899:../os_core/os_core.c **** 
 900:../os_core/os_core.c ****     OSTaskCtr     = 0;                                     /* Clear the number of tasks            
 3746              		.loc 1 900 0
 3747 0f64 64309FE5 		ldr	r3, .L85+12
 3748 0f68 0020A0E3 		mov	r2, #0
 3749 0f6c 0020C3E5 		strb	r2, [r3, #0]
 901:../os_core/os_core.c **** 
 902:../os_core/os_core.c ****     OSRunning     = FALSE;                                 /* Indicate that multitasking not starte
 3750              		.loc 1 902 0
 3751 0f70 5C309FE5 		ldr	r3, .L85+16
 3752 0f74 0020A0E3 		mov	r2, #0
 3753 0f78 0020C3E5 		strb	r2, [r3, #0]
 903:../os_core/os_core.c ****     
 904:../os_core/os_core.c ****     OSCtxSwCtr    = 0;                                     /* Clear the context switch counter     
 3754              		.loc 1 904 0
 3755 0f7c 54309FE5 		ldr	r3, .L85+20
 3756 0f80 0020A0E3 		mov	r2, #0
 3757 0f84 002083E5 		str	r2, [r3, #0]
 905:../os_core/os_core.c ****     OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter        
 3758              		.loc 1 905 0
 3759 0f88 4C309FE5 		ldr	r3, .L85+24
 3760 0f8c 0020A0E3 		mov	r2, #0
 3761 0f90 002083E5 		str	r2, [r3, #0]
 906:../os_core/os_core.c **** 
 907:../os_core/os_core.c **** #if OS_TASK_STAT_EN > 0
 908:../os_core/os_core.c ****     OSIdleCtrRun  = 0L;
 3762              		.loc 1 908 0
 3763 0f94 44309FE5 		ldr	r3, .L85+28
 3764 0f98 0020A0E3 		mov	r2, #0
 3765 0f9c 002083E5 		str	r2, [r3, #0]
 909:../os_core/os_core.c ****     OSIdleCtrMax  = 0L;
 3766              		.loc 1 909 0
 3767 0fa0 3C309FE5 		ldr	r3, .L85+32
 3768 0fa4 0020A0E3 		mov	r2, #0
 3769 0fa8 002083E5 		str	r2, [r3, #0]
 910:../os_core/os_core.c ****     OSStatRdy     = FALSE;                                 /* Statistic task is not ready          
 3770              		.loc 1 910 0
 3771 0fac 34309FE5 		ldr	r3, .L85+36
 3772 0fb0 0020A0E3 		mov	r2, #0
 3773 0fb4 0020C3E5 		strb	r2, [r3, #0]
 911:../os_core/os_core.c **** #endif
 912:../os_core/os_core.c **** }
 3774              		.loc 1 912 0
 3775 0fb8 0CD04BE2 		sub	sp, fp, #12
 3776 0fbc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3777 0fc0 1EFF2FE1 		bx	lr
 3778              	.L86:
 3779              		.align	2
 3780              	.L85:
 3781 0fc4 00000000 		.word	OSTime
 3782 0fc8 00000000 		.word	OSIntNesting
 3783 0fcc 00000000 		.word	OSLockNesting
 3784 0fd0 00000000 		.word	OSTaskCtr
 3785 0fd4 00000000 		.word	OSRunning
 3786 0fd8 00000000 		.word	OSCtxSwCtr
 3787 0fdc 00000000 		.word	OSIdleCtr
 3788 0fe0 00000000 		.word	OSIdleCtrRun
 3789 0fe4 00000000 		.word	OSIdleCtrMax
 3790 0fe8 00000000 		.word	OSStatRdy
 3791              		.cfi_endproc
 3792              	.LFE17:
 3794              		.align	2
 3796              	OS_InitRdyList:
 3797              	.LFB18:
 913:../os_core/os_core.c **** /*$PAGE*/
 914:../os_core/os_core.c **** /*
 915:../os_core/os_core.c **** ***************************************************************************************************
 916:../os_core/os_core.c **** *                                             INITIALIZATION
 917:../os_core/os_core.c **** *                                       INITIALIZE THE READY LIST
 918:../os_core/os_core.c **** *
 919:../os_core/os_core.c **** * Description: This function is called by OSInit() to initialize the Ready List.
 920:../os_core/os_core.c **** *
 921:../os_core/os_core.c **** * Arguments  : none
 922:../os_core/os_core.c **** *
 923:../os_core/os_core.c **** * Returns    : none
 924:../os_core/os_core.c **** ***************************************************************************************************
 925:../os_core/os_core.c **** */
 926:../os_core/os_core.c **** 
 927:../os_core/os_core.c **** static  void  OS_InitRdyList (void)
 928:../os_core/os_core.c **** {
 3798              		.loc 1 928 0
 3799              		.cfi_startproc
 3800              		@ Function supports interworking.
 3801              		@ args = 0, pretend = 0, frame = 8
 3802              		@ frame_needed = 1, uses_anonymous_args = 0
 3803 0fec 0DC0A0E1 		mov	ip, sp
 3804              	.LCFI36:
 3805              		.cfi_def_cfa_register 12
 3806 0ff0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3807 0ff4 04B04CE2 		sub	fp, ip, #4
 3808              		.cfi_offset 14, -8
 3809              		.cfi_offset 13, -12
 3810              		.cfi_offset 11, -16
 3811              	.LCFI37:
 3812              		.cfi_def_cfa 11, 4
 3813 0ff8 08D04DE2 		sub	sp, sp, #8
 929:../os_core/os_core.c ****     INT8U    i;
 930:../os_core/os_core.c ****     INT8U   *prdytbl;
 931:../os_core/os_core.c **** 
 932:../os_core/os_core.c **** 
 933:../os_core/os_core.c ****     OSRdyGrp      = 0x00;                                  /* Clear the ready list                 
 3814              		.loc 1 933 0
 3815 0ffc 84309FE5 		ldr	r3, .L90
 3816 1000 0020A0E3 		mov	r2, #0
 3817 1004 0020C3E5 		strb	r2, [r3, #0]
 934:../os_core/os_core.c ****     prdytbl       = &OSRdyTbl[0];
 3818              		.loc 1 934 0
 3819 1008 7C309FE5 		ldr	r3, .L90+4
 3820 100c 14300BE5 		str	r3, [fp, #-20]
 935:../os_core/os_core.c ****     for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 3821              		.loc 1 935 0
 3822 1010 0030A0E3 		mov	r3, #0
 3823 1014 0D304BE5 		strb	r3, [fp, #-13]
 3824 1018 080000EA 		b	.L88
 3825              	.L89:
 936:../os_core/os_core.c ****         *prdytbl++ = 0x00;
 3826              		.loc 1 936 0 discriminator 2
 3827 101c 14301BE5 		ldr	r3, [fp, #-20]
 3828 1020 0020A0E3 		mov	r2, #0
 3829 1024 0020C3E5 		strb	r2, [r3, #0]
 3830 1028 14301BE5 		ldr	r3, [fp, #-20]
 3831 102c 013083E2 		add	r3, r3, #1
 3832 1030 14300BE5 		str	r3, [fp, #-20]
 935:../os_core/os_core.c ****     for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 3833              		.loc 1 935 0 discriminator 2
 3834 1034 0D305BE5 		ldrb	r3, [fp, #-13]
 3835 1038 013083E2 		add	r3, r3, #1
 3836 103c 0D304BE5 		strb	r3, [fp, #-13]
 3837              	.L88:
 935:../os_core/os_core.c ****     for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 3838              		.loc 1 935 0 is_stmt 0 discriminator 1
 3839 1040 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3840 1044 070053E3 		cmp	r3, #7
 3841 1048 F3FFFF9A 		bls	.L89
 937:../os_core/os_core.c ****     }
 938:../os_core/os_core.c **** 
 939:../os_core/os_core.c ****     OSPrioCur     = 0;
 3842              		.loc 1 939 0 is_stmt 1
 3843 104c 3C309FE5 		ldr	r3, .L90+8
 3844 1050 0020A0E3 		mov	r2, #0
 3845 1054 0020C3E5 		strb	r2, [r3, #0]
 940:../os_core/os_core.c ****     OSPrioHighRdy = 0;
 3846              		.loc 1 940 0
 3847 1058 34309FE5 		ldr	r3, .L90+12
 3848 105c 0020A0E3 		mov	r2, #0
 3849 1060 0020C3E5 		strb	r2, [r3, #0]
 941:../os_core/os_core.c **** 
 942:../os_core/os_core.c ****     OSTCBHighRdy  = (OS_TCB *)0;                                 
 3850              		.loc 1 942 0
 3851 1064 2C309FE5 		ldr	r3, .L90+16
 3852 1068 0020A0E3 		mov	r2, #0
 3853 106c 002083E5 		str	r2, [r3, #0]
 943:../os_core/os_core.c ****     OSTCBCur      = (OS_TCB *)0;
 3854              		.loc 1 943 0
 3855 1070 24309FE5 		ldr	r3, .L90+20
 3856 1074 0020A0E3 		mov	r2, #0
 3857 1078 002083E5 		str	r2, [r3, #0]
 944:../os_core/os_core.c **** }
 3858              		.loc 1 944 0
 3859 107c 0CD04BE2 		sub	sp, fp, #12
 3860 1080 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3861 1084 1EFF2FE1 		bx	lr
 3862              	.L91:
 3863              		.align	2
 3864              	.L90:
 3865 1088 00000000 		.word	OSRdyGrp
 3866 108c 00000000 		.word	OSRdyTbl
 3867 1090 00000000 		.word	OSPrioCur
 3868 1094 00000000 		.word	OSPrioHighRdy
 3869 1098 00000000 		.word	OSTCBHighRdy
 3870 109c 00000000 		.word	OSTCBCur
 3871              		.cfi_endproc
 3872              	.LFE18:
 3874              		.align	2
 3876              	OS_InitTaskIdle:
 3877              	.LFB19:
 945:../os_core/os_core.c **** 
 946:../os_core/os_core.c **** /*$PAGE*/
 947:../os_core/os_core.c **** /*
 948:../os_core/os_core.c **** ***************************************************************************************************
 949:../os_core/os_core.c **** *                                             INITIALIZATION
 950:../os_core/os_core.c **** *                                         CREATING THE IDLE TASK
 951:../os_core/os_core.c **** *
 952:../os_core/os_core.c **** * Description: This function creates the Idle Task.
 953:../os_core/os_core.c **** *
 954:../os_core/os_core.c **** * Arguments  : none
 955:../os_core/os_core.c **** *
 956:../os_core/os_core.c **** * Returns    : none
 957:../os_core/os_core.c **** ***************************************************************************************************
 958:../os_core/os_core.c **** */
 959:../os_core/os_core.c **** 
 960:../os_core/os_core.c **** static  void  OS_InitTaskIdle (void)
 961:../os_core/os_core.c **** {
 3878              		.loc 1 961 0
 3879              		.cfi_startproc
 3880              		@ Function supports interworking.
 3881              		@ args = 0, pretend = 0, frame = 0
 3882              		@ frame_needed = 1, uses_anonymous_args = 0
 3883 10a0 0DC0A0E1 		mov	ip, sp
 3884              	.LCFI38:
 3885              		.cfi_def_cfa_register 12
 3886 10a4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3887 10a8 04B04CE2 		sub	fp, ip, #4
 3888              		.cfi_offset 14, -8
 3889              		.cfi_offset 13, -12
 3890              		.cfi_offset 11, -16
 3891              	.LCFI39:
 3892              		.cfi_def_cfa 11, 4
 3893 10ac 18D04DE2 		sub	sp, sp, #24
 962:../os_core/os_core.c **** #if OS_TASK_CREATE_EXT_EN > 0
 963:../os_core/os_core.c ****     #if OS_STK_GROWTH == 1
 964:../os_core/os_core.c ****     (void)OSTaskCreateExt(OS_TaskIdle,
 3894              		.loc 1 964 0
 3895 10b0 40309FE5 		ldr	r3, .L93
 3896 10b4 00308DE5 		str	r3, [sp, #0]
 3897 10b8 3C309FE5 		ldr	r3, .L93+4
 3898 10bc 04308DE5 		str	r3, [sp, #4]
 3899 10c0 023CA0E3 		mov	r3, #512
 3900 10c4 08308DE5 		str	r3, [sp, #8]
 3901 10c8 0030A0E3 		mov	r3, #0
 3902 10cc 0C308DE5 		str	r3, [sp, #12]
 3903 10d0 0330A0E3 		mov	r3, #3
 3904 10d4 10308DE5 		str	r3, [sp, #16]
 3905 10d8 20009FE5 		ldr	r0, .L93+8
 3906 10dc 0010A0E3 		mov	r1, #0
 3907 10e0 1C209FE5 		ldr	r2, .L93+12
 3908 10e4 3F30A0E3 		mov	r3, #63
 3909 10e8 FEFFFFEB 		bl	OSTaskCreateExt
 965:../os_core/os_core.c ****                           (void *)0,                                 /* No arguments passed to OS_T
 966:../os_core/os_core.c ****                           &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1], /* Set Top-Of-Stack           
 967:../os_core/os_core.c ****                           OS_IDLE_PRIO,                              /* Lowest priority level      
 968:../os_core/os_core.c ****                           OS_TASK_IDLE_ID,
 969:../os_core/os_core.c ****                           &OSTaskIdleStk[0],                         /* Set Bottom-Of-Stack        
 970:../os_core/os_core.c ****                           OS_TASK_IDLE_STK_SIZE,
 971:../os_core/os_core.c ****                           (void *)0,                                 /* No TCB extension           
 972:../os_core/os_core.c ****                           OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + cle
 973:../os_core/os_core.c ****     #else
 974:../os_core/os_core.c ****     (void)OSTaskCreateExt(OS_TaskIdle,
 975:../os_core/os_core.c ****                           (void *)0,                                 /* No arguments passed to OS_T
 976:../os_core/os_core.c ****                           &OSTaskIdleStk[0],                         /* Set Top-Of-Stack           
 977:../os_core/os_core.c ****                           OS_IDLE_PRIO,                              /* Lowest priority level      
 978:../os_core/os_core.c ****                           OS_TASK_IDLE_ID,
 979:../os_core/os_core.c ****                           &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1], /* Set Bottom-Of-Stack        
 980:../os_core/os_core.c ****                           OS_TASK_IDLE_STK_SIZE,
 981:../os_core/os_core.c ****                           (void *)0,                                 /* No TCB extension           
 982:../os_core/os_core.c ****                           OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + cle
 983:../os_core/os_core.c ****     #endif
 984:../os_core/os_core.c **** #else
 985:../os_core/os_core.c ****     #if OS_STK_GROWTH == 1
 986:../os_core/os_core.c ****     (void)OSTaskCreate(OS_TaskIdle,
 987:../os_core/os_core.c ****                        (void *)0,
 988:../os_core/os_core.c ****                        &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1],
 989:../os_core/os_core.c ****                        OS_IDLE_PRIO);
 990:../os_core/os_core.c ****     #else
 991:../os_core/os_core.c ****     (void)OSTaskCreate(OS_TaskIdle,
 992:../os_core/os_core.c ****                        (void *)0,
 993:../os_core/os_core.c ****                        &OSTaskIdleStk[0],
 994:../os_core/os_core.c ****                        OS_IDLE_PRIO);
 995:../os_core/os_core.c ****     #endif
 996:../os_core/os_core.c **** #endif
 997:../os_core/os_core.c **** }
 3910              		.loc 1 997 0
 3911 10ec 0CD04BE2 		sub	sp, fp, #12
 3912 10f0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3913 10f4 1EFF2FE1 		bx	lr
 3914              	.L94:
 3915              		.align	2
 3916              	.L93:
 3917 10f8 FFFF0000 		.word	65535
 3918 10fc 00000000 		.word	OSTaskIdleStk
 3919 1100 00000000 		.word	OS_TaskIdle
 3920 1104 FC070000 		.word	OSTaskIdleStk+2044
 3921              		.cfi_endproc
 3922              	.LFE19:
 3924              		.align	2
 3926              	OS_InitTaskStat:
 3927              	.LFB20:
 998:../os_core/os_core.c **** /*$PAGE*/
 999:../os_core/os_core.c **** /*
1000:../os_core/os_core.c **** ***************************************************************************************************
1001:../os_core/os_core.c **** *                                             INITIALIZATION
1002:../os_core/os_core.c **** *                                      CREATING THE STATISTIC TASK
1003:../os_core/os_core.c **** *
1004:../os_core/os_core.c **** * Description: This function creates the Statistic Task.
1005:../os_core/os_core.c **** *
1006:../os_core/os_core.c **** * Arguments  : none
1007:../os_core/os_core.c **** *
1008:../os_core/os_core.c **** * Returns    : none
1009:../os_core/os_core.c **** ***************************************************************************************************
1010:../os_core/os_core.c **** */
1011:../os_core/os_core.c **** 
1012:../os_core/os_core.c **** #if OS_TASK_STAT_EN > 0
1013:../os_core/os_core.c **** static  void  OS_InitTaskStat (void)
1014:../os_core/os_core.c **** {
 3928              		.loc 1 1014 0
 3929              		.cfi_startproc
 3930              		@ Function supports interworking.
 3931              		@ args = 0, pretend = 0, frame = 0
 3932              		@ frame_needed = 1, uses_anonymous_args = 0
 3933 1108 0DC0A0E1 		mov	ip, sp
 3934              	.LCFI40:
 3935              		.cfi_def_cfa_register 12
 3936 110c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3937 1110 04B04CE2 		sub	fp, ip, #4
 3938              		.cfi_offset 14, -8
 3939              		.cfi_offset 13, -12
 3940              		.cfi_offset 11, -16
 3941              	.LCFI41:
 3942              		.cfi_def_cfa 11, 4
 3943 1114 18D04DE2 		sub	sp, sp, #24
1015:../os_core/os_core.c **** #if OS_TASK_CREATE_EXT_EN > 0
1016:../os_core/os_core.c ****     #if OS_STK_GROWTH == 1
1017:../os_core/os_core.c ****     (void)OSTaskCreateExt(OS_TaskStat,
 3944              		.loc 1 1017 0
 3945 1118 40309FE5 		ldr	r3, .L96
 3946 111c 00308DE5 		str	r3, [sp, #0]
 3947 1120 3C309FE5 		ldr	r3, .L96+4
 3948 1124 04308DE5 		str	r3, [sp, #4]
 3949 1128 023CA0E3 		mov	r3, #512
 3950 112c 08308DE5 		str	r3, [sp, #8]
 3951 1130 0030A0E3 		mov	r3, #0
 3952 1134 0C308DE5 		str	r3, [sp, #12]
 3953 1138 0330A0E3 		mov	r3, #3
 3954 113c 10308DE5 		str	r3, [sp, #16]
 3955 1140 20009FE5 		ldr	r0, .L96+8
 3956 1144 0010A0E3 		mov	r1, #0
 3957 1148 1C209FE5 		ldr	r2, .L96+12
 3958 114c 3E30A0E3 		mov	r3, #62
 3959 1150 FEFFFFEB 		bl	OSTaskCreateExt
1018:../os_core/os_core.c ****                           (void *)0,                                   /* No args passed to OS_Task
1019:../os_core/os_core.c ****                           &OSTaskStatStk[OS_TASK_STAT_STK_SIZE - 1],   /* Set Top-Of-Stack         
1020:../os_core/os_core.c ****                           OS_STAT_PRIO,                                /* One higher than the idle 
1021:../os_core/os_core.c ****                           OS_TASK_STAT_ID,
1022:../os_core/os_core.c ****                           &OSTaskStatStk[0],                           /* Set Bottom-Of-Stack      
1023:../os_core/os_core.c ****                           OS_TASK_STAT_STK_SIZE,
1024:../os_core/os_core.c ****                           (void *)0,                                   /* No TCB extension         
1025:../os_core/os_core.c ****                           OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);  /* Enable stack checking + c
1026:../os_core/os_core.c ****     #else
1027:../os_core/os_core.c ****     (void)OSTaskCreateExt(OS_TaskStat,
1028:../os_core/os_core.c ****                           (void *)0,                                   /* No args passed to OS_Task
1029:../os_core/os_core.c ****                           &OSTaskStatStk[0],                           /* Set Top-Of-Stack         
1030:../os_core/os_core.c ****                           OS_STAT_PRIO,                                /* One higher than the idle 
1031:../os_core/os_core.c ****                           OS_TASK_STAT_ID,
1032:../os_core/os_core.c ****                           &OSTaskStatStk[OS_TASK_STAT_STK_SIZE - 1],   /* Set Bottom-Of-Stack      
1033:../os_core/os_core.c ****                           OS_TASK_STAT_STK_SIZE,
1034:../os_core/os_core.c ****                           (void *)0,                                   /* No TCB extension         
1035:../os_core/os_core.c ****                           OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);  /* Enable stack checking + c
1036:../os_core/os_core.c ****     #endif
1037:../os_core/os_core.c **** #else
1038:../os_core/os_core.c ****     #if OS_STK_GROWTH == 1
1039:../os_core/os_core.c ****     (void)OSTaskCreate(OS_TaskStat,
1040:../os_core/os_core.c ****                        (void *)0,                                      /* No args passed to OS_Task
1041:../os_core/os_core.c ****                        &OSTaskStatStk[OS_TASK_STAT_STK_SIZE - 1],      /* Set Top-Of-Stack         
1042:../os_core/os_core.c ****                        OS_STAT_PRIO);                                  /* One higher than the idle 
1043:../os_core/os_core.c ****     #else
1044:../os_core/os_core.c ****     (void)OSTaskCreate(OS_TaskStat,
1045:../os_core/os_core.c ****                        (void *)0,                                      /* No args passed to OS_Task
1046:../os_core/os_core.c ****                        &OSTaskStatStk[0],                              /* Set Top-Of-Stack         
1047:../os_core/os_core.c ****                        OS_STAT_PRIO);                                  /* One higher than the idle 
1048:../os_core/os_core.c ****     #endif
1049:../os_core/os_core.c **** #endif
1050:../os_core/os_core.c **** }
 3960              		.loc 1 1050 0
 3961 1154 0CD04BE2 		sub	sp, fp, #12
 3962 1158 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3963 115c 1EFF2FE1 		bx	lr
 3964              	.L97:
 3965              		.align	2
 3966              	.L96:
 3967 1160 FEFF0000 		.word	65534
 3968 1164 00000000 		.word	OSTaskStatStk
 3969 1168 00000000 		.word	OS_TaskStat
 3970 116c FC070000 		.word	OSTaskStatStk+2044
 3971              		.cfi_endproc
 3972              	.LFE20:
 3974              		.align	2
 3976              	OS_InitTCBList:
 3977              	.LFB21:
1051:../os_core/os_core.c **** #endif
1052:../os_core/os_core.c **** /*$PAGE*/
1053:../os_core/os_core.c **** /*
1054:../os_core/os_core.c **** ***************************************************************************************************
1055:../os_core/os_core.c **** *                                             INITIALIZATION
1056:../os_core/os_core.c **** *                            INITIALIZE THE FREE LIST OF TASK CONTROL BLOCKS
1057:../os_core/os_core.c **** *
1058:../os_core/os_core.c **** * Description: This function is called by OSInit() to initialize the free list of OS_TCBs.
1059:../os_core/os_core.c **** *
1060:../os_core/os_core.c **** * Arguments  : none
1061:../os_core/os_core.c **** *
1062:../os_core/os_core.c **** * Returns    : none
1063:../os_core/os_core.c **** ***************************************************************************************************
1064:../os_core/os_core.c **** */
1065:../os_core/os_core.c **** 
1066:../os_core/os_core.c **** static  void  OS_InitTCBList (void)
1067:../os_core/os_core.c **** {
 3978              		.loc 1 1067 0
 3979              		.cfi_startproc
 3980              		@ Function supports interworking.
 3981              		@ args = 0, pretend = 0, frame = 16
 3982              		@ frame_needed = 1, uses_anonymous_args = 0
 3983 1170 0DC0A0E1 		mov	ip, sp
 3984              	.LCFI42:
 3985              		.cfi_def_cfa_register 12
 3986 1174 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3987 1178 04B04CE2 		sub	fp, ip, #4
 3988              		.cfi_offset 14, -8
 3989              		.cfi_offset 13, -12
 3990              		.cfi_offset 11, -16
 3991              	.LCFI43:
 3992              		.cfi_def_cfa 11, 4
 3993 117c 10D04DE2 		sub	sp, sp, #16
1068:../os_core/os_core.c ****     INT8U    i;
1069:../os_core/os_core.c ****     OS_TCB  *ptcb1;
1070:../os_core/os_core.c ****     OS_TCB  *ptcb2;
1071:../os_core/os_core.c **** 
1072:../os_core/os_core.c **** 
1073:../os_core/os_core.c ****     OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs             
 3994              		.loc 1 1073 0
 3995 1180 D0309FE5 		ldr	r3, .L101
 3996 1184 0300A0E1 		mov	r0, r3
 3997 1188 8F1EA0E3 		mov	r1, #2288
 3998 118c FEFFFFEB 		bl	OS_MemClr
1074:../os_core/os_core.c ****     OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table       
 3999              		.loc 1 1074 0
 4000 1190 C4309FE5 		ldr	r3, .L101+4
 4001 1194 0300A0E1 		mov	r0, r3
 4002 1198 011CA0E3 		mov	r1, #256
 4003 119c FEFFFFEB 		bl	OS_MemClr
1075:../os_core/os_core.c ****     ptcb1 = &OSTCBTbl[0];
 4004              		.loc 1 1075 0
 4005 11a0 B0309FE5 		ldr	r3, .L101
 4006 11a4 14300BE5 		str	r3, [fp, #-20]
1076:../os_core/os_core.c ****     ptcb2 = &OSTCBTbl[1];
 4007              		.loc 1 1076 0
 4008 11a8 B0309FE5 		ldr	r3, .L101+8
 4009 11ac 18300BE5 		str	r3, [fp, #-24]
1077:../os_core/os_core.c ****     for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs        
 4010              		.loc 1 1077 0
 4011 11b0 0030A0E3 		mov	r3, #0
 4012 11b4 0D304BE5 		strb	r3, [fp, #-13]
 4013 11b8 110000EA 		b	.L99
 4014              	.L100:
1078:../os_core/os_core.c ****         ptcb1->OSTCBNext = ptcb2;
 4015              		.loc 1 1078 0 discriminator 2
 4016 11bc 14301BE5 		ldr	r3, [fp, #-20]
 4017 11c0 18201BE5 		ldr	r2, [fp, #-24]
 4018 11c4 142083E5 		str	r2, [r3, #20]
1079:../os_core/os_core.c **** #if OS_TASK_NAME_SIZE > 1
1080:../os_core/os_core.c ****         ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                   
 4019              		.loc 1 1080 0 discriminator 2
 4020 11c8 14301BE5 		ldr	r3, [fp, #-20]
 4021 11cc 3F20A0E3 		mov	r2, #63
 4022 11d0 4820C3E5 		strb	r2, [r3, #72]
1081:../os_core/os_core.c ****         ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 4023              		.loc 1 1081 0 discriminator 2
 4024 11d4 14301BE5 		ldr	r3, [fp, #-20]
 4025 11d8 0020A0E3 		mov	r2, #0
 4026 11dc 4920C3E5 		strb	r2, [r3, #73]
1082:../os_core/os_core.c **** #endif
1083:../os_core/os_core.c ****         ptcb1++;
 4027              		.loc 1 1083 0 discriminator 2
 4028 11e0 14301BE5 		ldr	r3, [fp, #-20]
 4029 11e4 683083E2 		add	r3, r3, #104
 4030 11e8 14300BE5 		str	r3, [fp, #-20]
1084:../os_core/os_core.c ****         ptcb2++;
 4031              		.loc 1 1084 0 discriminator 2
 4032 11ec 18301BE5 		ldr	r3, [fp, #-24]
 4033 11f0 683083E2 		add	r3, r3, #104
 4034 11f4 18300BE5 		str	r3, [fp, #-24]
1077:../os_core/os_core.c ****     for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs        
 4035              		.loc 1 1077 0 discriminator 2
 4036 11f8 0D305BE5 		ldrb	r3, [fp, #-13]
 4037 11fc 013083E2 		add	r3, r3, #1
 4038 1200 0D304BE5 		strb	r3, [fp, #-13]
 4039              	.L99:
1077:../os_core/os_core.c ****     for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs        
 4040              		.loc 1 1077 0 is_stmt 0 discriminator 1
 4041 1204 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 4042 1208 140053E3 		cmp	r3, #20
 4043 120c EAFFFF9A 		bls	.L100
1085:../os_core/os_core.c ****     }
1086:../os_core/os_core.c ****     ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                    
 4044              		.loc 1 1086 0 is_stmt 1
 4045 1210 14301BE5 		ldr	r3, [fp, #-20]
 4046 1214 0020A0E3 		mov	r2, #0
 4047 1218 142083E5 		str	r2, [r3, #20]
1087:../os_core/os_core.c **** #if OS_TASK_NAME_SIZE > 1
1088:../os_core/os_core.c ****     ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                   
 4048              		.loc 1 1088 0
 4049 121c 14301BE5 		ldr	r3, [fp, #-20]
 4050 1220 3F20A0E3 		mov	r2, #63
 4051 1224 4820C3E5 		strb	r2, [r3, #72]
1089:../os_core/os_core.c ****     ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 4052              		.loc 1 1089 0
 4053 1228 14301BE5 		ldr	r3, [fp, #-20]
 4054 122c 0020A0E3 		mov	r2, #0
 4055 1230 4920C3E5 		strb	r2, [r3, #73]
1090:../os_core/os_core.c **** #endif
1091:../os_core/os_core.c ****     OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations      
 4056              		.loc 1 1091 0
 4057 1234 28309FE5 		ldr	r3, .L101+12
 4058 1238 0020A0E3 		mov	r2, #0
 4059 123c 002083E5 		str	r2, [r3, #0]
1092:../os_core/os_core.c ****     OSTCBFreeList           = &OSTCBTbl[0];
 4060              		.loc 1 1092 0
 4061 1240 20309FE5 		ldr	r3, .L101+16
 4062 1244 0C209FE5 		ldr	r2, .L101
 4063 1248 002083E5 		str	r2, [r3, #0]
1093:../os_core/os_core.c **** }
 4064              		.loc 1 1093 0
 4065 124c 0CD04BE2 		sub	sp, fp, #12
 4066 1250 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4067 1254 1EFF2FE1 		bx	lr
 4068              	.L102:
 4069              		.align	2
 4070              	.L101:
 4071 1258 00000000 		.word	OSTCBTbl
 4072 125c 00000000 		.word	OSTCBPrioTbl
 4073 1260 68000000 		.word	OSTCBTbl+104
 4074 1264 00000000 		.word	OSTCBList
 4075 1268 00000000 		.word	OSTCBFreeList
 4076              		.cfi_endproc
 4077              	.LFE21:
 4079              		.align	2
 4080              		.global	OS_MemClr
 4082              	OS_MemClr:
 4083              	.LFB22:
1094:../os_core/os_core.c **** /*$PAGE*/
1095:../os_core/os_core.c **** /*
1096:../os_core/os_core.c **** ***************************************************************************************************
1097:../os_core/os_core.c **** *                                        CLEAR A SECTION OF MEMORY
1098:../os_core/os_core.c **** *
1099:../os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to clear a contiguous block of RA
1100:../os_core/os_core.c **** *
1101:../os_core/os_core.c **** * Arguments  : pdest    is the start of the RAM to clear (i.e. write 0x00 to)
1102:../os_core/os_core.c **** *
1103:../os_core/os_core.c **** *              size     is the number of bytes to clear.  
1104:../os_core/os_core.c **** *
1105:../os_core/os_core.c **** * Returns    : none
1106:../os_core/os_core.c **** *
1107:../os_core/os_core.c **** * Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
1108:../os_core/os_core.c **** *              2) Note that we can only clear up to 64K bytes of RAM.  This is not an issue because
1109:../os_core/os_core.c **** *                 of the uses of this function gets close to this limit.
1110:../os_core/os_core.c **** *              3) The clear is done one byte at a time since this will work on any processor irresp
1111:../os_core/os_core.c **** *                 of the alignment of the destination.
1112:../os_core/os_core.c **** ***************************************************************************************************
1113:../os_core/os_core.c **** */
1114:../os_core/os_core.c **** 
1115:../os_core/os_core.c **** void  OS_MemClr (INT8U *pdest, INT16U size)
1116:../os_core/os_core.c **** {
 4084              		.loc 1 1116 0
 4085              		.cfi_startproc
 4086              		@ Function supports interworking.
 4087              		@ args = 0, pretend = 0, frame = 8
 4088              		@ frame_needed = 1, uses_anonymous_args = 0
 4089 126c 0DC0A0E1 		mov	ip, sp
 4090              	.LCFI44:
 4091              		.cfi_def_cfa_register 12
 4092 1270 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4093 1274 04B04CE2 		sub	fp, ip, #4
 4094              		.cfi_offset 14, -8
 4095              		.cfi_offset 13, -12
 4096              		.cfi_offset 11, -16
 4097              	.LCFI45:
 4098              		.cfi_def_cfa 11, 4
 4099 1278 08D04DE2 		sub	sp, sp, #8
 4100 127c 10000BE5 		str	r0, [fp, #-16]
 4101 1280 0130A0E1 		mov	r3, r1
 4102 1284 B2314BE1 		strh	r3, [fp, #-18]	@ movhi
1117:../os_core/os_core.c ****     while (size > 0) {
 4103              		.loc 1 1117 0
 4104 1288 080000EA 		b	.L104
 4105              	.L105:
1118:../os_core/os_core.c ****         *pdest++ = (INT8U)0;
 4106              		.loc 1 1118 0
 4107 128c 10301BE5 		ldr	r3, [fp, #-16]
 4108 1290 0020A0E3 		mov	r2, #0
 4109 1294 0020C3E5 		strb	r2, [r3, #0]
 4110 1298 10301BE5 		ldr	r3, [fp, #-16]
 4111 129c 013083E2 		add	r3, r3, #1
 4112 12a0 10300BE5 		str	r3, [fp, #-16]
1119:../os_core/os_core.c ****         size--;
 4113              		.loc 1 1119 0
 4114 12a4 B2315BE1 		ldrh	r3, [fp, #-18]	@ movhi
 4115 12a8 013043E2 		sub	r3, r3, #1
 4116 12ac B2314BE1 		strh	r3, [fp, #-18]	@ movhi
 4117              	.L104:
1117:../os_core/os_core.c ****     while (size > 0) {
 4118              		.loc 1 1117 0 discriminator 1
 4119 12b0 B2315BE1 		ldrh	r3, [fp, #-18]
 4120 12b4 000053E3 		cmp	r3, #0
 4121 12b8 F3FFFF1A 		bne	.L105
1120:../os_core/os_core.c ****     }
1121:../os_core/os_core.c **** }
 4122              		.loc 1 1121 0
 4123 12bc 0CD04BE2 		sub	sp, fp, #12
 4124 12c0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4125 12c4 1EFF2FE1 		bx	lr
 4126              		.cfi_endproc
 4127              	.LFE22:
 4129              		.align	2
 4130              		.global	OS_MemCopy
 4132              	OS_MemCopy:
 4133              	.LFB23:
1122:../os_core/os_core.c **** /*$PAGE*/
1123:../os_core/os_core.c **** /*
1124:../os_core/os_core.c **** ***************************************************************************************************
1125:../os_core/os_core.c **** *                                        COPY A BLOCK OF MEMORY
1126:../os_core/os_core.c **** *
1127:../os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to copy a block of memory from on
1128:../os_core/os_core.c **** *              location to another.
1129:../os_core/os_core.c **** *
1130:../os_core/os_core.c **** * Arguments  : pdest    is a pointer to the 'destination' memory block
1131:../os_core/os_core.c **** *
1132:../os_core/os_core.c **** *              psrc     is a pointer to the 'source'      memory block
1133:../os_core/os_core.c **** *
1134:../os_core/os_core.c **** *              size     is the number of bytes to copy.  
1135:../os_core/os_core.c **** *
1136:../os_core/os_core.c **** * Returns    : none
1137:../os_core/os_core.c **** *
1138:../os_core/os_core.c **** * Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.  T
1139:../os_core/os_core.c **** *                 no provision to handle overlapping memory copy.  However, that's not a problem si
1140:../os_core/os_core.c **** *                 is not a situation that will happen.
1141:../os_core/os_core.c **** *              2) Note that we can only copy up to 64K bytes of RAM
1142:../os_core/os_core.c **** *              3) The copy is done one byte at a time since this will work on any processor irrespe
1143:../os_core/os_core.c **** *                 of the alignment of the source and destination.
1144:../os_core/os_core.c **** ***************************************************************************************************
1145:../os_core/os_core.c **** */
1146:../os_core/os_core.c **** 
1147:../os_core/os_core.c **** void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
1148:../os_core/os_core.c **** {
 4134              		.loc 1 1148 0
 4135              		.cfi_startproc
 4136              		@ Function supports interworking.
 4137              		@ args = 0, pretend = 0, frame = 16
 4138              		@ frame_needed = 1, uses_anonymous_args = 0
 4139 12c8 0DC0A0E1 		mov	ip, sp
 4140              	.LCFI46:
 4141              		.cfi_def_cfa_register 12
 4142 12cc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4143 12d0 04B04CE2 		sub	fp, ip, #4
 4144              		.cfi_offset 14, -8
 4145              		.cfi_offset 13, -12
 4146              		.cfi_offset 11, -16
 4147              	.LCFI47:
 4148              		.cfi_def_cfa 11, 4
 4149 12d4 10D04DE2 		sub	sp, sp, #16
 4150 12d8 10000BE5 		str	r0, [fp, #-16]
 4151 12dc 14100BE5 		str	r1, [fp, #-20]
 4152 12e0 0230A0E1 		mov	r3, r2
 4153 12e4 B6314BE1 		strh	r3, [fp, #-22]	@ movhi
1149:../os_core/os_core.c ****     while (size > 0) {
 4154              		.loc 1 1149 0
 4155 12e8 0C0000EA 		b	.L107
 4156              	.L108:
1150:../os_core/os_core.c ****         *pdest++ = *psrc++;
 4157              		.loc 1 1150 0
 4158 12ec 14301BE5 		ldr	r3, [fp, #-20]
 4159 12f0 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4160 12f4 10301BE5 		ldr	r3, [fp, #-16]
 4161 12f8 0020C3E5 		strb	r2, [r3, #0]
 4162 12fc 10301BE5 		ldr	r3, [fp, #-16]
 4163 1300 013083E2 		add	r3, r3, #1
 4164 1304 10300BE5 		str	r3, [fp, #-16]
 4165 1308 14301BE5 		ldr	r3, [fp, #-20]
 4166 130c 013083E2 		add	r3, r3, #1
 4167 1310 14300BE5 		str	r3, [fp, #-20]
1151:../os_core/os_core.c ****         size--;
 4168              		.loc 1 1151 0
 4169 1314 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 4170 1318 013043E2 		sub	r3, r3, #1
 4171 131c B6314BE1 		strh	r3, [fp, #-22]	@ movhi
 4172              	.L107:
1149:../os_core/os_core.c ****     while (size > 0) {
 4173              		.loc 1 1149 0 discriminator 1
 4174 1320 B6315BE1 		ldrh	r3, [fp, #-22]
 4175 1324 000053E3 		cmp	r3, #0
 4176 1328 EFFFFF1A 		bne	.L108
1152:../os_core/os_core.c ****     }
1153:../os_core/os_core.c **** }
 4177              		.loc 1 1153 0
 4178 132c 0CD04BE2 		sub	sp, fp, #12
 4179 1330 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4180 1334 1EFF2FE1 		bx	lr
 4181              		.cfi_endproc
 4182              	.LFE23:
 4184              		.align	2
 4185              		.global	OS_Sched
 4187              	OS_Sched:
 4188              	.LFB24:
1154:../os_core/os_core.c **** /*$PAGE*/
1155:../os_core/os_core.c **** /*
1156:../os_core/os_core.c **** ***************************************************************************************************
1157:../os_core/os_core.c **** *                                              SCHEDULER
1158:../os_core/os_core.c **** *
1159:../os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to determine whether a new, high
1160:../os_core/os_core.c **** *              priority task has been made ready to run.  This function is invoked by TASK level co
1161:../os_core/os_core.c **** *              and is not used to reschedule tasks from ISRs (see OSIntExit() for ISR rescheduling)
1162:../os_core/os_core.c **** *
1163:../os_core/os_core.c **** * Arguments  : none
1164:../os_core/os_core.c **** *
1165:../os_core/os_core.c **** * Returns    : none
1166:../os_core/os_core.c **** *
1167:../os_core/os_core.c **** * Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
1168:../os_core/os_core.c **** *              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
1169:../os_core/os_core.c **** ***************************************************************************************************
1170:../os_core/os_core.c **** */
1171:../os_core/os_core.c **** 
1172:../os_core/os_core.c **** void  OS_Sched (void)
1173:../os_core/os_core.c **** {
 4189              		.loc 1 1173 0
 4190              		.cfi_startproc
 4191              		@ Function supports interworking.
 4192              		@ args = 0, pretend = 0, frame = 8
 4193              		@ frame_needed = 1, uses_anonymous_args = 0
 4194 1338 0DC0A0E1 		mov	ip, sp
 4195              	.LCFI48:
 4196              		.cfi_def_cfa_register 12
 4197 133c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4198 1340 04B04CE2 		sub	fp, ip, #4
 4199              		.cfi_offset 14, -8
 4200              		.cfi_offset 13, -12
 4201              		.cfi_offset 11, -16
 4202              	.LCFI49:
 4203              		.cfi_def_cfa 11, 4
 4204 1344 08D04DE2 		sub	sp, sp, #8
1174:../os_core/os_core.c ****     INT8U      y;
1175:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register 
1176:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
1177:../os_core/os_core.c **** 
1178:../os_core/os_core.c **** 
1179:../os_core/os_core.c **** 
1180:../os_core/os_core.c ****     cpu_sr = 0;                                        /* Prevent compiler warning                 
1181:../os_core/os_core.c **** #endif    
1182:../os_core/os_core.c ****     OS_ENTER_CRITICAL();
 4205              		.loc 1 1182 0
 4206              	@ 1182 "../os_core/os_core.c" 1
 4207 1348 00000FE1 		mrs   r0, cpsr
 4208              	@ 0 "" 2
 4209              	@ 1182 "../os_core/os_core.c" 1
 4210 134c 04002DE5 		stmfd sp!, {r0}
 4211              	@ 0 "" 2
 4212              	@ 1182 "../os_core/os_core.c" 1
 4213 1350 C00080E3 		orr   r0, r0, #0b11000000
 4214              	@ 0 "" 2
 4215              	@ 1182 "../os_core/os_core.c" 1
 4216 1354 00F021E1 		msr   cpsr_c, r0
 4217              	@ 0 "" 2
1183:../os_core/os_core.c ****     if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...   
 4218              		.loc 1 1183 0
 4219 1358 D0309FE5 		ldr	r3, .L111
 4220 135c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4221 1360 000053E3 		cmp	r3, #0
 4222 1364 2C00001A 		bne	.L110
1184:../os_core/os_core.c ****         if (OSLockNesting == 0) {                      /* ... scheduler is not locked              
 4223              		.loc 1 1184 0
 4224 1368 C4309FE5 		ldr	r3, .L111+4
 4225 136c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4226 1370 000053E3 		cmp	r3, #0
 4227 1374 2800001A 		bne	.L110
1185:../os_core/os_core.c ****             y             = OSUnMapTbl[OSRdyGrp];      /* Get pointer to HPT ready to run          
 4228              		.loc 1 1185 0
 4229 1378 B8309FE5 		ldr	r3, .L111+8
 4230 137c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4231 1380 B4209FE5 		ldr	r2, .L111+12
 4232 1384 0330D2E7 		ldrb	r3, [r2, r3]
 4233 1388 0D304BE5 		strb	r3, [fp, #-13]
1186:../os_core/os_core.c ****             OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 4234              		.loc 1 1186 0
 4235 138c 0D305BE5 		ldrb	r3, [fp, #-13]
 4236 1390 8331A0E1 		mov	r3, r3, asl #3
 4237 1394 FF2003E2 		and	r2, r3, #255
 4238 1398 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 4239 139c 9C109FE5 		ldr	r1, .L111+16
 4240 13a0 0330D1E7 		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 4241 13a4 90109FE5 		ldr	r1, .L111+12
 4242 13a8 0330D1E7 		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 4243 13ac 033082E0 		add	r3, r2, r3
 4244 13b0 FF2003E2 		and	r2, r3, #255
 4245 13b4 88309FE5 		ldr	r3, .L111+20
 4246 13b8 0020C3E5 		strb	r2, [r3, #0]
1187:../os_core/os_core.c ****             if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy 
 4247              		.loc 1 1187 0
 4248 13bc 80309FE5 		ldr	r3, .L111+20
 4249 13c0 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4250 13c4 7C309FE5 		ldr	r3, .L111+24
 4251 13c8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4252 13cc 030052E1 		cmp	r2, r3
 4253 13d0 1100000A 		beq	.L110
1188:../os_core/os_core.c ****                 OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 4254              		.loc 1 1188 0
 4255 13d4 68309FE5 		ldr	r3, .L111+20
 4256 13d8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4257 13dc 0320A0E1 		mov	r2, r3
 4258 13e0 64309FE5 		ldr	r3, .L111+28
 4259 13e4 022193E7 		ldr	r2, [r3, r2, asl #2]
 4260 13e8 60309FE5 		ldr	r3, .L111+32
 4261 13ec 002083E5 		str	r2, [r3, #0]
1189:../os_core/os_core.c **** #if OS_TASK_PROFILE_EN > 0
1190:../os_core/os_core.c ****                 OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  
 4262              		.loc 1 1190 0
 4263 13f0 58309FE5 		ldr	r3, .L111+32
 4264 13f4 003093E5 		ldr	r3, [r3, #0]
 4265 13f8 342093E5 		ldr	r2, [r3, #52]
 4266 13fc 012082E2 		add	r2, r2, #1
 4267 1400 342083E5 		str	r2, [r3, #52]
1191:../os_core/os_core.c **** #endif
1192:../os_core/os_core.c ****                 OSCtxSwCtr++;                          /* Increment context switch counter         
 4268              		.loc 1 1192 0
 4269 1404 48309FE5 		ldr	r3, .L111+36
 4270 1408 003093E5 		ldr	r3, [r3, #0]
 4271 140c 012083E2 		add	r2, r3, #1
 4272 1410 3C309FE5 		ldr	r3, .L111+36
 4273 1414 002083E5 		str	r2, [r3, #0]
1193:../os_core/os_core.c ****                 OS_TASK_SW();                          /* Perform a context switch                 
 4274              		.loc 1 1193 0
 4275 1418 FEFFFFEB 		bl	OSCtxSw
 4276              	.L110:
1194:../os_core/os_core.c ****             }
1195:../os_core/os_core.c ****         }
1196:../os_core/os_core.c ****     }
1197:../os_core/os_core.c ****     OS_EXIT_CRITICAL();
 4277              		.loc 1 1197 0
 4278              	@ 1197 "../os_core/os_core.c" 1
 4279 141c 04009DE4 		ldmfd sp!, {r0}
 4280              	@ 0 "" 2
 4281              	@ 1197 "../os_core/os_core.c" 1
 4282 1420 00F021E1 		msr   cpsr_c, r0
 4283              	@ 0 "" 2
1198:../os_core/os_core.c **** }
 4284              		.loc 1 1198 0
 4285 1424 0CD04BE2 		sub	sp, fp, #12
 4286 1428 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4287 142c 1EFF2FE1 		bx	lr
 4288              	.L112:
 4289              		.align	2
 4290              	.L111:
 4291 1430 00000000 		.word	OSIntNesting
 4292 1434 00000000 		.word	OSLockNesting
 4293 1438 00000000 		.word	OSRdyGrp
 4294 143c 00000000 		.word	OSUnMapTbl
 4295 1440 00000000 		.word	OSRdyTbl
 4296 1444 00000000 		.word	OSPrioHighRdy
 4297 1448 00000000 		.word	OSPrioCur
 4298 144c 00000000 		.word	OSTCBPrioTbl
 4299 1450 00000000 		.word	OSTCBHighRdy
 4300 1454 00000000 		.word	OSCtxSwCtr
 4301              		.cfi_endproc
 4302              	.LFE24:
 4304              		.align	2
 4305              		.global	OS_StrCopy
 4307              	OS_StrCopy:
 4308              	.LFB25:
1199:../os_core/os_core.c **** /*$PAGE*/
1200:../os_core/os_core.c **** /*
1201:../os_core/os_core.c **** ***************************************************************************************************
1202:../os_core/os_core.c **** *                                        COPY AN ASCII STRING
1203:../os_core/os_core.c **** *
1204:../os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to copy an ASCII string from a 's
1205:../os_core/os_core.c **** *              string to a 'destination' string.
1206:../os_core/os_core.c **** *
1207:../os_core/os_core.c **** * Arguments  : pdest    is a pointer to the string that will be receiving the copy.  Note that ther
1208:../os_core/os_core.c **** *                       be sufficient space in the destination storage area to receive this string.
1209:../os_core/os_core.c **** *
1210:../os_core/os_core.c **** *              psrc     is a pointer to the source string.  The source string MUST NOT be greater t
1211:../os_core/os_core.c **** *                       254 characters.
1212:../os_core/os_core.c **** *
1213:../os_core/os_core.c **** * Returns    : The size of the string (excluding the NUL terminating character)
1214:../os_core/os_core.c **** *
1215:../os_core/os_core.c **** * Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
1216:../os_core/os_core.c **** ***************************************************************************************************
1217:../os_core/os_core.c **** */
1218:../os_core/os_core.c **** 
1219:../os_core/os_core.c **** #if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_
1220:../os_core/os_core.c **** INT8U  OS_StrCopy (char *pdest, char *psrc)
1221:../os_core/os_core.c **** {
 4309              		.loc 1 1221 0
 4310              		.cfi_startproc
 4311              		@ Function supports interworking.
 4312              		@ args = 0, pretend = 0, frame = 16
 4313              		@ frame_needed = 1, uses_anonymous_args = 0
 4314 1458 0DC0A0E1 		mov	ip, sp
 4315              	.LCFI50:
 4316              		.cfi_def_cfa_register 12
 4317 145c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4318 1460 04B04CE2 		sub	fp, ip, #4
 4319              		.cfi_offset 14, -8
 4320              		.cfi_offset 13, -12
 4321              		.cfi_offset 11, -16
 4322              	.LCFI51:
 4323              		.cfi_def_cfa 11, 4
 4324 1464 10D04DE2 		sub	sp, sp, #16
 4325 1468 18000BE5 		str	r0, [fp, #-24]
 4326 146c 1C100BE5 		str	r1, [fp, #-28]
1222:../os_core/os_core.c ****     INT8U  len;
1223:../os_core/os_core.c **** 
1224:../os_core/os_core.c **** 
1225:../os_core/os_core.c ****     len = 0;
 4327              		.loc 1 1225 0
 4328 1470 0030A0E3 		mov	r3, #0
 4329 1474 0D304BE5 		strb	r3, [fp, #-13]
1226:../os_core/os_core.c ****     while (*psrc != OS_ASCII_NUL) {
 4330              		.loc 1 1226 0
 4331 1478 0C0000EA 		b	.L114
 4332              	.L115:
1227:../os_core/os_core.c ****         *pdest++ = *psrc++;
 4333              		.loc 1 1227 0
 4334 147c 1C301BE5 		ldr	r3, [fp, #-28]
 4335 1480 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4336 1484 18301BE5 		ldr	r3, [fp, #-24]
 4337 1488 0020C3E5 		strb	r2, [r3, #0]
 4338 148c 18301BE5 		ldr	r3, [fp, #-24]
 4339 1490 013083E2 		add	r3, r3, #1
 4340 1494 18300BE5 		str	r3, [fp, #-24]
 4341 1498 1C301BE5 		ldr	r3, [fp, #-28]
 4342 149c 013083E2 		add	r3, r3, #1
 4343 14a0 1C300BE5 		str	r3, [fp, #-28]
1228:../os_core/os_core.c ****         len++;
 4344              		.loc 1 1228 0
 4345 14a4 0D305BE5 		ldrb	r3, [fp, #-13]
 4346 14a8 013083E2 		add	r3, r3, #1
 4347 14ac 0D304BE5 		strb	r3, [fp, #-13]
 4348              	.L114:
1226:../os_core/os_core.c ****     while (*psrc != OS_ASCII_NUL) {
 4349              		.loc 1 1226 0 discriminator 1
 4350 14b0 1C301BE5 		ldr	r3, [fp, #-28]
 4351 14b4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4352 14b8 000053E3 		cmp	r3, #0
 4353 14bc EEFFFF1A 		bne	.L115
1229:../os_core/os_core.c ****     }
1230:../os_core/os_core.c ****     *pdest = OS_ASCII_NUL;
 4354              		.loc 1 1230 0
 4355 14c0 18301BE5 		ldr	r3, [fp, #-24]
 4356 14c4 0020A0E3 		mov	r2, #0
 4357 14c8 0020C3E5 		strb	r2, [r3, #0]
1231:../os_core/os_core.c ****     return (len);
 4358              		.loc 1 1231 0
 4359 14cc 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
1232:../os_core/os_core.c **** }
 4360              		.loc 1 1232 0
 4361 14d0 0300A0E1 		mov	r0, r3
 4362 14d4 0CD04BE2 		sub	sp, fp, #12
 4363 14d8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4364 14dc 1EFF2FE1 		bx	lr
 4365              		.cfi_endproc
 4366              	.LFE25:
 4368              		.align	2
 4369              		.global	OS_StrLen
 4371              	OS_StrLen:
 4372              	.LFB26:
1233:../os_core/os_core.c **** #endif
1234:../os_core/os_core.c **** /*$PAGE*/
1235:../os_core/os_core.c **** /*
1236:../os_core/os_core.c **** ***************************************************************************************************
1237:../os_core/os_core.c **** *                                DETERMINE THE LENGTH OF AN ASCII STRING
1238:../os_core/os_core.c **** *
1239:../os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to determine the size of an ASCII
1240:../os_core/os_core.c **** *              (excluding the NUL character).
1241:../os_core/os_core.c **** *
1242:../os_core/os_core.c **** * Arguments  : psrc     is a pointer to the string for which we need to know the size.
1243:../os_core/os_core.c **** *
1244:../os_core/os_core.c **** * Returns    : The size of the string (excluding the NUL terminating character)
1245:../os_core/os_core.c **** *
1246:../os_core/os_core.c **** * Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
1247:../os_core/os_core.c **** *              2) The string to check must be less than 255 characters long.
1248:../os_core/os_core.c **** ***************************************************************************************************
1249:../os_core/os_core.c **** */
1250:../os_core/os_core.c **** 
1251:../os_core/os_core.c **** #if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_
1252:../os_core/os_core.c **** INT8U  OS_StrLen (char *psrc)
1253:../os_core/os_core.c **** {
 4373              		.loc 1 1253 0
 4374              		.cfi_startproc
 4375              		@ Function supports interworking.
 4376              		@ args = 0, pretend = 0, frame = 16
 4377              		@ frame_needed = 1, uses_anonymous_args = 0
 4378 14e0 0DC0A0E1 		mov	ip, sp
 4379              	.LCFI52:
 4380              		.cfi_def_cfa_register 12
 4381 14e4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4382 14e8 04B04CE2 		sub	fp, ip, #4
 4383              		.cfi_offset 14, -8
 4384              		.cfi_offset 13, -12
 4385              		.cfi_offset 11, -16
 4386              	.LCFI53:
 4387              		.cfi_def_cfa 11, 4
 4388 14ec 10D04DE2 		sub	sp, sp, #16
 4389 14f0 18000BE5 		str	r0, [fp, #-24]
1254:../os_core/os_core.c ****     INT8U  len;
1255:../os_core/os_core.c **** 
1256:../os_core/os_core.c **** 
1257:../os_core/os_core.c ****     len = 0;
 4390              		.loc 1 1257 0
 4391 14f4 0030A0E3 		mov	r3, #0
 4392 14f8 0D304BE5 		strb	r3, [fp, #-13]
1258:../os_core/os_core.c ****     while (*psrc != OS_ASCII_NUL) {
 4393              		.loc 1 1258 0
 4394 14fc 050000EA 		b	.L117
 4395              	.L118:
1259:../os_core/os_core.c ****         psrc++;
 4396              		.loc 1 1259 0
 4397 1500 18301BE5 		ldr	r3, [fp, #-24]
 4398 1504 013083E2 		add	r3, r3, #1
 4399 1508 18300BE5 		str	r3, [fp, #-24]
1260:../os_core/os_core.c ****         len++;
 4400              		.loc 1 1260 0
 4401 150c 0D305BE5 		ldrb	r3, [fp, #-13]
 4402 1510 013083E2 		add	r3, r3, #1
 4403 1514 0D304BE5 		strb	r3, [fp, #-13]
 4404              	.L117:
1258:../os_core/os_core.c ****     while (*psrc != OS_ASCII_NUL) {
 4405              		.loc 1 1258 0 discriminator 1
 4406 1518 18301BE5 		ldr	r3, [fp, #-24]
 4407 151c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4408 1520 000053E3 		cmp	r3, #0
 4409 1524 F5FFFF1A 		bne	.L118
1261:../os_core/os_core.c ****     }
1262:../os_core/os_core.c ****     return (len);
 4410              		.loc 1 1262 0
 4411 1528 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
1263:../os_core/os_core.c **** }
 4412              		.loc 1 1263 0
 4413 152c 0300A0E1 		mov	r0, r3
 4414 1530 0CD04BE2 		sub	sp, fp, #12
 4415 1534 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4416 1538 1EFF2FE1 		bx	lr
 4417              		.cfi_endproc
 4418              	.LFE26:
 4420              		.align	2
 4421              		.global	OS_TaskIdle
 4423              	OS_TaskIdle:
 4424              	.LFB27:
1264:../os_core/os_core.c **** #endif
1265:../os_core/os_core.c **** /*$PAGE*/
1266:../os_core/os_core.c **** /*
1267:../os_core/os_core.c **** ***************************************************************************************************
1268:../os_core/os_core.c **** *                                              IDLE TASK
1269:../os_core/os_core.c **** *
1270:../os_core/os_core.c **** * Description: This task is internal to uC/OS-II and executes whenever no other higher priority tas
1271:../os_core/os_core.c **** *              executes because they are ALL waiting for event(s) to occur.
1272:../os_core/os_core.c **** *
1273:../os_core/os_core.c **** * Arguments  : none
1274:../os_core/os_core.c **** *
1275:../os_core/os_core.c **** * Returns    : none
1276:../os_core/os_core.c **** *
1277:../os_core/os_core.c **** * Note(s)    : 1) OSTaskIdleHook() is called after the critical section to ensure that interrupts w
1278:../os_core/os_core.c **** *                 enabled for at least a few instructions.  On some processors (ex. Philips XA), en
1279:../os_core/os_core.c **** *                 and then disabling interrupts didn't allow the processor enough time to have inte
1280:../os_core/os_core.c **** *                 enabled before they were disabled again.  uC/OS-II would thus never recognize
1281:../os_core/os_core.c **** *                 interrupts.
1282:../os_core/os_core.c **** *              2) This hook has been added to allow you to do such things as STOP the CPU to conser
1283:../os_core/os_core.c **** *                 power.
1284:../os_core/os_core.c **** ***************************************************************************************************
1285:../os_core/os_core.c **** */
1286:../os_core/os_core.c **** 
1287:../os_core/os_core.c **** void  OS_TaskIdle (void *parg)
1288:../os_core/os_core.c **** {
 4425              		.loc 1 1288 0
 4426              		.cfi_startproc
 4427              		@ Function supports interworking.
 4428              		@ args = 0, pretend = 0, frame = 8
 4429              		@ frame_needed = 1, uses_anonymous_args = 0
 4430 153c 0DC0A0E1 		mov	ip, sp
 4431              	.LCFI54:
 4432              		.cfi_def_cfa_register 12
 4433 1540 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4434 1544 04B04CE2 		sub	fp, ip, #4
 4435              		.cfi_offset 14, -8
 4436              		.cfi_offset 13, -12
 4437              		.cfi_offset 11, -16
 4438              	.LCFI55:
 4439              		.cfi_def_cfa 11, 4
 4440 1548 08D04DE2 		sub	sp, sp, #8
 4441 154c 10000BE5 		str	r0, [fp, #-16]
 4442              	.L120:
1289:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
1290:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
1291:../os_core/os_core.c ****     
1292:../os_core/os_core.c ****     
1293:../os_core/os_core.c **** 
1294:../os_core/os_core.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
1295:../os_core/os_core.c **** #endif    
1296:../os_core/os_core.c ****     parg   = parg;                               /* Prevent compiler warning for not using 'parg'  
1297:../os_core/os_core.c ****     for (;;) {
1298:../os_core/os_core.c ****         OS_ENTER_CRITICAL();
 4443              		.loc 1 1298 0 discriminator 1
 4444              	@ 1298 "../os_core/os_core.c" 1
 4445 1550 00000FE1 		mrs   r0, cpsr
 4446              	@ 0 "" 2
 4447              	@ 1298 "../os_core/os_core.c" 1
 4448 1554 04002DE5 		stmfd sp!, {r0}
 4449              	@ 0 "" 2
 4450              	@ 1298 "../os_core/os_core.c" 1
 4451 1558 C00080E3 		orr   r0, r0, #0b11000000
 4452              	@ 0 "" 2
 4453              	@ 1298 "../os_core/os_core.c" 1
 4454 155c 00F021E1 		msr   cpsr_c, r0
 4455              	@ 0 "" 2
1299:../os_core/os_core.c ****         OSIdleCtr++;
 4456              		.loc 1 1299 0 discriminator 1
 4457 1560 1C309FE5 		ldr	r3, .L121
 4458 1564 003093E5 		ldr	r3, [r3, #0]
 4459 1568 012083E2 		add	r2, r3, #1
 4460 156c 10309FE5 		ldr	r3, .L121
 4461 1570 002083E5 		str	r2, [r3, #0]
1300:../os_core/os_core.c ****         OS_EXIT_CRITICAL();
 4462              		.loc 1 1300 0 discriminator 1
 4463              	@ 1300 "../os_core/os_core.c" 1
 4464 1574 04009DE4 		ldmfd sp!, {r0}
 4465              	@ 0 "" 2
 4466              	@ 1300 "../os_core/os_core.c" 1
 4467 1578 00F021E1 		msr   cpsr_c, r0
 4468              	@ 0 "" 2
1301:../os_core/os_core.c ****         OSTaskIdleHook();                        /* Call user definable HOOK                       
 4469              		.loc 1 1301 0 discriminator 1
 4470 157c FEFFFFEB 		bl	OSTaskIdleHook
1302:../os_core/os_core.c ****     }
 4471              		.loc 1 1302 0 discriminator 1
 4472 1580 F2FFFFEA 		b	.L120
 4473              	.L122:
 4474              		.align	2
 4475              	.L121:
 4476 1584 00000000 		.word	OSIdleCtr
 4477              		.cfi_endproc
 4478              	.LFE27:
 4480              		.global	__aeabi_uidiv
 4481              		.align	2
 4482              		.global	OS_TaskStat
 4484              	OS_TaskStat:
 4485              	.LFB28:
1303:../os_core/os_core.c **** }
1304:../os_core/os_core.c **** /*$PAGE*/
1305:../os_core/os_core.c **** /*
1306:../os_core/os_core.c **** ***************************************************************************************************
1307:../os_core/os_core.c **** *                                            STATISTICS TASK
1308:../os_core/os_core.c **** *
1309:../os_core/os_core.c **** * Description: This task is internal to uC/OS-II and is used to compute some statistics about the
1310:../os_core/os_core.c **** *              multitasking environment.  Specifically, OS_TaskStat() computes the CPU usage.
1311:../os_core/os_core.c **** *              CPU usage is determined by:
1312:../os_core/os_core.c **** *
1313:../os_core/os_core.c **** *                                          OSIdleCtr
1314:../os_core/os_core.c **** *                 OSCPUUsage = 100 * (1 - ------------)     (units are in %)
1315:../os_core/os_core.c **** *                                         OSIdleCtrMax
1316:../os_core/os_core.c **** *
1317:../os_core/os_core.c **** * Arguments  : parg     this pointer is not used at this time.
1318:../os_core/os_core.c **** *
1319:../os_core/os_core.c **** * Returns    : none
1320:../os_core/os_core.c **** *
1321:../os_core/os_core.c **** * Notes      : 1) This task runs at a priority level higher than the idle task.  In fact, it runs a
1322:../os_core/os_core.c **** *                 next higher priority, OS_IDLE_PRIO-1.
1323:../os_core/os_core.c **** *              2) You can disable this task by setting the configuration #define OS_TASK_STAT_EN to
1324:../os_core/os_core.c **** *              3) You MUST have at least a delay of 2/10 seconds to allow for the system to establi
1325:../os_core/os_core.c **** *                 maximum value for the idle counter.
1326:../os_core/os_core.c **** ***************************************************************************************************
1327:../os_core/os_core.c **** */
1328:../os_core/os_core.c **** 
1329:../os_core/os_core.c **** #if OS_TASK_STAT_EN > 0
1330:../os_core/os_core.c **** void  OS_TaskStat (void *parg)
1331:../os_core/os_core.c **** {
 4486              		.loc 1 1331 0
 4487              		.cfi_startproc
 4488              		@ Function supports interworking.
 4489              		@ args = 0, pretend = 0, frame = 24
 4490              		@ frame_needed = 1, uses_anonymous_args = 0
 4491 1588 0DC0A0E1 		mov	ip, sp
 4492              	.LCFI56:
 4493              		.cfi_def_cfa_register 12
 4494 158c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4495 1590 04B04CE2 		sub	fp, ip, #4
 4496              		.cfi_offset 14, -8
 4497              		.cfi_offset 13, -12
 4498              		.cfi_offset 11, -16
 4499              	.LCFI57:
 4500              		.cfi_def_cfa 11, 4
 4501 1594 18D04DE2 		sub	sp, sp, #24
 4502 1598 20000BE5 		str	r0, [fp, #-32]
1332:../os_core/os_core.c ****     INT32U     run;
1333:../os_core/os_core.c ****     INT32U     max;
1334:../os_core/os_core.c ****     INT8S      usage;
1335:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
1336:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
1337:../os_core/os_core.c **** 
1338:../os_core/os_core.c **** 
1339:../os_core/os_core.c **** 
1340:../os_core/os_core.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
1341:../os_core/os_core.c **** #endif    
1342:../os_core/os_core.c ****     parg   = parg;                               /* Prevent compiler warning for not using 'parg'  
1343:../os_core/os_core.c ****     while (OSStatRdy == FALSE) {
 4503              		.loc 1 1343 0
 4504 159c 010000EA 		b	.L124
 4505              	.L125:
1344:../os_core/os_core.c ****         OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready             
 4506              		.loc 1 1344 0
 4507 15a0 1400A0E3 		mov	r0, #20
 4508 15a4 FEFFFFEB 		bl	OSTimeDly
 4509              	.L124:
1343:../os_core/os_core.c ****     while (OSStatRdy == FALSE) {
 4510              		.loc 1 1343 0 discriminator 1
 4511 15a8 F0309FE5 		ldr	r3, .L130
 4512 15ac 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4513 15b0 000053E3 		cmp	r3, #0
 4514 15b4 F9FFFF0A 		beq	.L125
1345:../os_core/os_core.c ****     }
1346:../os_core/os_core.c ****     max = OSIdleCtrMax / 100L;
 4515              		.loc 1 1346 0
 4516 15b8 E4309FE5 		ldr	r3, .L130+4
 4517 15bc 002093E5 		ldr	r2, [r3, #0]
 4518 15c0 E0309FE5 		ldr	r3, .L130+8
 4519 15c4 921383E0 		umull	r1, r3, r2, r3
 4520 15c8 A332A0E1 		mov	r3, r3, lsr #5
 4521 15cc 10300BE5 		str	r3, [fp, #-16]
 4522              	.L129:
1347:../os_core/os_core.c ****     for (;;) {
1348:../os_core/os_core.c ****         OS_ENTER_CRITICAL();
 4523              		.loc 1 1348 0
 4524              	@ 1348 "../os_core/os_core.c" 1
 4525 15d0 00000FE1 		mrs   r0, cpsr
 4526              	@ 0 "" 2
 4527              	@ 1348 "../os_core/os_core.c" 1
 4528 15d4 04002DE5 		stmfd sp!, {r0}
 4529              	@ 0 "" 2
 4530              	@ 1348 "../os_core/os_core.c" 1
 4531 15d8 C00080E3 		orr   r0, r0, #0b11000000
 4532              	@ 0 "" 2
 4533              	@ 1348 "../os_core/os_core.c" 1
 4534 15dc 00F021E1 		msr   cpsr_c, r0
 4535              	@ 0 "" 2
1349:../os_core/os_core.c ****         OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past sec
 4536              		.loc 1 1349 0
 4537 15e0 C4309FE5 		ldr	r3, .L130+12
 4538 15e4 002093E5 		ldr	r2, [r3, #0]
 4539 15e8 C0309FE5 		ldr	r3, .L130+16
 4540 15ec 002083E5 		str	r2, [r3, #0]
1350:../os_core/os_core.c ****         run          = OSIdleCtr;
 4541              		.loc 1 1350 0
 4542 15f0 B4309FE5 		ldr	r3, .L130+12
 4543 15f4 003093E5 		ldr	r3, [r3, #0]
 4544 15f8 14300BE5 		str	r3, [fp, #-20]
1351:../os_core/os_core.c ****         OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second     
 4545              		.loc 1 1351 0
 4546 15fc A8309FE5 		ldr	r3, .L130+12
 4547 1600 0020A0E3 		mov	r2, #0
 4548 1604 002083E5 		str	r2, [r3, #0]
1352:../os_core/os_core.c ****         OS_EXIT_CRITICAL();
 4549              		.loc 1 1352 0
 4550              	@ 1352 "../os_core/os_core.c" 1
 4551 1608 04009DE4 		ldmfd sp!, {r0}
 4552              	@ 0 "" 2
 4553              	@ 1352 "../os_core/os_core.c" 1
 4554 160c 00F021E1 		msr   cpsr_c, r0
 4555              	@ 0 "" 2
1353:../os_core/os_core.c ****         if (max > 0L) {
 4556              		.loc 1 1353 0
 4557 1610 10301BE5 		ldr	r3, [fp, #-16]
 4558 1614 000053E3 		cmp	r3, #0
 4559 1618 1200000A 		beq	.L126
1354:../os_core/os_core.c ****             usage = (INT8S)(100L - run / max);
 4560              		.loc 1 1354 0
 4561 161c 14001BE5 		ldr	r0, [fp, #-20]
 4562 1620 10101BE5 		ldr	r1, [fp, #-16]
 4563 1624 FEFFFFEB 		bl	__aeabi_uidiv
 4564 1628 0030A0E1 		mov	r3, r0
 4565 162c FF3003E2 		and	r3, r3, #255
 4566 1630 643063E2 		rsb	r3, r3, #100
 4567 1634 FF3003E2 		and	r3, r3, #255
 4568 1638 15304BE5 		strb	r3, [fp, #-21]
1355:../os_core/os_core.c ****             if (usage >= 0) {                    /* Make sure we don't have a negative percentage  
 4569              		.loc 1 1355 0
 4570 163c D5315BE1 		ldrsb	r3, [fp, #-21]
 4571 1640 000053E3 		cmp	r3, #0
 4572 1644 030000BA 		blt	.L127
1356:../os_core/os_core.c ****                 OSCPUUsage = usage;
 4573              		.loc 1 1356 0
 4574 1648 64309FE5 		ldr	r3, .L130+20
 4575 164c 15205BE5 		ldrb	r2, [fp, #-21]
 4576 1650 0020C3E5 		strb	r2, [r3, #0]
 4577 1654 0C0000EA 		b	.L128
 4578              	.L127:
1357:../os_core/os_core.c ****             } else {
1358:../os_core/os_core.c ****                 OSCPUUsage = 0;
 4579              		.loc 1 1358 0
 4580 1658 54309FE5 		ldr	r3, .L130+20
 4581 165c 0020A0E3 		mov	r2, #0
 4582 1660 0020C3E5 		strb	r2, [r3, #0]
 4583 1664 080000EA 		b	.L128
 4584              	.L126:
1359:../os_core/os_core.c ****             }
1360:../os_core/os_core.c ****         } else {
1361:../os_core/os_core.c ****             OSCPUUsage = 0;
 4585              		.loc 1 1361 0
 4586 1668 44309FE5 		ldr	r3, .L130+20
 4587 166c 0020A0E3 		mov	r2, #0
 4588 1670 0020C3E5 		strb	r2, [r3, #0]
1362:../os_core/os_core.c ****             max        = OSIdleCtrMax / 100L;
 4589              		.loc 1 1362 0
 4590 1674 28309FE5 		ldr	r3, .L130+4
 4591 1678 002093E5 		ldr	r2, [r3, #0]
 4592 167c 24309FE5 		ldr	r3, .L130+8
 4593 1680 921383E0 		umull	r1, r3, r2, r3
 4594 1684 A332A0E1 		mov	r3, r3, lsr #5
 4595 1688 10300BE5 		str	r3, [fp, #-16]
 4596              	.L128:
1363:../os_core/os_core.c ****         }
1364:../os_core/os_core.c ****         OSTaskStatHook();                        /* Invoke user definable hook                     
 4597              		.loc 1 1364 0
 4598 168c FEFFFFEB 		bl	OSTaskStatHook
1365:../os_core/os_core.c **** #if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
1366:../os_core/os_core.c ****         OS_TaskStatStkChk();                     /* Check the stacks for each task                 
 4599              		.loc 1 1366 0
 4600 1690 FEFFFFEB 		bl	OS_TaskStatStkChk
1367:../os_core/os_core.c **** #endif
1368:../os_core/os_core.c ****         OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second  
 4601              		.loc 1 1368 0
 4602 1694 0A00A0E3 		mov	r0, #10
 4603 1698 FEFFFFEB 		bl	OSTimeDly
1369:../os_core/os_core.c ****     }
 4604              		.loc 1 1369 0
 4605 169c CBFFFFEA 		b	.L129
 4606              	.L131:
 4607              		.align	2
 4608              	.L130:
 4609 16a0 00000000 		.word	OSStatRdy
 4610 16a4 00000000 		.word	OSIdleCtrMax
 4611 16a8 1F85EB51 		.word	1374389535
 4612 16ac 00000000 		.word	OSIdleCtr
 4613 16b0 00000000 		.word	OSIdleCtrRun
 4614 16b4 00000000 		.word	OSCPUUsage
 4615              		.cfi_endproc
 4616              	.LFE28:
 4618              		.align	2
 4619              		.global	OS_TaskStatStkChk
 4621              	OS_TaskStatStkChk:
 4622              	.LFB29:
1370:../os_core/os_core.c **** }
1371:../os_core/os_core.c **** #endif
1372:../os_core/os_core.c **** /*$PAGE*/
1373:../os_core/os_core.c **** /*
1374:../os_core/os_core.c **** ***************************************************************************************************
1375:../os_core/os_core.c **** *                                      CHECK ALL TASK STACKS
1376:../os_core/os_core.c **** *
1377:../os_core/os_core.c **** * Description: This function is called by OS_TaskStat() to check the stacks of each active task.
1378:../os_core/os_core.c **** *
1379:../os_core/os_core.c **** * Arguments  : none
1380:../os_core/os_core.c **** *
1381:../os_core/os_core.c **** * Returns    : none
1382:../os_core/os_core.c **** ***************************************************************************************************
1383:../os_core/os_core.c **** */
1384:../os_core/os_core.c **** 
1385:../os_core/os_core.c **** #if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
1386:../os_core/os_core.c **** void  OS_TaskStatStkChk (void)
1387:../os_core/os_core.c **** {
 4623              		.loc 1 1387 0
 4624              		.cfi_startproc
 4625              		@ Function supports interworking.
 4626              		@ args = 0, pretend = 0, frame = 16
 4627              		@ frame_needed = 1, uses_anonymous_args = 0
 4628 16b8 0DC0A0E1 		mov	ip, sp
 4629              	.LCFI58:
 4630              		.cfi_def_cfa_register 12
 4631 16bc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4632 16c0 04B04CE2 		sub	fp, ip, #4
 4633              		.cfi_offset 14, -8
 4634              		.cfi_offset 13, -12
 4635              		.cfi_offset 11, -16
 4636              	.LCFI59:
 4637              		.cfi_def_cfa 11, 4
 4638 16c4 10D04DE2 		sub	sp, sp, #16
1388:../os_core/os_core.c ****     OS_TCB      *ptcb;
1389:../os_core/os_core.c ****     OS_STK_DATA  stk_data;
1390:../os_core/os_core.c ****     INT8U        err;
1391:../os_core/os_core.c ****     INT8U        prio;
1392:../os_core/os_core.c **** 
1393:../os_core/os_core.c **** 
1394:../os_core/os_core.c ****     for (prio = 0; prio <= OS_IDLE_PRIO; prio++) {
 4639              		.loc 1 1394 0
 4640 16c8 0030A0E3 		mov	r3, #0
 4641 16cc 0D304BE5 		strb	r3, [fp, #-13]
 4642 16d0 210000EA 		b	.L133
 4643              	.L135:
1395:../os_core/os_core.c ****         err = OSTaskStkChk(prio, &stk_data);
 4644              		.loc 1 1395 0
 4645 16d4 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 4646 16d8 1C304BE2 		sub	r3, fp, #28
 4647 16dc 0200A0E1 		mov	r0, r2
 4648 16e0 0310A0E1 		mov	r1, r3
 4649 16e4 FEFFFFEB 		bl	OSTaskStkChk
 4650 16e8 0030A0E1 		mov	r3, r0
 4651 16ec 0E304BE5 		strb	r3, [fp, #-14]
1396:../os_core/os_core.c ****         if (err == OS_NO_ERR) {
 4652              		.loc 1 1396 0
 4653 16f0 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 4654 16f4 000053E3 		cmp	r3, #0
 4655 16f8 1400001A 		bne	.L134
1397:../os_core/os_core.c ****             ptcb = OSTCBPrioTbl[prio];
 4656              		.loc 1 1397 0
 4657 16fc 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 4658 1700 6C309FE5 		ldr	r3, .L136
 4659 1704 023193E7 		ldr	r3, [r3, r2, asl #2]
 4660 1708 14300BE5 		str	r3, [fp, #-20]
1398:../os_core/os_core.c ****             if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ..
 4661              		.loc 1 1398 0
 4662 170c 14301BE5 		ldr	r3, [fp, #-20]
 4663 1710 000053E3 		cmp	r3, #0
 4664 1714 0D00000A 		beq	.L134
1399:../os_core/os_core.c ****                 if (ptcb != (OS_TCB *)1) {                           /* ... still valid.           
 4665              		.loc 1 1399 0
 4666 1718 14301BE5 		ldr	r3, [fp, #-20]
 4667 171c 010053E3 		cmp	r3, #1
 4668 1720 0A00000A 		beq	.L134
1400:../os_core/os_core.c **** #if OS_TASK_PROFILE_EN > 0
1401:../os_core/os_core.c ****                     #if OS_STK_GROWTH == 1
1402:../os_core/os_core.c ****                     ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 4669              		.loc 1 1402 0
 4670 1724 14301BE5 		ldr	r3, [fp, #-20]
 4671 1728 082093E5 		ldr	r2, [r3, #8]
 4672 172c 14301BE5 		ldr	r3, [fp, #-20]
 4673 1730 0C3093E5 		ldr	r3, [r3, #12]
 4674 1734 0331A0E1 		mov	r3, r3, asl #2
 4675 1738 032082E0 		add	r2, r2, r3
 4676 173c 14301BE5 		ldr	r3, [fp, #-20]
 4677 1740 402083E5 		str	r2, [r3, #64]
1403:../os_core/os_core.c ****                     #else
1404:../os_core/os_core.c ****                     ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
1405:../os_core/os_core.c ****                     #endif
1406:../os_core/os_core.c ****                     ptcb->OSTCBStkUsed = (INT32U)stk_data.OSUsed;    /* Store the number of bytes u
 4678              		.loc 1 1406 0
 4679 1744 18201BE5 		ldr	r2, [fp, #-24]
 4680 1748 14301BE5 		ldr	r3, [fp, #-20]
 4681 174c 442083E5 		str	r2, [r3, #68]
 4682              	.L134:
1394:../os_core/os_core.c ****     for (prio = 0; prio <= OS_IDLE_PRIO; prio++) {
 4683              		.loc 1 1394 0
 4684 1750 0D305BE5 		ldrb	r3, [fp, #-13]
 4685 1754 013083E2 		add	r3, r3, #1
 4686 1758 0D304BE5 		strb	r3, [fp, #-13]
 4687              	.L133:
1394:../os_core/os_core.c ****     for (prio = 0; prio <= OS_IDLE_PRIO; prio++) {
 4688              		.loc 1 1394 0 is_stmt 0 discriminator 1
 4689 175c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 4690 1760 3F0053E3 		cmp	r3, #63
 4691 1764 DAFFFF9A 		bls	.L135
1407:../os_core/os_core.c **** #endif
1408:../os_core/os_core.c ****                 }
1409:../os_core/os_core.c ****             }
1410:../os_core/os_core.c ****         }
1411:../os_core/os_core.c ****     }
1412:../os_core/os_core.c **** }
 4692              		.loc 1 1412 0 is_stmt 1
 4693 1768 0CD04BE2 		sub	sp, fp, #12
 4694 176c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4695 1770 1EFF2FE1 		bx	lr
 4696              	.L137:
 4697              		.align	2
 4698              	.L136:
 4699 1774 00000000 		.word	OSTCBPrioTbl
 4700              		.cfi_endproc
 4701              	.LFE29:
 4703              		.align	2
 4704              		.global	OS_TCBInit
 4706              	OS_TCBInit:
 4707              	.LFB30:
1413:../os_core/os_core.c **** #endif
1414:../os_core/os_core.c **** /*$PAGE*/
1415:../os_core/os_core.c **** /*
1416:../os_core/os_core.c **** ***************************************************************************************************
1417:../os_core/os_core.c **** *                                            INITIALIZE TCB
1418:../os_core/os_core.c **** *
1419:../os_core/os_core.c **** * Description: This function is internal to uC/OS-II and is used to initialize a Task Control Block
1420:../os_core/os_core.c **** *              a task is created (see OSTaskCreate() and OSTaskCreateExt()).
1421:../os_core/os_core.c **** *
1422:../os_core/os_core.c **** * Arguments  : prio          is the priority of the task being created
1423:../os_core/os_core.c **** *
1424:../os_core/os_core.c **** *              ptos          is a pointer to the task's top-of-stack assuming that the CPU register
1425:../os_core/os_core.c **** *                            have been placed on the stack.  Note that the top-of-stack corresponds
1426:../os_core/os_core.c **** *                            'high' memory location is OS_STK_GROWTH is set to 1 and a 'low' memory
1427:../os_core/os_core.c **** *                            location if OS_STK_GROWTH is set to 0.  Note that stack growth is CPU
1428:../os_core/os_core.c **** *                            specific.
1429:../os_core/os_core.c **** *
1430:../os_core/os_core.c **** *              pbos          is a pointer to the bottom of stack.  A NULL pointer is passed if call
1431:../os_core/os_core.c **** *                            'OSTaskCreate()'.
1432:../os_core/os_core.c **** *
1433:../os_core/os_core.c **** *              id            is the task's ID (0..65535)
1434:../os_core/os_core.c **** *
1435:../os_core/os_core.c **** *              stk_size      is the size of the stack (in 'stack units').  If the stack units are I
1436:../os_core/os_core.c **** *                            then, 'stk_size' contains the number of bytes for the stack.  If the s
1437:../os_core/os_core.c **** *                            units are INT32Us then, the stack contains '4 * stk_size' bytes.  The 
1438:../os_core/os_core.c **** *                            units are established by the #define constant OS_STK which is CPU
1439:../os_core/os_core.c **** *                            specific.  'stk_size' is 0 if called by 'OSTaskCreate()'.
1440:../os_core/os_core.c **** *
1441:../os_core/os_core.c **** *              pext          is a pointer to a user supplied memory area that is used to extend the
1442:../os_core/os_core.c **** *                            control block.  This allows you to store the contents of floating-poin
1443:../os_core/os_core.c **** *                            registers, MMU registers or anything else you could find useful during
1444:../os_core/os_core.c **** *                            context switch.  You can even assign a name to each task and store thi
1445:../os_core/os_core.c **** *                            in this TCB extension.  A NULL pointer is passed if called by OSTaskCr
1446:../os_core/os_core.c **** *
1447:../os_core/os_core.c **** *              opt           options as passed to 'OSTaskCreateExt()' or,
1448:../os_core/os_core.c **** *                            0 if called from 'OSTaskCreate()'.
1449:../os_core/os_core.c **** *
1450:../os_core/os_core.c **** * Returns    : OS_NO_ERR         if the call was successful
1451:../os_core/os_core.c **** *              OS_NO_MORE_TCB    if there are no more free TCBs to be allocated and thus, the task 
1452:../os_core/os_core.c **** *                                be created.
1453:../os_core/os_core.c **** *
1454:../os_core/os_core.c **** * Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
1455:../os_core/os_core.c **** ***************************************************************************************************
1456:../os_core/os_core.c **** */
1457:../os_core/os_core.c **** 
1458:../os_core/os_core.c **** INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, 
1459:../os_core/os_core.c **** {
 4708              		.loc 1 1459 0
 4709              		.cfi_startproc
 4710              		@ Function supports interworking.
 4711              		@ args = 12, pretend = 0, frame = 24
 4712              		@ frame_needed = 1, uses_anonymous_args = 0
 4713 1778 0DC0A0E1 		mov	ip, sp
 4714              	.LCFI60:
 4715              		.cfi_def_cfa_register 12
 4716 177c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4717 1780 04B04CE2 		sub	fp, ip, #4
 4718              		.cfi_offset 14, -8
 4719              		.cfi_offset 13, -12
 4720              		.cfi_offset 11, -16
 4721              	.LCFI61:
 4722              		.cfi_def_cfa 11, 4
 4723 1784 18D04DE2 		sub	sp, sp, #24
 4724 1788 1C100BE5 		str	r1, [fp, #-28]
 4725 178c 20200BE5 		str	r2, [fp, #-32]
 4726 1790 0020A0E1 		mov	r2, r0
 4727 1794 15204BE5 		strb	r2, [fp, #-21]
 4728 1798 B2324BE1 		strh	r3, [fp, #-34]	@ movhi
1460:../os_core/os_core.c ****     OS_TCB    *ptcb;
1461:../os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status regis
1462:../os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
1463:../os_core/os_core.c **** 
1464:../os_core/os_core.c **** 
1465:../os_core/os_core.c **** 
1466:../os_core/os_core.c ****     cpu_sr = 0;                                            /* Prevent compiler warning             
1467:../os_core/os_core.c **** #endif    
1468:../os_core/os_core.c ****     OS_ENTER_CRITICAL();
 4729              		.loc 1 1468 0
 4730              	@ 1468 "../os_core/os_core.c" 1
 4731 179c 00000FE1 		mrs   r0, cpsr
 4732              	@ 0 "" 2
 4733              	@ 1468 "../os_core/os_core.c" 1
 4734 17a0 04002DE5 		stmfd sp!, {r0}
 4735              	@ 0 "" 2
 4736              	@ 1468 "../os_core/os_core.c" 1
 4737 17a4 C00080E3 		orr   r0, r0, #0b11000000
 4738              	@ 0 "" 2
 4739              	@ 1468 "../os_core/os_core.c" 1
 4740 17a8 00F021E1 		msr   cpsr_c, r0
 4741              	@ 0 "" 2
1469:../os_core/os_core.c ****     ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list
 4742              		.loc 1 1469 0
 4743 17ac 88329FE5 		ldr	r3, .L142
 4744 17b0 003093E5 		ldr	r3, [r3, #0]
 4745 17b4 10300BE5 		str	r3, [fp, #-16]
1470:../os_core/os_core.c ****     if (ptcb != (OS_TCB *)0) {
 4746              		.loc 1 1470 0
 4747 17b8 10301BE5 		ldr	r3, [fp, #-16]
 4748 17bc 000053E3 		cmp	r3, #0
 4749 17c0 9600000A 		beq	.L139
1471:../os_core/os_core.c ****         OSTCBFreeList        = ptcb->OSTCBNext;            /* Update pointer to free TCB list      
 4750              		.loc 1 1471 0
 4751 17c4 10301BE5 		ldr	r3, [fp, #-16]
 4752 17c8 142093E5 		ldr	r2, [r3, #20]
 4753 17cc 68329FE5 		ldr	r3, .L142
 4754 17d0 002083E5 		str	r2, [r3, #0]
1472:../os_core/os_core.c ****         OS_EXIT_CRITICAL();
 4755              		.loc 1 1472 0
 4756              	@ 1472 "../os_core/os_core.c" 1
 4757 17d4 04009DE4 		ldmfd sp!, {r0}
 4758              	@ 0 "" 2
 4759              	@ 1472 "../os_core/os_core.c" 1
 4760 17d8 00F021E1 		msr   cpsr_c, r0
 4761              	@ 0 "" 2
1473:../os_core/os_core.c ****         ptcb->OSTCBStkPtr    = ptos;                       /* Load Stack pointer in TCB            
 4762              		.loc 1 1473 0
 4763 17dc 10301BE5 		ldr	r3, [fp, #-16]
 4764 17e0 1C201BE5 		ldr	r2, [fp, #-28]
 4765 17e4 002083E5 		str	r2, [r3, #0]
1474:../os_core/os_core.c ****         ptcb->OSTCBPrio      = prio;                       /* Load task priority into TCB          
 4766              		.loc 1 1474 0
 4767 17e8 10301BE5 		ldr	r3, [fp, #-16]
 4768 17ec 15205BE5 		ldrb	r2, [fp, #-21]
 4769 17f0 2E20C3E5 		strb	r2, [r3, #46]
1475:../os_core/os_core.c ****         ptcb->OSTCBStat      = OS_STAT_RDY;                /* Task is ready to run                 
 4770              		.loc 1 1475 0
 4771 17f4 10301BE5 		ldr	r3, [fp, #-16]
 4772 17f8 0020A0E3 		mov	r2, #0
 4773 17fc 2C20C3E5 		strb	r2, [r3, #44]
1476:../os_core/os_core.c ****         ptcb->OSTCBPendTO    = FALSE;                      /* Clear the Pend timeout flag          
 4774              		.loc 1 1476 0
 4775 1800 10301BE5 		ldr	r3, [fp, #-16]
 4776 1804 0020A0E3 		mov	r2, #0
 4777 1808 2D20C3E5 		strb	r2, [r3, #45]
1477:../os_core/os_core.c ****         ptcb->OSTCBDly       = 0;                          /* Task is not delayed                  
 4778              		.loc 1 1477 0
 4779 180c 10301BE5 		ldr	r3, [fp, #-16]
 4780 1810 0020A0E3 		mov	r2, #0
 4781 1814 BA22C3E1 		strh	r2, [r3, #42]	@ movhi
1478:../os_core/os_core.c **** 
1479:../os_core/os_core.c **** #if OS_TASK_CREATE_EXT_EN > 0
1480:../os_core/os_core.c ****         ptcb->OSTCBExtPtr    = pext;                       /* Store pointer to TCB extension       
 4782              		.loc 1 1480 0
 4783 1818 10301BE5 		ldr	r3, [fp, #-16]
 4784 181c 08209BE5 		ldr	r2, [fp, #8]
 4785 1820 042083E5 		str	r2, [r3, #4]
1481:../os_core/os_core.c ****         ptcb->OSTCBStkSize   = stk_size;                   /* Store stack size                     
 4786              		.loc 1 1481 0
 4787 1824 10301BE5 		ldr	r3, [fp, #-16]
 4788 1828 04209BE5 		ldr	r2, [fp, #4]
 4789 182c 0C2083E5 		str	r2, [r3, #12]
1482:../os_core/os_core.c ****         ptcb->OSTCBStkBottom = pbos;                       /* Store pointer to bottom of stack     
 4790              		.loc 1 1482 0
 4791 1830 10301BE5 		ldr	r3, [fp, #-16]
 4792 1834 20201BE5 		ldr	r2, [fp, #-32]
 4793 1838 082083E5 		str	r2, [r3, #8]
1483:../os_core/os_core.c ****         ptcb->OSTCBOpt       = opt;                        /* Store task options                   
 4794              		.loc 1 1483 0
 4795 183c 10301BE5 		ldr	r3, [fp, #-16]
 4796 1840 BC20DBE1 		ldrh	r2, [fp, #12]	@ movhi
 4797 1844 B021C3E1 		strh	r2, [r3, #16]	@ movhi
1484:../os_core/os_core.c ****         ptcb->OSTCBId        = id;                         /* Store task ID                        
 4798              		.loc 1 1484 0
 4799 1848 10301BE5 		ldr	r3, [fp, #-16]
 4800 184c B2225BE1 		ldrh	r2, [fp, #-34]	@ movhi
 4801 1850 B221C3E1 		strh	r2, [r3, #18]	@ movhi
1485:../os_core/os_core.c **** #else
1486:../os_core/os_core.c ****         pext                 = pext;                       /* Prevent compiler warning if not used 
1487:../os_core/os_core.c ****         stk_size             = stk_size;
1488:../os_core/os_core.c ****         pbos                 = pbos;
1489:../os_core/os_core.c ****         opt                  = opt;
1490:../os_core/os_core.c ****         id                   = id;
1491:../os_core/os_core.c **** #endif
1492:../os_core/os_core.c **** 
1493:../os_core/os_core.c **** #if OS_TASK_DEL_EN > 0
1494:../os_core/os_core.c ****         ptcb->OSTCBDelReq    = OS_NO_ERR;
 4802              		.loc 1 1494 0
 4803 1854 10301BE5 		ldr	r3, [fp, #-16]
 4804 1858 0020A0E3 		mov	r2, #0
 4805 185c 3320C3E5 		strb	r2, [r3, #51]
1495:../os_core/os_core.c **** #endif
1496:../os_core/os_core.c **** 
1497:../os_core/os_core.c ****         ptcb->OSTCBY         = (INT8U)(prio >> 3);         /* Pre-compute X, Y, BitX and BitY      
 4806              		.loc 1 1497 0
 4807 1860 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 4808 1864 A331A0E1 		mov	r3, r3, lsr #3
 4809 1868 FF2003E2 		and	r2, r3, #255
 4810 186c 10301BE5 		ldr	r3, [fp, #-16]
 4811 1870 3020C3E5 		strb	r2, [r3, #48]
1498:../os_core/os_core.c ****         ptcb->OSTCBBitY      = OSMapTbl[ptcb->OSTCBY];
 4812              		.loc 1 1498 0
 4813 1874 10301BE5 		ldr	r3, [fp, #-16]
 4814 1878 3030D3E5 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 4815 187c BC219FE5 		ldr	r2, .L142+4
 4816 1880 0320D2E7 		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 4817 1884 10301BE5 		ldr	r3, [fp, #-16]
 4818 1888 3220C3E5 		strb	r2, [r3, #50]
1499:../os_core/os_core.c ****         ptcb->OSTCBX         = (INT8U)(prio & 0x07);
 4819              		.loc 1 1499 0
 4820 188c 15305BE5 		ldrb	r3, [fp, #-21]
 4821 1890 073003E2 		and	r3, r3, #7
 4822 1894 FF2003E2 		and	r2, r3, #255
 4823 1898 10301BE5 		ldr	r3, [fp, #-16]
 4824 189c 2F20C3E5 		strb	r2, [r3, #47]
1500:../os_core/os_core.c ****         ptcb->OSTCBBitX      = OSMapTbl[ptcb->OSTCBX];
 4825              		.loc 1 1500 0
 4826 18a0 10301BE5 		ldr	r3, [fp, #-16]
 4827 18a4 2F30D3E5 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 4828 18a8 90219FE5 		ldr	r2, .L142+4
 4829 18ac 0320D2E7 		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 4830 18b0 10301BE5 		ldr	r3, [fp, #-16]
 4831 18b4 3120C3E5 		strb	r2, [r3, #49]
1501:../os_core/os_core.c **** 
1502:../os_core/os_core.c **** #if OS_EVENT_EN
1503:../os_core/os_core.c ****         ptcb->OSTCBEventPtr  = (OS_EVENT *)0;              /* Task is not pending on an event      
 4832              		.loc 1 1503 0
 4833 18b8 10301BE5 		ldr	r3, [fp, #-16]
 4834 18bc 0020A0E3 		mov	r2, #0
 4835 18c0 1C2083E5 		str	r2, [r3, #28]
1504:../os_core/os_core.c **** #endif
1505:../os_core/os_core.c **** 
1506:../os_core/os_core.c **** #if (OS_VERSION >= 251) && (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
1507:../os_core/os_core.c ****         ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag 
 4836              		.loc 1 1507 0
 4837 18c4 10301BE5 		ldr	r3, [fp, #-16]
 4838 18c8 0020A0E3 		mov	r2, #0
 4839 18cc 242083E5 		str	r2, [r3, #36]
1508:../os_core/os_core.c **** #endif
1509:../os_core/os_core.c **** 
1510:../os_core/os_core.c **** #if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
1511:../os_core/os_core.c ****         ptcb->OSTCBMsg       = (void *)0;                  /* No message received                  
 4840              		.loc 1 1511 0
 4841 18d0 10301BE5 		ldr	r3, [fp, #-16]
 4842 18d4 0020A0E3 		mov	r2, #0
 4843 18d8 202083E5 		str	r2, [r3, #32]
1512:../os_core/os_core.c **** #endif
1513:../os_core/os_core.c **** 
1514:../os_core/os_core.c **** #if OS_TASK_PROFILE_EN > 0
1515:../os_core/os_core.c ****         ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables       
 4844              		.loc 1 1515 0
 4845 18dc 10301BE5 		ldr	r3, [fp, #-16]
 4846 18e0 0020A0E3 		mov	r2, #0
 4847 18e4 342083E5 		str	r2, [r3, #52]
1516:../os_core/os_core.c ****         ptcb->OSTCBCyclesStart = 0L;
 4848              		.loc 1 1516 0
 4849 18e8 10301BE5 		ldr	r3, [fp, #-16]
 4850 18ec 0020A0E3 		mov	r2, #0
 4851 18f0 3C2083E5 		str	r2, [r3, #60]
1517:../os_core/os_core.c ****         ptcb->OSTCBCyclesTot   = 0L;
 4852              		.loc 1 1517 0
 4853 18f4 10301BE5 		ldr	r3, [fp, #-16]
 4854 18f8 0020A0E3 		mov	r2, #0
 4855 18fc 382083E5 		str	r2, [r3, #56]
1518:../os_core/os_core.c ****         ptcb->OSTCBStkBase     = (OS_STK *)0;
 4856              		.loc 1 1518 0
 4857 1900 10301BE5 		ldr	r3, [fp, #-16]
 4858 1904 0020A0E3 		mov	r2, #0
 4859 1908 402083E5 		str	r2, [r3, #64]
1519:../os_core/os_core.c ****         ptcb->OSTCBStkUsed     = 0L;
 4860              		.loc 1 1519 0
 4861 190c 10301BE5 		ldr	r3, [fp, #-16]
 4862 1910 0020A0E3 		mov	r2, #0
 4863 1914 442083E5 		str	r2, [r3, #68]
1520:../os_core/os_core.c **** #endif
1521:../os_core/os_core.c **** 
1522:../os_core/os_core.c **** #if OS_TASK_NAME_SIZE > 1
1523:../os_core/os_core.c ****         ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation        
 4864              		.loc 1 1523 0
 4865 1918 10301BE5 		ldr	r3, [fp, #-16]
 4866 191c 3F20A0E3 		mov	r2, #63
 4867 1920 4820C3E5 		strb	r2, [r3, #72]
1524:../os_core/os_core.c ****         ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 4868              		.loc 1 1524 0
 4869 1924 10301BE5 		ldr	r3, [fp, #-16]
 4870 1928 0020A0E3 		mov	r2, #0
 4871 192c 4920C3E5 		strb	r2, [r3, #73]
1525:../os_core/os_core.c **** #endif
1526:../os_core/os_core.c **** 
1527:../os_core/os_core.c **** #if OS_VERSION >= 204
1528:../os_core/os_core.c ****         OSTCBInitHook(ptcb);
 4872              		.loc 1 1528 0
 4873 1930 10001BE5 		ldr	r0, [fp, #-16]
 4874 1934 FEFFFFEB 		bl	OSTCBInitHook
1529:../os_core/os_core.c **** #endif
1530:../os_core/os_core.c **** 
1531:../os_core/os_core.c ****         OSTaskCreateHook(ptcb);                            /* Call user defined hook               
 4875              		.loc 1 1531 0
 4876 1938 10001BE5 		ldr	r0, [fp, #-16]
 4877 193c FEFFFFEB 		bl	OSTaskCreateHook
1532:../os_core/os_core.c ****         
1533:../os_core/os_core.c ****         OS_ENTER_CRITICAL();
 4878              		.loc 1 1533 0
 4879              	@ 1533 "../os_core/os_core.c" 1
 4880 1940 00000FE1 		mrs   r0, cpsr
 4881              	@ 0 "" 2
 4882              	@ 1533 "../os_core/os_core.c" 1
 4883 1944 04002DE5 		stmfd sp!, {r0}
 4884              	@ 0 "" 2
 4885              	@ 1533 "../os_core/os_core.c" 1
 4886 1948 C00080E3 		orr   r0, r0, #0b11000000
 4887              	@ 0 "" 2
 4888              	@ 1533 "../os_core/os_core.c" 1
 4889 194c 00F021E1 		msr   cpsr_c, r0
 4890              	@ 0 "" 2
1534:../os_core/os_core.c ****         OSTCBPrioTbl[prio] = ptcb;
 4891              		.loc 1 1534 0
 4892 1950 15205BE5 		ldrb	r2, [fp, #-21]	@ zero_extendqisi2
 4893 1954 E8309FE5 		ldr	r3, .L142+8
 4894 1958 10101BE5 		ldr	r1, [fp, #-16]
 4895 195c 021183E7 		str	r1, [r3, r2, asl #2]
1535:../os_core/os_core.c ****         ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                  
 4896              		.loc 1 1535 0
 4897 1960 E0309FE5 		ldr	r3, .L142+12
 4898 1964 002093E5 		ldr	r2, [r3, #0]
 4899 1968 10301BE5 		ldr	r3, [fp, #-16]
 4900 196c 142083E5 		str	r2, [r3, #20]
1536:../os_core/os_core.c ****         ptcb->OSTCBPrev    = (OS_TCB *)0;
 4901              		.loc 1 1536 0
 4902 1970 10301BE5 		ldr	r3, [fp, #-16]
 4903 1974 0020A0E3 		mov	r2, #0
 4904 1978 182083E5 		str	r2, [r3, #24]
1537:../os_core/os_core.c ****         if (OSTCBList != (OS_TCB *)0) {
 4905              		.loc 1 1537 0
 4906 197c C4309FE5 		ldr	r3, .L142+12
 4907 1980 003093E5 		ldr	r3, [r3, #0]
 4908 1984 000053E3 		cmp	r3, #0
 4909 1988 0300000A 		beq	.L140
1538:../os_core/os_core.c ****             OSTCBList->OSTCBPrev = ptcb;
 4910              		.loc 1 1538 0
 4911 198c B4309FE5 		ldr	r3, .L142+12
 4912 1990 003093E5 		ldr	r3, [r3, #0]
 4913 1994 10201BE5 		ldr	r2, [fp, #-16]
 4914 1998 182083E5 		str	r2, [r3, #24]
 4915              	.L140:
1539:../os_core/os_core.c ****         }
1540:../os_core/os_core.c ****         OSTCBList               = ptcb;
 4916              		.loc 1 1540 0
 4917 199c A4309FE5 		ldr	r3, .L142+12
 4918 19a0 10201BE5 		ldr	r2, [fp, #-16]
 4919 19a4 002083E5 		str	r2, [r3, #0]
1541:../os_core/os_core.c ****         OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run               
 4920              		.loc 1 1541 0
 4921 19a8 10301BE5 		ldr	r3, [fp, #-16]
 4922 19ac 3220D3E5 		ldrb	r2, [r3, #50]	@ zero_extendqisi2
 4923 19b0 94309FE5 		ldr	r3, .L142+16
 4924 19b4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4925 19b8 033082E1 		orr	r3, r2, r3
 4926 19bc FF2003E2 		and	r2, r3, #255
 4927 19c0 84309FE5 		ldr	r3, .L142+16
 4928 19c4 0020C3E5 		strb	r2, [r3, #0]
1542:../os_core/os_core.c ****         OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4929              		.loc 1 1542 0
 4930 19c8 10301BE5 		ldr	r3, [fp, #-16]
 4931 19cc 3030D3E5 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 4932 19d0 10201BE5 		ldr	r2, [fp, #-16]
 4933 19d4 3020D2E5 		ldrb	r2, [r2, #48]	@ zero_extendqisi2
 4934 19d8 70109FE5 		ldr	r1, .L142+20
 4935 19dc 0210D1E7 		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 4936 19e0 10201BE5 		ldr	r2, [fp, #-16]
 4937 19e4 3120D2E5 		ldrb	r2, [r2, #49]	@ zero_extendqisi2
 4938 19e8 022081E1 		orr	r2, r1, r2
 4939 19ec FF1002E2 		and	r1, r2, #255
 4940 19f0 58209FE5 		ldr	r2, .L142+20
 4941 19f4 0310C2E7 		strb	r1, [r2, r3]
1543:../os_core/os_core.c ****         OSTaskCtr++;                                       /* Increment the #tasks counter         
 4942              		.loc 1 1543 0
 4943 19f8 54309FE5 		ldr	r3, .L142+24
 4944 19fc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4945 1a00 013083E2 		add	r3, r3, #1
 4946 1a04 FF2003E2 		and	r2, r3, #255
 4947 1a08 44309FE5 		ldr	r3, .L142+24
 4948 1a0c 0020C3E5 		strb	r2, [r3, #0]
1544:../os_core/os_core.c ****         OS_EXIT_CRITICAL();
 4949              		.loc 1 1544 0
 4950              	@ 1544 "../os_core/os_core.c" 1
 4951 1a10 04009DE4 		ldmfd sp!, {r0}
 4952              	@ 0 "" 2
 4953              	@ 1544 "../os_core/os_core.c" 1
 4954 1a14 00F021E1 		msr   cpsr_c, r0
 4955              	@ 0 "" 2
1545:../os_core/os_core.c ****         return (OS_NO_ERR);
 4956              		.loc 1 1545 0
 4957 1a18 0030A0E3 		mov	r3, #0
 4958 1a1c 020000EA 		b	.L141
 4959              	.L139:
1546:../os_core/os_core.c ****     }
1547:../os_core/os_core.c ****     OS_EXIT_CRITICAL();
 4960              		.loc 1 1547 0
 4961              	@ 1547 "../os_core/os_core.c" 1
 4962 1a20 04009DE4 		ldmfd sp!, {r0}
 4963              	@ 0 "" 2
 4964              	@ 1547 "../os_core/os_core.c" 1
 4965 1a24 00F021E1 		msr   cpsr_c, r0
 4966              	@ 0 "" 2
1548:../os_core/os_core.c ****     return (OS_NO_MORE_TCB);
 4967              		.loc 1 1548 0
 4968 1a28 4630A0E3 		mov	r3, #70
 4969              	.L141:
1549:../os_core/os_core.c **** }
 4970              		.loc 1 1549 0
 4971 1a2c 0300A0E1 		mov	r0, r3
 4972 1a30 0CD04BE2 		sub	sp, fp, #12
 4973 1a34 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4974 1a38 1EFF2FE1 		bx	lr
 4975              	.L143:
 4976              		.align	2
 4977              	.L142:
 4978 1a3c 00000000 		.word	OSTCBFreeList
 4979 1a40 00000000 		.word	OSMapTbl
 4980 1a44 00000000 		.word	OSTCBPrioTbl
 4981 1a48 00000000 		.word	OSTCBList
 4982 1a4c 00000000 		.word	OSRdyGrp
 4983 1a50 00000000 		.word	OSRdyTbl
 4984 1a54 00000000 		.word	OSTaskCtr
 4985              		.cfi_endproc
 4986              	.LFE30:
 4988              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 os_core.c
                            *COM*:00000004 OSCtxSwCtr
                            *COM*:00000004 OSEventFreeList
                            *COM*:000001e0 OSEventTbl
                            *COM*:000000dc OSFlagTbl
                            *COM*:00000004 OSFlagFreeList
                            *COM*:00000001 OSCPUUsage
                            *COM*:00000004 OSIdleCtrMax
                            *COM*:00000004 OSIdleCtrRun
                            *COM*:00000001 OSStatRdy
                            *COM*:00000800 OSTaskStatStk
                            *COM*:00000001 OSIntNesting
                            *COM*:00000001 OSLockNesting
                            *COM*:00000001 OSPrioCur
                            *COM*:00000001 OSPrioHighRdy
                            *COM*:00000001 OSRdyGrp
                            *COM*:00000008 OSRdyTbl
                            *COM*:00000001 OSRunning
                            *COM*:00000001 OSTaskCtr
                            *COM*:00000004 OSIdleCtr
                            *COM*:00000800 OSTaskIdleStk
                            *COM*:00000004 OSTCBCur
                            *COM*:00000004 OSTCBFreeList
                            *COM*:00000004 OSTCBHighRdy
                            *COM*:00000004 OSTCBList
                            *COM*:00000100 OSTCBPrioTbl
                            *COM*:000008f0 OSTCBTbl
                            *COM*:00000001 OSTickStepState
                            *COM*:00000004 OSMemFreeList
                            *COM*:00000104 OSMemTbl
                            *COM*:00000004 OSQFreeList
                            *COM*:00000060 OSQTbl
                            *COM*:00000004 OSTime
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:1701   .rodata:00000000 OSMapTbl
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:1698   .rodata:00000000 $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:1714   .rodata:00000008 OSUnMapTbl
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:1972   .text:00000000 $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:1975   .text:00000000 OSEventNameGet
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4307   .text:00001458 OS_StrCopy
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2101   .text:000000f0 OSEventNameSet
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4371   .text:000014e0 OS_StrLen
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2244   .text:000001fc OSInit
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3717   .text:00000f34 OS_InitMisc
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3796   .text:00000fec OS_InitRdyList
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3976   .text:00001170 OS_InitTCBList
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3615   .text:00000e44 OS_InitEventList
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3876   .text:000010a0 OS_InitTaskIdle
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3926   .text:00001108 OS_InitTaskStat
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2295   .text:00000244 OSIntEnter
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2337   .text:00000294 $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2342   .text:0000029c $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2345   .text:0000029c OSIntExit
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2468   .text:000003cc $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2482   .text:000003f8 $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2485   .text:000003f8 OSSchedLock
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2548   .text:00000460 $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2553   .text:00000468 $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2556   .text:00000468 OSSchedUnlock
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4187   .text:00001338 OS_Sched
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2657   .text:00000518 $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2663   .text:00000524 $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2666   .text:00000524 OSStart
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2739   .text:000005dc $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2751   .text:00000600 $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2754   .text:00000600 OSStatInit
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2837   .text:00000680 $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2843   .text:0000068c $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:2846   .text:0000068c OSTimeTick
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3063   .text:00000890 $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3072   .text:000008a8 $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3075   .text:000008a8 OSVersion
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3105   .text:000008c8 OS_Dummy
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3132   .text:000008e0 OS_EventTaskRdy
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3296   .text:00000ad8 $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3304   .text:00000aec $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3307   .text:00000aec OS_EventTaskWait
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3416   .text:00000c38 $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3422   .text:00000c44 $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3425   .text:00000c44 OS_EventTO
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3519   .text:00000d54 $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3523   .text:00000d58 $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3526   .text:00000d58 OS_EventWaitListInit
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4082   .text:0000126c OS_MemClr
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3709   .text:00000f28 $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3715   .text:00000f34 $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3781   .text:00000fc4 $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3794   .text:00000fec $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3865   .text:00001088 $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3874   .text:000010a0 $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3917   .text:000010f8 $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4423   .text:0000153c OS_TaskIdle
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3924   .text:00001108 $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3967   .text:00001160 $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4484   .text:00001588 OS_TaskStat
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:3974   .text:00001170 $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4071   .text:00001258 $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4079   .text:0000126c $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4132   .text:000012c8 OS_MemCopy
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4291   .text:00001430 $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4304   .text:00001458 $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4476   .text:00001584 $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4481   .text:00001588 $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4621   .text:000016b8 OS_TaskStatStkChk
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4609   .text:000016a0 $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4618   .text:000016b8 $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4699   .text:00001774 $d
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4703   .text:00001778 $a
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4706   .text:00001778 OS_TCBInit
C:\Users\VUser\AppData\Local\Temp\ccMZKvI6.s:4978   .text:00001a3c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
OSInitHookBegin
OS_FlagInit
OS_MemInit
OS_QInit
OSInitHookEnd
OSDebugInit
OSIntCtxSw
OSStartHighRdy
OSTimeDly
OSTimeTickHook
OSTaskCreateExt
OSCtxSw
OSTaskIdleHook
__aeabi_uidiv
OSTaskStatHook
OSTaskStkChk
OSTCBInitHook
OSTaskCreateHook
