   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"os_task.c"
  21              	.Ltext0:
  22              		.file 1 "../os_core/os_task.c"
 1662              		.align	2
 1663              		.global	OSTaskChangePrio
 1665              	OSTaskChangePrio:
 1666              	.LFB0:
   1:../os_core/os_task.c **** /*
   2:../os_core/os_task.c **** ***************************************************************************************************
   3:../os_core/os_task.c **** *                                                uC/OS-II
   4:../os_core/os_task.c **** *                                          The Real-Time Kernel
   5:../os_core/os_task.c **** *                                            TASK MANAGEMENT
   6:../os_core/os_task.c **** *
   7:../os_core/os_task.c **** *                          (c) Copyright 1992-2003, Jean J. Labrosse, Weston, FL
   8:../os_core/os_task.c **** *                                           All Rights Reserved
   9:../os_core/os_task.c **** *
  10:../os_core/os_task.c **** * File    : OS_TASK.C
  11:../os_core/os_task.c **** * By      : Jean J. Labrosse
  12:../os_core/os_task.c **** * Version : V2.76
  13:../os_core/os_task.c **** ***************************************************************************************************
  14:../os_core/os_task.c **** */
  15:../os_core/os_task.c **** 
  16:../os_core/os_task.c **** #ifndef  OS_MASTER_FILE
  17:../os_core/os_task.c **** #include "ucos_ii.h"
  18:../os_core/os_task.c **** #endif
  19:../os_core/os_task.c **** 
  20:../os_core/os_task.c **** /*
  21:../os_core/os_task.c **** ***************************************************************************************************
  22:../os_core/os_task.c **** *                                        CHANGE PRIORITY OF A TASK
  23:../os_core/os_task.c **** *
  24:../os_core/os_task.c **** * Description: This function allows you to change the priority of a task dynamically.  Note that th
  25:../os_core/os_task.c **** *              priority MUST be available.
  26:../os_core/os_task.c **** *
  27:../os_core/os_task.c **** * Arguments  : oldp     is the old priority
  28:../os_core/os_task.c **** *
  29:../os_core/os_task.c **** *              newp     is the new priority
  30:../os_core/os_task.c **** *
  31:../os_core/os_task.c **** * Returns    : OS_NO_ERR          is the call was successful
  32:../os_core/os_task.c **** *              OS_PRIO_INVALID    if the priority you specify is higher that the maximum allowed
  33:../os_core/os_task.c **** *                                 (i.e. >= OS_LOWEST_PRIO)
  34:../os_core/os_task.c **** *              OS_PRIO_EXIST      if the new priority already exist.
  35:../os_core/os_task.c **** *              OS_PRIO_ERR        there is no task with the specified OLD priority (i.e. the OLD ta
  36:../os_core/os_task.c **** *                                 not exist.
  37:../os_core/os_task.c **** *              OS_TASK_NOT_EXIST  if the task is assigned to a Mutex PIP.
  38:../os_core/os_task.c **** ***************************************************************************************************
  39:../os_core/os_task.c **** */
  40:../os_core/os_task.c **** 
  41:../os_core/os_task.c **** #if OS_TASK_CHANGE_PRIO_EN > 0
  42:../os_core/os_task.c **** INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
  43:../os_core/os_task.c **** {
 1667              		.loc 1 43 0
 1668              		.cfi_startproc
 1669              		@ Function supports interworking.
 1670              		@ args = 0, pretend = 0, frame = 24
 1671              		@ frame_needed = 1, uses_anonymous_args = 0
 1672 0000 0DC0A0E1 		mov	ip, sp
 1673              	.LCFI0:
 1674              		.cfi_def_cfa_register 12
 1675 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1676 0008 04B04CE2 		sub	fp, ip, #4
 1677              		.cfi_offset 14, -8
 1678              		.cfi_offset 13, -12
 1679              		.cfi_offset 11, -16
 1680              	.LCFI1:
 1681              		.cfi_def_cfa 11, 4
 1682 000c 18D04DE2 		sub	sp, sp, #24
 1683 0010 0020A0E1 		mov	r2, r0
 1684 0014 0130A0E1 		mov	r3, r1
 1685 0018 1D204BE5 		strb	r2, [fp, #-29]
 1686 001c 1E304BE5 		strb	r3, [fp, #-30]
  44:../os_core/os_task.c **** #if OS_EVENT_EN
  45:../os_core/os_task.c ****     OS_EVENT    *pevent;
  46:../os_core/os_task.c **** #endif
  47:../os_core/os_task.c ****     OS_TCB      *ptcb;
  48:../os_core/os_task.c ****     INT8U        x;
  49:../os_core/os_task.c ****     INT8U        y;
  50:../os_core/os_task.c ****     INT8U        bitx;
  51:../os_core/os_task.c ****     INT8U        bity;
  52:../os_core/os_task.c ****     INT8U        y_old;
  53:../os_core/os_task.c **** #if OS_CRITICAL_METHOD == 3                                     
  54:../os_core/os_task.c ****     OS_CPU_SR    cpu_sr;                                        /* Storage for CPU status register 
  55:../os_core/os_task.c **** 
  56:../os_core/os_task.c **** 
  57:../os_core/os_task.c **** 
  58:../os_core/os_task.c ****     cpu_sr = 0;                                                 /* Prevent compiler warning        
  59:../os_core/os_task.c **** #endif    
  60:../os_core/os_task.c **** #if OS_ARG_CHK_EN > 0
  61:../os_core/os_task.c ****     if (oldprio >= OS_LOWEST_PRIO) {
 1687              		.loc 1 61 0
 1688 0020 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 1689 0024 3E0053E3 		cmp	r3, #62
 1690 0028 0400009A 		bls	.L2
  62:../os_core/os_task.c **** 	    if (oldprio != OS_PRIO_SELF) {
 1691              		.loc 1 62 0
 1692 002c 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 1693 0030 FF0053E3 		cmp	r3, #255
 1694 0034 0100000A 		beq	.L2
  63:../os_core/os_task.c ****             return (OS_PRIO_INVALID);
 1695              		.loc 1 63 0
 1696 0038 2A30A0E3 		mov	r3, #42
 1697 003c D70000EA 		b	.L3
 1698              	.L2:
  64:../os_core/os_task.c **** 		}
  65:../os_core/os_task.c **** 	}
  66:../os_core/os_task.c ****     if (newprio >= OS_LOWEST_PRIO) {
 1699              		.loc 1 66 0
 1700 0040 1E305BE5 		ldrb	r3, [fp, #-30]	@ zero_extendqisi2
 1701 0044 3E0053E3 		cmp	r3, #62
 1702 0048 0100009A 		bls	.L4
  67:../os_core/os_task.c ****         return (OS_PRIO_INVALID);
 1703              		.loc 1 67 0
 1704 004c 2A30A0E3 		mov	r3, #42
 1705 0050 D20000EA 		b	.L3
 1706              	.L4:
  68:../os_core/os_task.c ****     }
  69:../os_core/os_task.c **** #endif
  70:../os_core/os_task.c ****     OS_ENTER_CRITICAL();
 1707              		.loc 1 70 0
 1708              	@ 70 "../os_core/os_task.c" 1
 1709 0054 00000FE1 		mrs   r0, cpsr
 1710              	@ 0 "" 2
 1711              	@ 70 "../os_core/os_task.c" 1
 1712 0058 04002DE5 		stmfd sp!, {r0}
 1713              	@ 0 "" 2
 1714              	@ 70 "../os_core/os_task.c" 1
 1715 005c C00080E3 		orr   r0, r0, #0b11000000
 1716              	@ 0 "" 2
 1717              	@ 70 "../os_core/os_task.c" 1
 1718 0060 00F021E1 		msr   cpsr_c, r0
 1719              	@ 0 "" 2
  71:../os_core/os_task.c ****     if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {                 /* New priority must not already ex
 1720              		.loc 1 71 0
 1721 0064 1E205BE5 		ldrb	r2, [fp, #-30]	@ zero_extendqisi2
 1722 0068 40339FE5 		ldr	r3, .L13
 1723 006c 023193E7 		ldr	r3, [r3, r2, asl #2]
 1724 0070 000053E3 		cmp	r3, #0
 1725 0074 0300000A 		beq	.L5
  72:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 1726              		.loc 1 72 0
 1727              	@ 72 "../os_core/os_task.c" 1
 1728 0078 04009DE4 		ldmfd sp!, {r0}
 1729              	@ 0 "" 2
 1730              	@ 72 "../os_core/os_task.c" 1
 1731 007c 00F021E1 		msr   cpsr_c, r0
 1732              	@ 0 "" 2
  73:../os_core/os_task.c ****         return (OS_PRIO_EXIST);
 1733              		.loc 1 73 0
 1734 0080 2830A0E3 		mov	r3, #40
 1735 0084 C50000EA 		b	.L3
 1736              	.L5:
  74:../os_core/os_task.c ****     } 
  75:../os_core/os_task.c ****     if (oldprio == OS_PRIO_SELF) {                              /* See if changing self            
 1737              		.loc 1 75 0
 1738 0088 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 1739 008c FF0053E3 		cmp	r3, #255
 1740 0090 0300001A 		bne	.L6
  76:../os_core/os_task.c ****         oldprio = OSTCBCur->OSTCBPrio;                          /* Yes, get priority               
 1741              		.loc 1 76 0
 1742 0094 18339FE5 		ldr	r3, .L13+4
 1743 0098 003093E5 		ldr	r3, [r3, #0]
 1744 009c 2E30D3E5 		ldrb	r3, [r3, #46]
 1745 00a0 1D304BE5 		strb	r3, [fp, #-29]
 1746              	.L6:
  77:../os_core/os_task.c ****     }
  78:../os_core/os_task.c ****     ptcb = OSTCBPrioTbl[oldprio];
 1747              		.loc 1 78 0
 1748 00a4 1D205BE5 		ldrb	r2, [fp, #-29]	@ zero_extendqisi2
 1749 00a8 00339FE5 		ldr	r3, .L13
 1750 00ac 023193E7 		ldr	r3, [r3, r2, asl #2]
 1751 00b0 10300BE5 		str	r3, [fp, #-16]
  79:../os_core/os_task.c ****     if (ptcb == (OS_TCB *)0) {                                  /* Does task to change exist?      
 1752              		.loc 1 79 0
 1753 00b4 10301BE5 		ldr	r3, [fp, #-16]
 1754 00b8 000053E3 		cmp	r3, #0
 1755 00bc 0300001A 		bne	.L7
  80:../os_core/os_task.c ****         OS_EXIT_CRITICAL();                                     /* No, can't change its priority!  
 1756              		.loc 1 80 0
 1757              	@ 80 "../os_core/os_task.c" 1
 1758 00c0 04009DE4 		ldmfd sp!, {r0}
 1759              	@ 0 "" 2
 1760              	@ 80 "../os_core/os_task.c" 1
 1761 00c4 00F021E1 		msr   cpsr_c, r0
 1762              	@ 0 "" 2
  81:../os_core/os_task.c ****         return (OS_PRIO_ERR);
 1763              		.loc 1 81 0
 1764 00c8 2930A0E3 		mov	r3, #41
 1765 00cc B30000EA 		b	.L3
 1766              	.L7:
  82:../os_core/os_task.c ****     }                                       
  83:../os_core/os_task.c ****     if (ptcb == (OS_TCB *)1) {                                  /* Is task assigned to Mutex       
 1767              		.loc 1 83 0
 1768 00d0 10301BE5 		ldr	r3, [fp, #-16]
 1769 00d4 010053E3 		cmp	r3, #1
 1770 00d8 0300001A 		bne	.L8
  84:../os_core/os_task.c ****         OS_EXIT_CRITICAL();                                     /* No, can't change its priority!  
 1771              		.loc 1 84 0
 1772              	@ 84 "../os_core/os_task.c" 1
 1773 00dc 04009DE4 		ldmfd sp!, {r0}
 1774              	@ 0 "" 2
 1775              	@ 84 "../os_core/os_task.c" 1
 1776 00e0 00F021E1 		msr   cpsr_c, r0
 1777              	@ 0 "" 2
  85:../os_core/os_task.c ****         return (OS_TASK_NOT_EXIST);
 1778              		.loc 1 85 0
 1779 00e4 0B30A0E3 		mov	r3, #11
 1780 00e8 AC0000EA 		b	.L3
 1781              	.L8:
  86:../os_core/os_task.c ****     }                                       
  87:../os_core/os_task.c ****     y                     = newprio >> 3;                       /* Yes, compute new TCB fields     
 1782              		.loc 1 87 0
 1783 00ec 1E305BE5 		ldrb	r3, [fp, #-30]	@ zero_extendqisi2
 1784 00f0 A331A0E1 		mov	r3, r3, lsr #3
 1785 00f4 11304BE5 		strb	r3, [fp, #-17]
  88:../os_core/os_task.c ****     bity                  = OSMapTbl[y];
 1786              		.loc 1 88 0
 1787 00f8 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 1788 00fc B4229FE5 		ldr	r2, .L13+8
 1789 0100 0330D2E7 		ldrb	r3, [r2, r3]
 1790 0104 12304BE5 		strb	r3, [fp, #-18]
  89:../os_core/os_task.c ****     x                     = newprio & 0x07;
 1791              		.loc 1 89 0
 1792 0108 1E305BE5 		ldrb	r3, [fp, #-30]
 1793 010c 073003E2 		and	r3, r3, #7
 1794 0110 13304BE5 		strb	r3, [fp, #-19]
  90:../os_core/os_task.c ****     bitx                  = OSMapTbl[x];
 1795              		.loc 1 90 0
 1796 0114 13305BE5 		ldrb	r3, [fp, #-19]	@ zero_extendqisi2
 1797 0118 98229FE5 		ldr	r2, .L13+8
 1798 011c 0330D2E7 		ldrb	r3, [r2, r3]
 1799 0120 14304BE5 		strb	r3, [fp, #-20]
  91:../os_core/os_task.c ****     OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                        /* Remove TCB from old priority    
 1800              		.loc 1 91 0
 1801 0124 1D205BE5 		ldrb	r2, [fp, #-29]	@ zero_extendqisi2
 1802 0128 80329FE5 		ldr	r3, .L13
 1803 012c 0010A0E3 		mov	r1, #0
 1804 0130 021183E7 		str	r1, [r3, r2, asl #2]
  92:../os_core/os_task.c ****     OSTCBPrioTbl[newprio] = ptcb;                               /* Place pointer to TCB @ new prior
 1805              		.loc 1 92 0
 1806 0134 1E205BE5 		ldrb	r2, [fp, #-30]	@ zero_extendqisi2
 1807 0138 70329FE5 		ldr	r3, .L13
 1808 013c 10101BE5 		ldr	r1, [fp, #-16]
 1809 0140 021183E7 		str	r1, [r3, r2, asl #2]
  93:../os_core/os_task.c ****     y_old                 = ptcb->OSTCBY;
 1810              		.loc 1 93 0
 1811 0144 10301BE5 		ldr	r3, [fp, #-16]
 1812 0148 3030D3E5 		ldrb	r3, [r3, #48]
 1813 014c 15304BE5 		strb	r3, [fp, #-21]
  94:../os_core/os_task.c ****     if ((OSRdyTbl[y_old] & ptcb->OSTCBBitX) != 0x00) {          /* If task is ready make it not    
 1814              		.loc 1 94 0
 1815 0150 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 1816 0154 60229FE5 		ldr	r2, .L13+12
 1817 0158 0320D2E7 		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1818 015c 10301BE5 		ldr	r3, [fp, #-16]
 1819 0160 3130D3E5 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1820 0164 033002E0 		and	r3, r2, r3
 1821 0168 FF3003E2 		and	r3, r3, #255
 1822 016c 000053E3 		cmp	r3, #0
 1823 0170 3100000A 		beq	.L9
  95:../os_core/os_task.c ****         OSRdyTbl[y_old] &= ~ptcb->OSTCBBitX;
 1824              		.loc 1 95 0
 1825 0174 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 1826 0178 15205BE5 		ldrb	r2, [fp, #-21]	@ zero_extendqisi2
 1827 017c 38129FE5 		ldr	r1, .L13+12
 1828 0180 0220D1E7 		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 1829 0184 FF1002E2 		and	r1, r2, #255
 1830 0188 10201BE5 		ldr	r2, [fp, #-16]
 1831 018c 3120D2E5 		ldrb	r2, [r2, #49]	@ zero_extendqisi2
 1832 0190 FF2002E2 		and	r2, r2, #255
 1833 0194 0220E0E1 		mvn	r2, r2
 1834 0198 FF2002E2 		and	r2, r2, #255
 1835 019c 022001E0 		and	r2, r1, r2
 1836 01a0 FF2002E2 		and	r2, r2, #255
 1837 01a4 FF1002E2 		and	r1, r2, #255
 1838 01a8 0C229FE5 		ldr	r2, .L13+12
 1839 01ac 0310C2E7 		strb	r1, [r2, r3]
  96:../os_core/os_task.c ****         if (OSRdyTbl[y_old] == 0x00) {
 1840              		.loc 1 96 0
 1841 01b0 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 1842 01b4 00229FE5 		ldr	r2, .L13+12
 1843 01b8 0330D2E7 		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1844 01bc 000053E3 		cmp	r3, #0
 1845 01c0 0C00001A 		bne	.L10
  97:../os_core/os_task.c ****             OSRdyGrp &= ~ptcb->OSTCBBitY;
 1846              		.loc 1 97 0
 1847 01c4 10301BE5 		ldr	r3, [fp, #-16]
 1848 01c8 3230D3E5 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 1849 01cc FF3003E2 		and	r3, r3, #255
 1850 01d0 0330E0E1 		mvn	r3, r3
 1851 01d4 FF2003E2 		and	r2, r3, #255
 1852 01d8 E0319FE5 		ldr	r3, .L13+16
 1853 01dc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1854 01e0 FF3003E2 		and	r3, r3, #255
 1855 01e4 033002E0 		and	r3, r2, r3
 1856 01e8 FF3003E2 		and	r3, r3, #255
 1857 01ec FF2003E2 		and	r2, r3, #255
 1858 01f0 C8319FE5 		ldr	r3, .L13+16
 1859 01f4 0020C3E5 		strb	r2, [r3, #0]
 1860              	.L10:
  98:../os_core/os_task.c ****         }
  99:../os_core/os_task.c ****         OSRdyGrp    |= bity;                                    /* Make new priority ready to run  
 1861              		.loc 1 99 0
 1862 01f8 C0319FE5 		ldr	r3, .L13+16
 1863 01fc 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1864 0200 12305BE5 		ldrb	r3, [fp, #-18]
 1865 0204 033082E1 		orr	r3, r2, r3
 1866 0208 FF2003E2 		and	r2, r3, #255
 1867 020c AC319FE5 		ldr	r3, .L13+16
 1868 0210 0020C3E5 		strb	r2, [r3, #0]
 100:../os_core/os_task.c ****         OSRdyTbl[y] |= bitx;
 1869              		.loc 1 100 0
 1870 0214 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 1871 0218 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 1872 021c 98119FE5 		ldr	r1, .L13+12
 1873 0220 0210D1E7 		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1874 0224 14205BE5 		ldrb	r2, [fp, #-20]
 1875 0228 022081E1 		orr	r2, r1, r2
 1876 022c FF1002E2 		and	r1, r2, #255
 1877 0230 84219FE5 		ldr	r2, .L13+12
 1878 0234 0310C2E7 		strb	r1, [r2, r3]
 1879 0238 450000EA 		b	.L11
 1880              	.L9:
 101:../os_core/os_task.c **** #if OS_EVENT_EN
 102:../os_core/os_task.c ****     } else {                                                    /* Task was not ready ...          
 103:../os_core/os_task.c ****         pevent = ptcb->OSTCBEventPtr;
 1881              		.loc 1 103 0
 1882 023c 10301BE5 		ldr	r3, [fp, #-16]
 1883 0240 1C3093E5 		ldr	r3, [r3, #28]
 1884 0244 1C300BE5 		str	r3, [fp, #-28]
 104:../os_core/os_task.c ****         if (pevent != (OS_EVENT *)0) {                          /* ... remove from event wait list 
 1885              		.loc 1 104 0
 1886 0248 1C301BE5 		ldr	r3, [fp, #-28]
 1887 024c 000053E3 		cmp	r3, #0
 1888 0250 3F00000A 		beq	.L11
 105:../os_core/os_task.c ****             pevent->OSEventTbl[y_old] &= ~ptcb->OSTCBBitX;
 1889              		.loc 1 105 0
 1890 0254 15105BE5 		ldrb	r1, [fp, #-21]	@ zero_extendqisi2
 1891 0258 15205BE5 		ldrb	r2, [fp, #-21]	@ zero_extendqisi2
 1892 025c 1C001BE5 		ldr	r0, [fp, #-28]
 1893 0260 0830A0E3 		mov	r3, #8
 1894 0264 022080E0 		add	r2, r0, r2
 1895 0268 033082E0 		add	r3, r2, r3
 1896 026c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1897 0270 FF2003E2 		and	r2, r3, #255
 1898 0274 10301BE5 		ldr	r3, [fp, #-16]
 1899 0278 3130D3E5 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 1900 027c FF3003E2 		and	r3, r3, #255
 1901 0280 0330E0E1 		mvn	r3, r3
 1902 0284 FF3003E2 		and	r3, r3, #255
 1903 0288 033002E0 		and	r3, r2, r3
 1904 028c FF3003E2 		and	r3, r3, #255
 1905 0290 FF2003E2 		and	r2, r3, #255
 1906 0294 1C001BE5 		ldr	r0, [fp, #-28]
 1907 0298 0830A0E3 		mov	r3, #8
 1908 029c 011080E0 		add	r1, r0, r1
 1909 02a0 033081E0 		add	r3, r1, r3
 1910 02a4 0020C3E5 		strb	r2, [r3, #0]
 106:../os_core/os_task.c ****             if (pevent->OSEventTbl[y_old] == 0) {
 1911              		.loc 1 106 0
 1912 02a8 15205BE5 		ldrb	r2, [fp, #-21]	@ zero_extendqisi2
 1913 02ac 1C101BE5 		ldr	r1, [fp, #-28]
 1914 02b0 0830A0E3 		mov	r3, #8
 1915 02b4 022081E0 		add	r2, r1, r2
 1916 02b8 033082E0 		add	r3, r2, r3
 1917 02bc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1918 02c0 000053E3 		cmp	r3, #0
 1919 02c4 0C00001A 		bne	.L12
 107:../os_core/os_task.c ****                 pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 1920              		.loc 1 107 0
 1921 02c8 1C301BE5 		ldr	r3, [fp, #-28]
 1922 02cc 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1923 02d0 FF2003E2 		and	r2, r3, #255
 1924 02d4 10301BE5 		ldr	r3, [fp, #-16]
 1925 02d8 3230D3E5 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 1926 02dc FF3003E2 		and	r3, r3, #255
 1927 02e0 0330E0E1 		mvn	r3, r3
 1928 02e4 FF3003E2 		and	r3, r3, #255
 1929 02e8 033002E0 		and	r3, r2, r3
 1930 02ec FF3003E2 		and	r3, r3, #255
 1931 02f0 FF2003E2 		and	r2, r3, #255
 1932 02f4 1C301BE5 		ldr	r3, [fp, #-28]
 1933 02f8 0120C3E5 		strb	r2, [r3, #1]
 1934              	.L12:
 108:../os_core/os_task.c ****             }
 109:../os_core/os_task.c ****             pevent->OSEventGrp    |= bity;                      /* Add new priority to wait list   
 1935              		.loc 1 109 0
 1936 02fc 1C301BE5 		ldr	r3, [fp, #-28]
 1937 0300 0120D3E5 		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 1938 0304 12305BE5 		ldrb	r3, [fp, #-18]
 1939 0308 033082E1 		orr	r3, r2, r3
 1940 030c FF2003E2 		and	r2, r3, #255
 1941 0310 1C301BE5 		ldr	r3, [fp, #-28]
 1942 0314 0120C3E5 		strb	r2, [r3, #1]
 110:../os_core/os_task.c ****             pevent->OSEventTbl[y] |= bitx;
 1943              		.loc 1 110 0
 1944 0318 11105BE5 		ldrb	r1, [fp, #-17]	@ zero_extendqisi2
 1945 031c 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 1946 0320 1C001BE5 		ldr	r0, [fp, #-28]
 1947 0324 0830A0E3 		mov	r3, #8
 1948 0328 022080E0 		add	r2, r0, r2
 1949 032c 033082E0 		add	r3, r2, r3
 1950 0330 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1951 0334 14305BE5 		ldrb	r3, [fp, #-20]
 1952 0338 033082E1 		orr	r3, r2, r3
 1953 033c FF2003E2 		and	r2, r3, #255
 1954 0340 1C001BE5 		ldr	r0, [fp, #-28]
 1955 0344 0830A0E3 		mov	r3, #8
 1956 0348 011080E0 		add	r1, r0, r1
 1957 034c 033081E0 		add	r3, r1, r3
 1958 0350 0020C3E5 		strb	r2, [r3, #0]
 1959              	.L11:
 111:../os_core/os_task.c ****         }
 112:../os_core/os_task.c **** #endif
 113:../os_core/os_task.c ****     }
 114:../os_core/os_task.c ****     ptcb->OSTCBPrio = newprio;                                  /* Set new task priority           
 1960              		.loc 1 114 0
 1961 0354 10301BE5 		ldr	r3, [fp, #-16]
 1962 0358 1E205BE5 		ldrb	r2, [fp, #-30]
 1963 035c 2E20C3E5 		strb	r2, [r3, #46]
 115:../os_core/os_task.c ****     ptcb->OSTCBY    = y;
 1964              		.loc 1 115 0
 1965 0360 10301BE5 		ldr	r3, [fp, #-16]
 1966 0364 11205BE5 		ldrb	r2, [fp, #-17]
 1967 0368 3020C3E5 		strb	r2, [r3, #48]
 116:../os_core/os_task.c ****     ptcb->OSTCBX    = x;
 1968              		.loc 1 116 0
 1969 036c 10301BE5 		ldr	r3, [fp, #-16]
 1970 0370 13205BE5 		ldrb	r2, [fp, #-19]
 1971 0374 2F20C3E5 		strb	r2, [r3, #47]
 117:../os_core/os_task.c ****     ptcb->OSTCBBitY = bity;
 1972              		.loc 1 117 0
 1973 0378 10301BE5 		ldr	r3, [fp, #-16]
 1974 037c 12205BE5 		ldrb	r2, [fp, #-18]
 1975 0380 3220C3E5 		strb	r2, [r3, #50]
 118:../os_core/os_task.c ****     ptcb->OSTCBBitX = bitx;
 1976              		.loc 1 118 0
 1977 0384 10301BE5 		ldr	r3, [fp, #-16]
 1978 0388 14205BE5 		ldrb	r2, [fp, #-20]
 1979 038c 3120C3E5 		strb	r2, [r3, #49]
 119:../os_core/os_task.c ****     OS_EXIT_CRITICAL();
 1980              		.loc 1 119 0
 1981              	@ 119 "../os_core/os_task.c" 1
 1982 0390 04009DE4 		ldmfd sp!, {r0}
 1983              	@ 0 "" 2
 1984              	@ 119 "../os_core/os_task.c" 1
 1985 0394 00F021E1 		msr   cpsr_c, r0
 1986              	@ 0 "" 2
 120:../os_core/os_task.c ****     OS_Sched();                                                 /* Run highest priority task ready 
 1987              		.loc 1 120 0
 1988 0398 FEFFFFEB 		bl	OS_Sched
 121:../os_core/os_task.c ****     return (OS_NO_ERR);
 1989              		.loc 1 121 0
 1990 039c 0030A0E3 		mov	r3, #0
 1991              	.L3:
 122:../os_core/os_task.c **** }
 1992              		.loc 1 122 0
 1993 03a0 0300A0E1 		mov	r0, r3
 1994 03a4 0CD04BE2 		sub	sp, fp, #12
 1995 03a8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1996 03ac 1EFF2FE1 		bx	lr
 1997              	.L14:
 1998              		.align	2
 1999              	.L13:
 2000 03b0 00000000 		.word	OSTCBPrioTbl
 2001 03b4 00000000 		.word	OSTCBCur
 2002 03b8 00000000 		.word	OSMapTbl
 2003 03bc 00000000 		.word	OSRdyTbl
 2004 03c0 00000000 		.word	OSRdyGrp
 2005              		.cfi_endproc
 2006              	.LFE0:
 2008              		.align	2
 2009              		.global	OSTaskCreate
 2011              	OSTaskCreate:
 2012              	.LFB1:
 123:../os_core/os_task.c **** #endif
 124:../os_core/os_task.c **** /*$PAGE*/
 125:../os_core/os_task.c **** /*
 126:../os_core/os_task.c **** ***************************************************************************************************
 127:../os_core/os_task.c **** *                                            CREATE A TASK
 128:../os_core/os_task.c **** *
 129:../os_core/os_task.c **** * Description: This function is used to have uC/OS-II manage the execution of a task.  Tasks can ei
 130:../os_core/os_task.c **** *              be created prior to the start of multitasking or by a running task.  A task cannot b
 131:../os_core/os_task.c **** *              created by an ISR.
 132:../os_core/os_task.c **** *
 133:../os_core/os_task.c **** * Arguments  : task     is a pointer to the task's code
 134:../os_core/os_task.c **** *
 135:../os_core/os_task.c **** *              p_arg    is a pointer to an optional data area which can be used to pass parameters 
 136:../os_core/os_task.c **** *                       the task when the task first executes.  Where the task is concerned it thin
 137:../os_core/os_task.c **** *                       it was invoked and passed the argument 'p_arg' as follows:
 138:../os_core/os_task.c **** *
 139:../os_core/os_task.c **** *                           void Task (void *p_arg)
 140:../os_core/os_task.c **** *                           {
 141:../os_core/os_task.c **** *                               for (;;) {
 142:../os_core/os_task.c **** *                                   Task code;
 143:../os_core/os_task.c **** *                               }
 144:../os_core/os_task.c **** *                           }
 145:../os_core/os_task.c **** *
 146:../os_core/os_task.c **** *              ptos     is a pointer to the task's top of stack.  If the configuration constant
 147:../os_core/os_task.c **** *                       OS_STK_GROWTH is set to 1, the stack is assumed to grow downward (i.e. from
 148:../os_core/os_task.c **** *                       memory to low memory).  'pstk' will thus point to the highest (valid) memor
 149:../os_core/os_task.c **** *                       location of the stack.  If OS_STK_GROWTH is set to 0, 'pstk' will point to 
 150:../os_core/os_task.c **** *                       lowest memory location of the stack and the stack will grow with increasing
 151:../os_core/os_task.c **** *                       memory locations.
 152:../os_core/os_task.c **** *
 153:../os_core/os_task.c **** *              prio     is the task's priority.  A unique priority MUST be assigned to each task an
 154:../os_core/os_task.c **** *                       lower the number, the higher the priority.
 155:../os_core/os_task.c **** *
 156:../os_core/os_task.c **** * Returns    : OS_NO_ERR               if the function was successful.
 157:../os_core/os_task.c **** *              OS_PRIO_EXIT            if the task priority already exist
 158:../os_core/os_task.c **** *                                      (each task MUST have a unique priority).
 159:../os_core/os_task.c **** *              OS_PRIO_INVALID         if the priority you specify is higher that the maximum allow
 160:../os_core/os_task.c **** *                                      (i.e. >= OS_LOWEST_PRIO)
 161:../os_core/os_task.c **** *              OS_ERR_TASK_CREATE_ISR  if you tried to create a task from an ISR.
 162:../os_core/os_task.c **** ***************************************************************************************************
 163:../os_core/os_task.c **** */
 164:../os_core/os_task.c **** 
 165:../os_core/os_task.c **** #if OS_TASK_CREATE_EN > 0
 166:../os_core/os_task.c **** INT8U  OSTaskCreate (void (*task)(void *pd), void *p_arg, OS_STK *ptos, INT8U prio)
 167:../os_core/os_task.c **** {
 2013              		.loc 1 167 0
 2014              		.cfi_startproc
 2015              		@ Function supports interworking.
 2016              		@ args = 0, pretend = 0, frame = 24
 2017              		@ frame_needed = 1, uses_anonymous_args = 0
 2018 03c4 0DC0A0E1 		mov	ip, sp
 2019              	.LCFI2:
 2020              		.cfi_def_cfa_register 12
 2021 03c8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2022 03cc 04B04CE2 		sub	fp, ip, #4
 2023              		.cfi_offset 14, -8
 2024              		.cfi_offset 13, -12
 2025              		.cfi_offset 11, -16
 2026              	.LCFI3:
 2027              		.cfi_def_cfa 11, 4
 2028 03d0 28D04DE2 		sub	sp, sp, #40
 2029 03d4 18000BE5 		str	r0, [fp, #-24]
 2030 03d8 1C100BE5 		str	r1, [fp, #-28]
 2031 03dc 20200BE5 		str	r2, [fp, #-32]
 2032 03e0 21304BE5 		strb	r3, [fp, #-33]
 168:../os_core/os_task.c ****     OS_STK    *psp;
 169:../os_core/os_task.c ****     INT8U      err;
 170:../os_core/os_task.c **** #if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register           
 171:../os_core/os_task.c ****     OS_CPU_SR  cpu_sr;
 172:../os_core/os_task.c **** 
 173:../os_core/os_task.c **** 
 174:../os_core/os_task.c **** 
 175:../os_core/os_task.c ****     cpu_sr = 0;                              /* Prevent compiler warning                           
 176:../os_core/os_task.c **** #endif    
 177:../os_core/os_task.c **** #if OS_ARG_CHK_EN > 0
 178:../os_core/os_task.c ****     if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range       
 2033              		.loc 1 178 0
 2034 03e4 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 2035 03e8 3F0053E3 		cmp	r3, #63
 2036 03ec 0100009A 		bls	.L16
 179:../os_core/os_task.c ****         return (OS_PRIO_INVALID);
 2037              		.loc 1 179 0
 2038 03f0 2A30A0E3 		mov	r3, #42
 2039 03f4 420000EA 		b	.L17
 2040              	.L16:
 180:../os_core/os_task.c ****     }
 181:../os_core/os_task.c **** #endif
 182:../os_core/os_task.c ****     OS_ENTER_CRITICAL();
 2041              		.loc 1 182 0
 2042              	@ 182 "../os_core/os_task.c" 1
 2043 03f8 00000FE1 		mrs   r0, cpsr
 2044              	@ 0 "" 2
 2045              	@ 182 "../os_core/os_task.c" 1
 2046 03fc 04002DE5 		stmfd sp!, {r0}
 2047              	@ 0 "" 2
 2048              	@ 182 "../os_core/os_task.c" 1
 2049 0400 C00080E3 		orr   r0, r0, #0b11000000
 2050              	@ 0 "" 2
 2051              	@ 182 "../os_core/os_task.c" 1
 2052 0404 00F021E1 		msr   cpsr_c, r0
 2053              	@ 0 "" 2
 183:../os_core/os_task.c ****     if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an I
 2054              		.loc 1 183 0
 2055 0408 04319FE5 		ldr	r3, .L22
 2056 040c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2057 0410 000053E3 		cmp	r3, #0
 2058 0414 0300000A 		beq	.L18
 184:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 2059              		.loc 1 184 0
 2060              	@ 184 "../os_core/os_task.c" 1
 2061 0418 04009DE4 		ldmfd sp!, {r0}
 2062              	@ 0 "" 2
 2063              	@ 184 "../os_core/os_task.c" 1
 2064 041c 00F021E1 		msr   cpsr_c, r0
 2065              	@ 0 "" 2
 185:../os_core/os_task.c ****         return (OS_ERR_TASK_CREATE_ISR);
 2066              		.loc 1 185 0
 2067 0420 1030A0E3 		mov	r3, #16
 2068 0424 360000EA 		b	.L17
 2069              	.L18:
 186:../os_core/os_task.c ****     }
 187:../os_core/os_task.c ****     if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priori
 2070              		.loc 1 187 0
 2071 0428 21205BE5 		ldrb	r2, [fp, #-33]	@ zero_extendqisi2
 2072 042c E4309FE5 		ldr	r3, .L22+4
 2073 0430 023193E7 		ldr	r3, [r3, r2, asl #2]
 2074 0434 000053E3 		cmp	r3, #0
 2075 0438 2E00001A 		bne	.L19
 188:../os_core/os_task.c ****         OSTCBPrioTbl[prio] = (OS_TCB *)1;    /* Reserve the priority to prevent others from doing .
 2076              		.loc 1 188 0
 2077 043c 21205BE5 		ldrb	r2, [fp, #-33]	@ zero_extendqisi2
 2078 0440 D0309FE5 		ldr	r3, .L22+4
 2079 0444 0110A0E3 		mov	r1, #1
 2080 0448 021183E7 		str	r1, [r3, r2, asl #2]
 189:../os_core/os_task.c ****                                              /* ... the same thing until task is created.          
 190:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 2081              		.loc 1 190 0
 2082              	@ 190 "../os_core/os_task.c" 1
 2083 044c 04009DE4 		ldmfd sp!, {r0}
 2084              	@ 0 "" 2
 2085              	@ 190 "../os_core/os_task.c" 1
 2086 0450 00F021E1 		msr   cpsr_c, r0
 2087              	@ 0 "" 2
 191:../os_core/os_task.c ****         psp = (OS_STK *)OSTaskStkInit(task, p_arg, ptos, 0);    /* Initialize the task's stack     
 2088              		.loc 1 191 0
 2089 0454 18001BE5 		ldr	r0, [fp, #-24]
 2090 0458 1C101BE5 		ldr	r1, [fp, #-28]
 2091 045c 20201BE5 		ldr	r2, [fp, #-32]
 2092 0460 0030A0E3 		mov	r3, #0
 2093 0464 FEFFFFEB 		bl	OSTaskStkInit
 2094 0468 10000BE5 		str	r0, [fp, #-16]
 192:../os_core/os_task.c ****         err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 2095              		.loc 1 192 0
 2096 046c 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 2097 0470 0020A0E3 		mov	r2, #0
 2098 0474 00208DE5 		str	r2, [sp, #0]
 2099 0478 0020A0E3 		mov	r2, #0
 2100 047c 04208DE5 		str	r2, [sp, #4]
 2101 0480 0020A0E3 		mov	r2, #0
 2102 0484 08208DE5 		str	r2, [sp, #8]
 2103 0488 0300A0E1 		mov	r0, r3
 2104 048c 10101BE5 		ldr	r1, [fp, #-16]
 2105 0490 0020A0E3 		mov	r2, #0
 2106 0494 0030A0E3 		mov	r3, #0
 2107 0498 FEFFFFEB 		bl	OS_TCBInit
 2108 049c 0030A0E1 		mov	r3, r0
 2109 04a0 11304BE5 		strb	r3, [fp, #-17]
 193:../os_core/os_task.c ****         if (err == OS_NO_ERR) {
 2110              		.loc 1 193 0
 2111 04a4 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2112 04a8 000053E3 		cmp	r3, #0
 2113 04ac 0500001A 		bne	.L20
 194:../os_core/os_task.c ****             if (OSRunning == TRUE) {         /* Find highest priority task if multitasking has star
 2114              		.loc 1 194 0
 2115 04b0 64309FE5 		ldr	r3, .L22+8
 2116 04b4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2117 04b8 010053E3 		cmp	r3, #1
 2118 04bc 0B00001A 		bne	.L21
 195:../os_core/os_task.c ****                 OS_Sched();
 2119              		.loc 1 195 0
 2120 04c0 FEFFFFEB 		bl	OS_Sched
 2121 04c4 090000EA 		b	.L21
 2122              	.L20:
 196:../os_core/os_task.c ****             }
 197:../os_core/os_task.c ****         } else {
 198:../os_core/os_task.c ****             OS_ENTER_CRITICAL();
 2123              		.loc 1 198 0
 2124              	@ 198 "../os_core/os_task.c" 1
 2125 04c8 00000FE1 		mrs   r0, cpsr
 2126              	@ 0 "" 2
 2127              	@ 198 "../os_core/os_task.c" 1
 2128 04cc 04002DE5 		stmfd sp!, {r0}
 2129              	@ 0 "" 2
 2130              	@ 198 "../os_core/os_task.c" 1
 2131 04d0 C00080E3 		orr   r0, r0, #0b11000000
 2132              	@ 0 "" 2
 2133              	@ 198 "../os_core/os_task.c" 1
 2134 04d4 00F021E1 		msr   cpsr_c, r0
 2135              	@ 0 "" 2
 199:../os_core/os_task.c ****             OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others             
 2136              		.loc 1 199 0
 2137 04d8 21205BE5 		ldrb	r2, [fp, #-33]	@ zero_extendqisi2
 2138 04dc 34309FE5 		ldr	r3, .L22+4
 2139 04e0 0010A0E3 		mov	r1, #0
 2140 04e4 021183E7 		str	r1, [r3, r2, asl #2]
 200:../os_core/os_task.c ****             OS_EXIT_CRITICAL();
 2141              		.loc 1 200 0
 2142              	@ 200 "../os_core/os_task.c" 1
 2143 04e8 04009DE4 		ldmfd sp!, {r0}
 2144              	@ 0 "" 2
 2145              	@ 200 "../os_core/os_task.c" 1
 2146 04ec 00F021E1 		msr   cpsr_c, r0
 2147              	@ 0 "" 2
 2148              	.L21:
 201:../os_core/os_task.c ****         }
 202:../os_core/os_task.c ****         return (err);
 2149              		.loc 1 202 0
 2150 04f0 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2151 04f4 020000EA 		b	.L17
 2152              	.L19:
 203:../os_core/os_task.c ****     }
 204:../os_core/os_task.c ****     OS_EXIT_CRITICAL();
 2153              		.loc 1 204 0
 2154              	@ 204 "../os_core/os_task.c" 1
 2155 04f8 04009DE4 		ldmfd sp!, {r0}
 2156              	@ 0 "" 2
 2157              	@ 204 "../os_core/os_task.c" 1
 2158 04fc 00F021E1 		msr   cpsr_c, r0
 2159              	@ 0 "" 2
 205:../os_core/os_task.c ****     return (OS_PRIO_EXIST);
 2160              		.loc 1 205 0
 2161 0500 2830A0E3 		mov	r3, #40
 2162              	.L17:
 206:../os_core/os_task.c **** }
 2163              		.loc 1 206 0
 2164 0504 0300A0E1 		mov	r0, r3
 2165 0508 0CD04BE2 		sub	sp, fp, #12
 2166 050c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2167 0510 1EFF2FE1 		bx	lr
 2168              	.L23:
 2169              		.align	2
 2170              	.L22:
 2171 0514 00000000 		.word	OSIntNesting
 2172 0518 00000000 		.word	OSTCBPrioTbl
 2173 051c 00000000 		.word	OSRunning
 2174              		.cfi_endproc
 2175              	.LFE1:
 2177              		.align	2
 2178              		.global	OSTaskCreateExt
 2180              	OSTaskCreateExt:
 2181              	.LFB2:
 207:../os_core/os_task.c **** #endif
 208:../os_core/os_task.c **** /*$PAGE*/
 209:../os_core/os_task.c **** /*
 210:../os_core/os_task.c **** ***************************************************************************************************
 211:../os_core/os_task.c **** *                                     CREATE A TASK (Extended Version)
 212:../os_core/os_task.c **** *
 213:../os_core/os_task.c **** * Description: This function is used to have uC/OS-II manage the execution of a task.  Tasks can ei
 214:../os_core/os_task.c **** *              be created prior to the start of multitasking or by a running task.  A task cannot b
 215:../os_core/os_task.c **** *              created by an ISR.  This function is similar to OSTaskCreate() except that it allows
 216:../os_core/os_task.c **** *              additional information about a task to be specified.
 217:../os_core/os_task.c **** *
 218:../os_core/os_task.c **** * Arguments  : task      is a pointer to the task's code
 219:../os_core/os_task.c **** *
 220:../os_core/os_task.c **** *              p_arg     is a pointer to an optional data area which can be used to pass parameters
 221:../os_core/os_task.c **** *                        the task when the task first executes.  Where the task is concerned it thi
 222:../os_core/os_task.c **** *                        it was invoked and passed the argument 'p_arg' as follows:
 223:../os_core/os_task.c **** *
 224:../os_core/os_task.c **** *                            void Task (void *p_arg)
 225:../os_core/os_task.c **** *                            {
 226:../os_core/os_task.c **** *                                for (;;) {
 227:../os_core/os_task.c **** *                                    Task code;
 228:../os_core/os_task.c **** *                                }
 229:../os_core/os_task.c **** *                            }
 230:../os_core/os_task.c **** *
 231:../os_core/os_task.c **** *              ptos      is a pointer to the task's top of stack.  If the configuration constant
 232:../os_core/os_task.c **** *                        OS_STK_GROWTH is set to 1, the stack is assumed to grow downward (i.e. fro
 233:../os_core/os_task.c **** *                        memory to low memory).  'ptos' will thus point to the highest (valid) memo
 234:../os_core/os_task.c **** *                        location of the stack.  If OS_STK_GROWTH is set to 0, 'ptos' will point to
 235:../os_core/os_task.c **** *                        lowest memory location of the stack and the stack will grow with increasin
 236:../os_core/os_task.c **** *                        memory locations.  'ptos' MUST point to a valid 'free' data item.
 237:../os_core/os_task.c **** *
 238:../os_core/os_task.c **** *              prio      is the task's priority.  A unique priority MUST be assigned to each task a
 239:../os_core/os_task.c **** *                        lower the number, the higher the priority.
 240:../os_core/os_task.c **** *
 241:../os_core/os_task.c **** *              id        is the task's ID (0..65535)
 242:../os_core/os_task.c **** *
 243:../os_core/os_task.c **** *              pbos      is a pointer to the task's bottom of stack.  If the configuration constant
 244:../os_core/os_task.c **** *                        OS_STK_GROWTH is set to 1, the stack is assumed to grow downward (i.e. fro
 245:../os_core/os_task.c **** *                        memory to low memory).  'pbos' will thus point to the LOWEST (valid) memor
 246:../os_core/os_task.c **** *                        location of the stack.  If OS_STK_GROWTH is set to 0, 'pbos' will point to
 247:../os_core/os_task.c **** *                        HIGHEST memory location of the stack and the stack will grow with increasi
 248:../os_core/os_task.c **** *                        memory locations.  'pbos' MUST point to a valid 'free' data item.
 249:../os_core/os_task.c **** *
 250:../os_core/os_task.c **** *              stk_size  is the size of the stack in number of elements.  If OS_STK is set to INT8U
 251:../os_core/os_task.c **** *                        'stk_size' corresponds to the number of bytes available.  If OS_STK is set
 252:../os_core/os_task.c **** *                        INT16U, 'stk_size' contains the number of 16-bit entries available.  Final
 253:../os_core/os_task.c **** *                        OS_STK is set to INT32U, 'stk_size' contains the number of 32-bit entries
 254:../os_core/os_task.c **** *                        available on the stack.
 255:../os_core/os_task.c **** *
 256:../os_core/os_task.c **** *              pext      is a pointer to a user supplied memory location which is used as a TCB ext
 257:../os_core/os_task.c **** *                        For example, this user memory can hold the contents of floating-point regi
 258:../os_core/os_task.c **** *                        during a context switch, the time each task takes to execute, the number o
 259:../os_core/os_task.c **** *                        the task has been switched-in, etc.
 260:../os_core/os_task.c **** *
 261:../os_core/os_task.c **** *              opt       contains additional information (or options) about the behavior of the tas
 262:../os_core/os_task.c **** *                        LOWER 8-bits are reserved by uC/OS-II while the upper 8 bits can be applic
 263:../os_core/os_task.c **** *                        specific.  See OS_TASK_OPT_??? in uCOS-II.H.  Current choices are:
 264:../os_core/os_task.c **** *
 265:../os_core/os_task.c **** *                        OS_TASK_OPT_STK_CHK      Stack checking to be allowed for the task
 266:../os_core/os_task.c **** *                        OS_TASK_OPT_STK_CLR      Clear the stack when the task is created
 267:../os_core/os_task.c **** *                        OS_TASK_OPT_SAVE_FP      If the CPU has floating-point registers, save the
 268:../os_core/os_task.c **** *                                                 during a context switch.
 269:../os_core/os_task.c **** *
 270:../os_core/os_task.c **** * Returns    : OS_NO_ERR               if the function was successful.
 271:../os_core/os_task.c **** *              OS_PRIO_EXIT            if the task priority already exist
 272:../os_core/os_task.c **** *                                      (each task MUST have a unique priority).
 273:../os_core/os_task.c **** *              OS_PRIO_INVALID         if the priority you specify is higher that the maximum allow
 274:../os_core/os_task.c **** *                                      (i.e. > OS_LOWEST_PRIO)
 275:../os_core/os_task.c **** *              OS_ERR_TASK_CREATE_ISR  if you tried to create a task from an ISR.
 276:../os_core/os_task.c **** ***************************************************************************************************
 277:../os_core/os_task.c **** */
 278:../os_core/os_task.c **** /*$PAGE*/
 279:../os_core/os_task.c **** #if OS_TASK_CREATE_EXT_EN > 0
 280:../os_core/os_task.c **** INT8U  OSTaskCreateExt (void   (*task)(void *pd),
 281:../os_core/os_task.c ****                         void    *p_arg,
 282:../os_core/os_task.c ****                         OS_STK  *ptos,
 283:../os_core/os_task.c ****                         INT8U    prio,
 284:../os_core/os_task.c ****                         INT16U   id,
 285:../os_core/os_task.c ****                         OS_STK  *pbos,
 286:../os_core/os_task.c ****                         INT32U   stk_size,
 287:../os_core/os_task.c ****                         void    *pext,
 288:../os_core/os_task.c ****                         INT16U   opt)
 289:../os_core/os_task.c **** {
 2182              		.loc 1 289 0
 2183              		.cfi_startproc
 2184              		@ Function supports interworking.
 2185              		@ args = 20, pretend = 0, frame = 24
 2186              		@ frame_needed = 1, uses_anonymous_args = 0
 2187 0520 0DC0A0E1 		mov	ip, sp
 2188              	.LCFI4:
 2189              		.cfi_def_cfa_register 12
 2190 0524 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2191 0528 04B04CE2 		sub	fp, ip, #4
 2192              		.cfi_offset 14, -8
 2193              		.cfi_offset 13, -12
 2194              		.cfi_offset 11, -16
 2195              	.LCFI5:
 2196              		.cfi_def_cfa 11, 4
 2197 052c 28D04DE2 		sub	sp, sp, #40
 2198 0530 18000BE5 		str	r0, [fp, #-24]
 2199 0534 1C100BE5 		str	r1, [fp, #-28]
 2200 0538 20200BE5 		str	r2, [fp, #-32]
 2201 053c 21304BE5 		strb	r3, [fp, #-33]
 290:../os_core/os_task.c ****     OS_STK    *psp;
 291:../os_core/os_task.c ****     INT8U      err;
 292:../os_core/os_task.c **** #if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register           
 293:../os_core/os_task.c ****     OS_CPU_SR  cpu_sr;
 294:../os_core/os_task.c **** 
 295:../os_core/os_task.c **** 
 296:../os_core/os_task.c **** 
 297:../os_core/os_task.c ****     cpu_sr = 0;                              /* Prevent compiler warning                           
 298:../os_core/os_task.c **** #endif    
 299:../os_core/os_task.c **** #if OS_ARG_CHK_EN > 0
 300:../os_core/os_task.c ****     if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range       
 2202              		.loc 1 300 0
 2203 0540 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 2204 0544 3F0053E3 		cmp	r3, #63
 2205 0548 0100009A 		bls	.L25
 301:../os_core/os_task.c ****         return (OS_PRIO_INVALID);
 2206              		.loc 1 301 0
 2207 054c 2A30A0E3 		mov	r3, #42
 2208 0550 470000EA 		b	.L26
 2209              	.L25:
 302:../os_core/os_task.c ****     }
 303:../os_core/os_task.c **** #endif
 304:../os_core/os_task.c ****     OS_ENTER_CRITICAL();
 2210              		.loc 1 304 0
 2211              	@ 304 "../os_core/os_task.c" 1
 2212 0554 00000FE1 		mrs   r0, cpsr
 2213              	@ 0 "" 2
 2214              	@ 304 "../os_core/os_task.c" 1
 2215 0558 04002DE5 		stmfd sp!, {r0}
 2216              	@ 0 "" 2
 2217              	@ 304 "../os_core/os_task.c" 1
 2218 055c C00080E3 		orr   r0, r0, #0b11000000
 2219              	@ 0 "" 2
 2220              	@ 304 "../os_core/os_task.c" 1
 2221 0560 00F021E1 		msr   cpsr_c, r0
 2222              	@ 0 "" 2
 305:../os_core/os_task.c ****     if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an I
 2223              		.loc 1 305 0
 2224 0564 18319FE5 		ldr	r3, .L31
 2225 0568 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2226 056c 000053E3 		cmp	r3, #0
 2227 0570 0300000A 		beq	.L27
 306:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 2228              		.loc 1 306 0
 2229              	@ 306 "../os_core/os_task.c" 1
 2230 0574 04009DE4 		ldmfd sp!, {r0}
 2231              	@ 0 "" 2
 2232              	@ 306 "../os_core/os_task.c" 1
 2233 0578 00F021E1 		msr   cpsr_c, r0
 2234              	@ 0 "" 2
 307:../os_core/os_task.c ****         return (OS_ERR_TASK_CREATE_ISR);
 2235              		.loc 1 307 0
 2236 057c 1030A0E3 		mov	r3, #16
 2237 0580 3B0000EA 		b	.L26
 2238              	.L27:
 308:../os_core/os_task.c ****     }
 309:../os_core/os_task.c ****     if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priori
 2239              		.loc 1 309 0
 2240 0584 21205BE5 		ldrb	r2, [fp, #-33]	@ zero_extendqisi2
 2241 0588 F8309FE5 		ldr	r3, .L31+4
 2242 058c 023193E7 		ldr	r3, [r3, r2, asl #2]
 2243 0590 000053E3 		cmp	r3, #0
 2244 0594 3300001A 		bne	.L28
 310:../os_core/os_task.c ****         OSTCBPrioTbl[prio] = (OS_TCB *)1;    /* Reserve the priority to prevent others from doing .
 2245              		.loc 1 310 0
 2246 0598 21205BE5 		ldrb	r2, [fp, #-33]	@ zero_extendqisi2
 2247 059c E4309FE5 		ldr	r3, .L31+4
 2248 05a0 0110A0E3 		mov	r1, #1
 2249 05a4 021183E7 		str	r1, [r3, r2, asl #2]
 311:../os_core/os_task.c ****                                              /* ... the same thing until task is created.          
 312:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 2250              		.loc 1 312 0
 2251              	@ 312 "../os_core/os_task.c" 1
 2252 05a8 04009DE4 		ldmfd sp!, {r0}
 2253              	@ 0 "" 2
 2254              	@ 312 "../os_core/os_task.c" 1
 2255 05ac 00F021E1 		msr   cpsr_c, r0
 2256              	@ 0 "" 2
 313:../os_core/os_task.c **** 
 314:../os_core/os_task.c ****         OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed) 
 2257              		.loc 1 314 0
 2258 05b0 B431DBE1 		ldrh	r3, [fp, #20]
 2259 05b4 08009BE5 		ldr	r0, [fp, #8]
 2260 05b8 0C109BE5 		ldr	r1, [fp, #12]
 2261 05bc 0320A0E1 		mov	r2, r3
 2262 05c0 FEFFFFEB 		bl	OS_TaskStkClr
 315:../os_core/os_task.c **** 
 316:../os_core/os_task.c ****         psp = (OS_STK *)OSTaskStkInit(task, p_arg, ptos, opt); /* Initialize the task's stack      
 2263              		.loc 1 316 0
 2264 05c4 B431DBE1 		ldrh	r3, [fp, #20]
 2265 05c8 18001BE5 		ldr	r0, [fp, #-24]
 2266 05cc 1C101BE5 		ldr	r1, [fp, #-28]
 2267 05d0 20201BE5 		ldr	r2, [fp, #-32]
 2268 05d4 FEFFFFEB 		bl	OSTaskStkInit
 2269 05d8 10000BE5 		str	r0, [fp, #-16]
 317:../os_core/os_task.c ****         err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 2270              		.loc 1 317 0
 2271 05dc 21205BE5 		ldrb	r2, [fp, #-33]	@ zero_extendqisi2
 2272 05e0 B430DBE1 		ldrh	r3, [fp, #4]
 2273 05e4 0C109BE5 		ldr	r1, [fp, #12]
 2274 05e8 00108DE5 		str	r1, [sp, #0]
 2275 05ec 10109BE5 		ldr	r1, [fp, #16]
 2276 05f0 04108DE5 		str	r1, [sp, #4]
 2277 05f4 B411DBE1 		ldrh	r1, [fp, #20]
 2278 05f8 08108DE5 		str	r1, [sp, #8]
 2279 05fc 0200A0E1 		mov	r0, r2
 2280 0600 10101BE5 		ldr	r1, [fp, #-16]
 2281 0604 08209BE5 		ldr	r2, [fp, #8]
 2282 0608 FEFFFFEB 		bl	OS_TCBInit
 2283 060c 0030A0E1 		mov	r3, r0
 2284 0610 11304BE5 		strb	r3, [fp, #-17]
 318:../os_core/os_task.c ****         if (err == OS_NO_ERR) {
 2285              		.loc 1 318 0
 2286 0614 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2287 0618 000053E3 		cmp	r3, #0
 2288 061c 0500001A 		bne	.L29
 319:../os_core/os_task.c ****             if (OSRunning == TRUE) {                           /* Find HPT if multitasking has star
 2289              		.loc 1 319 0
 2290 0620 64309FE5 		ldr	r3, .L31+8
 2291 0624 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2292 0628 010053E3 		cmp	r3, #1
 2293 062c 0B00001A 		bne	.L30
 320:../os_core/os_task.c ****                 OS_Sched();
 2294              		.loc 1 320 0
 2295 0630 FEFFFFEB 		bl	OS_Sched
 2296 0634 090000EA 		b	.L30
 2297              	.L29:
 321:../os_core/os_task.c ****             }
 322:../os_core/os_task.c ****         } else {
 323:../os_core/os_task.c ****             OS_ENTER_CRITICAL();
 2298              		.loc 1 323 0
 2299              	@ 323 "../os_core/os_task.c" 1
 2300 0638 00000FE1 		mrs   r0, cpsr
 2301              	@ 0 "" 2
 2302              	@ 323 "../os_core/os_task.c" 1
 2303 063c 04002DE5 		stmfd sp!, {r0}
 2304              	@ 0 "" 2
 2305              	@ 323 "../os_core/os_task.c" 1
 2306 0640 C00080E3 		orr   r0, r0, #0b11000000
 2307              	@ 0 "" 2
 2308              	@ 323 "../os_core/os_task.c" 1
 2309 0644 00F021E1 		msr   cpsr_c, r0
 2310              	@ 0 "" 2
 324:../os_core/os_task.c ****             OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to othe
 2311              		.loc 1 324 0
 2312 0648 21205BE5 		ldrb	r2, [fp, #-33]	@ zero_extendqisi2
 2313 064c 34309FE5 		ldr	r3, .L31+4
 2314 0650 0010A0E3 		mov	r1, #0
 2315 0654 021183E7 		str	r1, [r3, r2, asl #2]
 325:../os_core/os_task.c ****             OS_EXIT_CRITICAL();
 2316              		.loc 1 325 0
 2317              	@ 325 "../os_core/os_task.c" 1
 2318 0658 04009DE4 		ldmfd sp!, {r0}
 2319              	@ 0 "" 2
 2320              	@ 325 "../os_core/os_task.c" 1
 2321 065c 00F021E1 		msr   cpsr_c, r0
 2322              	@ 0 "" 2
 2323              	.L30:
 326:../os_core/os_task.c ****         }
 327:../os_core/os_task.c ****         return (err);
 2324              		.loc 1 327 0
 2325 0660 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2326 0664 020000EA 		b	.L26
 2327              	.L28:
 328:../os_core/os_task.c ****     }
 329:../os_core/os_task.c ****     OS_EXIT_CRITICAL();
 2328              		.loc 1 329 0
 2329              	@ 329 "../os_core/os_task.c" 1
 2330 0668 04009DE4 		ldmfd sp!, {r0}
 2331              	@ 0 "" 2
 2332              	@ 329 "../os_core/os_task.c" 1
 2333 066c 00F021E1 		msr   cpsr_c, r0
 2334              	@ 0 "" 2
 330:../os_core/os_task.c ****     return (OS_PRIO_EXIST);
 2335              		.loc 1 330 0
 2336 0670 2830A0E3 		mov	r3, #40
 2337              	.L26:
 331:../os_core/os_task.c **** }
 2338              		.loc 1 331 0
 2339 0674 0300A0E1 		mov	r0, r3
 2340 0678 0CD04BE2 		sub	sp, fp, #12
 2341 067c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2342 0680 1EFF2FE1 		bx	lr
 2343              	.L32:
 2344              		.align	2
 2345              	.L31:
 2346 0684 00000000 		.word	OSIntNesting
 2347 0688 00000000 		.word	OSTCBPrioTbl
 2348 068c 00000000 		.word	OSRunning
 2349              		.cfi_endproc
 2350              	.LFE2:
 2352              		.align	2
 2353              		.global	OSTaskDel
 2355              	OSTaskDel:
 2356              	.LFB3:
 332:../os_core/os_task.c **** #endif
 333:../os_core/os_task.c **** /*$PAGE*/
 334:../os_core/os_task.c **** /*
 335:../os_core/os_task.c **** ***************************************************************************************************
 336:../os_core/os_task.c **** *                                            DELETE A TASK
 337:../os_core/os_task.c **** *
 338:../os_core/os_task.c **** * Description: This function allows you to delete a task.  The calling task can delete itself by
 339:../os_core/os_task.c **** *              its own priority number.  The deleted task is returned to the dormant state and can 
 340:../os_core/os_task.c **** *              re-activated by creating the deleted task again.
 341:../os_core/os_task.c **** *
 342:../os_core/os_task.c **** * Arguments  : prio    is the priority of the task to delete.  Note that you can explicitely delete
 343:../os_core/os_task.c **** *                      the current task without knowing its priority level by setting 'prio' to
 344:../os_core/os_task.c **** *                      OS_PRIO_SELF.
 345:../os_core/os_task.c **** *
 346:../os_core/os_task.c **** * Returns    : OS_NO_ERR           if the call is successful
 347:../os_core/os_task.c **** *              OS_TASK_DEL_IDLE    if you attempted to delete uC/OS-II's idle task
 348:../os_core/os_task.c **** *              OS_PRIO_INVALID     if the priority you specify is higher that the maximum allowed
 349:../os_core/os_task.c **** *                                  (i.e. >= OS_LOWEST_PRIO) or, you have not specified OS_PRIO_SELF
 350:../os_core/os_task.c **** *              OS_TASK_DEL_ERR     if the task you want to delete does not exist.
 351:../os_core/os_task.c **** *              OS_TASK_NOT_EXIST   if the task is assigned to a Mutex PIP.
 352:../os_core/os_task.c **** *              OS_TASK_DEL_ISR     if you tried to delete a task from an ISR
 353:../os_core/os_task.c **** *
 354:../os_core/os_task.c **** * Notes      : 1) To reduce interrupt latency, OSTaskDel() 'disables' the task:
 355:../os_core/os_task.c **** *                    a) by making it not ready
 356:../os_core/os_task.c **** *                    b) by removing it from any wait lists
 357:../os_core/os_task.c **** *                    c) by preventing OSTimeTick() from making the task ready to run.
 358:../os_core/os_task.c **** *                 The task can then be 'unlinked' from the miscellaneous structures in uC/OS-II.
 359:../os_core/os_task.c **** *              2) The function OS_Dummy() is called after OS_EXIT_CRITICAL() because, on most proce
 360:../os_core/os_task.c **** *                 the next instruction following the enable interrupt instruction is ignored.  
 361:../os_core/os_task.c **** *              3) An ISR cannot delete a task.
 362:../os_core/os_task.c **** *              4) The lock nesting counter is incremented because, for a brief instant, if the curr
 363:../os_core/os_task.c **** *                 task is being deleted, the current task would not be able to be rescheduled becau
 364:../os_core/os_task.c **** *                 is removed from the ready list.  Incrementing the nesting counter prevents anothe
 365:../os_core/os_task.c **** *                 from being schedule.  This means that an ISR would return to the current task whi
 366:../os_core/os_task.c **** *                 being deleted.  The rest of the deletion would thus be able to be completed.
 367:../os_core/os_task.c **** ***************************************************************************************************
 368:../os_core/os_task.c **** */
 369:../os_core/os_task.c **** /*$PAGE*/
 370:../os_core/os_task.c **** #if OS_TASK_DEL_EN > 0
 371:../os_core/os_task.c **** INT8U  OSTaskDel (INT8U prio)
 372:../os_core/os_task.c **** {
 2357              		.loc 1 372 0
 2358              		.cfi_startproc
 2359              		@ Function supports interworking.
 2360              		@ args = 0, pretend = 0, frame = 24
 2361              		@ frame_needed = 1, uses_anonymous_args = 0
 2362 0690 0DC0A0E1 		mov	ip, sp
 2363              	.LCFI6:
 2364              		.cfi_def_cfa_register 12
 2365 0694 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2366 0698 04B04CE2 		sub	fp, ip, #4
 2367              		.cfi_offset 14, -8
 2368              		.cfi_offset 13, -12
 2369              		.cfi_offset 11, -16
 2370              	.LCFI7:
 2371              		.cfi_def_cfa 11, 4
 2372 069c 18D04DE2 		sub	sp, sp, #24
 2373 06a0 0030A0E1 		mov	r3, r0
 2374 06a4 1D304BE5 		strb	r3, [fp, #-29]
 373:../os_core/os_task.c **** #if OS_EVENT_EN
 374:../os_core/os_task.c ****     OS_EVENT     *pevent;
 375:../os_core/os_task.c **** #endif    
 376:../os_core/os_task.c **** #if (OS_VERSION >= 251) && (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
 377:../os_core/os_task.c ****     OS_FLAG_NODE *pnode;
 378:../os_core/os_task.c **** #endif
 379:../os_core/os_task.c ****     OS_TCB       *ptcb;
 380:../os_core/os_task.c **** 	INT8U         y;
 381:../os_core/os_task.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
 382:../os_core/os_task.c ****     OS_CPU_SR     cpu_sr;
 383:../os_core/os_task.c **** 
 384:../os_core/os_task.c **** 
 385:../os_core/os_task.c **** 
 386:../os_core/os_task.c ****     cpu_sr = 0;                                                 /* Prevent compiler warning        
 387:../os_core/os_task.c **** #endif    
 388:../os_core/os_task.c ****     if (OSIntNesting > 0) {                                     /* See if trying to delete from ISR
 2375              		.loc 1 388 0
 2376 06a8 98339FE5 		ldr	r3, .L48
 2377 06ac 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2378 06b0 000053E3 		cmp	r3, #0
 2379 06b4 0100000A 		beq	.L34
 389:../os_core/os_task.c ****         return (OS_TASK_DEL_ISR);
 2380              		.loc 1 389 0
 2381 06b8 3F30A0E3 		mov	r3, #63
 2382 06bc DD0000EA 		b	.L35
 2383              	.L34:
 390:../os_core/os_task.c ****     }
 391:../os_core/os_task.c **** #if OS_ARG_CHK_EN > 0
 392:../os_core/os_task.c ****     if (prio == OS_IDLE_PRIO) {                                 /* Not allowed to delete idle task 
 2384              		.loc 1 392 0
 2385 06c0 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 2386 06c4 3F0053E3 		cmp	r3, #63
 2387 06c8 0100001A 		bne	.L36
 393:../os_core/os_task.c ****         return (OS_TASK_DEL_IDLE);
 2388              		.loc 1 393 0
 2389 06cc 3D30A0E3 		mov	r3, #61
 2390 06d0 D80000EA 		b	.L35
 2391              	.L36:
 394:../os_core/os_task.c ****     }
 395:../os_core/os_task.c ****     if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?           
 2392              		.loc 1 395 0
 2393 06d4 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 2394 06d8 3E0053E3 		cmp	r3, #62
 2395 06dc 0400009A 		bls	.L37
 396:../os_core/os_task.c ****         if (prio != OS_PRIO_SELF) {       
 2396              		.loc 1 396 0
 2397 06e0 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 2398 06e4 FF0053E3 		cmp	r3, #255
 2399 06e8 0100000A 		beq	.L37
 397:../os_core/os_task.c ****             return (OS_PRIO_INVALID);
 2400              		.loc 1 397 0
 2401 06ec 2A30A0E3 		mov	r3, #42
 2402 06f0 D00000EA 		b	.L35
 2403              	.L37:
 398:../os_core/os_task.c ****         }
 399:../os_core/os_task.c ****     }
 400:../os_core/os_task.c **** #endif
 401:../os_core/os_task.c ****     OS_ENTER_CRITICAL();
 2404              		.loc 1 401 0
 2405              	@ 401 "../os_core/os_task.c" 1
 2406 06f4 00000FE1 		mrs   r0, cpsr
 2407              	@ 0 "" 2
 2408              	@ 401 "../os_core/os_task.c" 1
 2409 06f8 04002DE5 		stmfd sp!, {r0}
 2410              	@ 0 "" 2
 2411              	@ 401 "../os_core/os_task.c" 1
 2412 06fc C00080E3 		orr   r0, r0, #0b11000000
 2413              	@ 0 "" 2
 2414              	@ 401 "../os_core/os_task.c" 1
 2415 0700 00F021E1 		msr   cpsr_c, r0
 2416              	@ 0 "" 2
 402:../os_core/os_task.c ****     if (prio == OS_PRIO_SELF) {                                 /* See if requesting to delete self
 2417              		.loc 1 402 0
 2418 0704 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 2419 0708 FF0053E3 		cmp	r3, #255
 2420 070c 0300001A 		bne	.L38
 403:../os_core/os_task.c ****         prio = OSTCBCur->OSTCBPrio;                             /* Set priority to delete to curren
 2421              		.loc 1 403 0
 2422 0710 34339FE5 		ldr	r3, .L48+4
 2423 0714 003093E5 		ldr	r3, [r3, #0]
 2424 0718 2E30D3E5 		ldrb	r3, [r3, #46]
 2425 071c 1D304BE5 		strb	r3, [fp, #-29]
 2426              	.L38:
 404:../os_core/os_task.c ****     }
 405:../os_core/os_task.c ****     ptcb = OSTCBPrioTbl[prio];
 2427              		.loc 1 405 0
 2428 0720 1D205BE5 		ldrb	r2, [fp, #-29]	@ zero_extendqisi2
 2429 0724 24339FE5 		ldr	r3, .L48+8
 2430 0728 023193E7 		ldr	r3, [r3, r2, asl #2]
 2431 072c 10300BE5 		str	r3, [fp, #-16]
 406:../os_core/os_task.c ****     if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist       
 2432              		.loc 1 406 0
 2433 0730 10301BE5 		ldr	r3, [fp, #-16]
 2434 0734 000053E3 		cmp	r3, #0
 2435 0738 0300001A 		bne	.L39
 407:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 2436              		.loc 1 407 0
 2437              	@ 407 "../os_core/os_task.c" 1
 2438 073c 04009DE4 		ldmfd sp!, {r0}
 2439              	@ 0 "" 2
 2440              	@ 407 "../os_core/os_task.c" 1
 2441 0740 00F021E1 		msr   cpsr_c, r0
 2442              	@ 0 "" 2
 408:../os_core/os_task.c ****         return (OS_TASK_DEL_ERR);
 2443              		.loc 1 408 0
 2444 0744 3C30A0E3 		mov	r3, #60
 2445 0748 BA0000EA 		b	.L35
 2446              	.L39:
 409:../os_core/os_task.c ****     }
 410:../os_core/os_task.c ****     if (ptcb == (OS_TCB *)1) {                                  /* Must not be assigned to Mutex   
 2447              		.loc 1 410 0
 2448 074c 10301BE5 		ldr	r3, [fp, #-16]
 2449 0750 010053E3 		cmp	r3, #1
 2450 0754 0300001A 		bne	.L40
 411:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 2451              		.loc 1 411 0
 2452              	@ 411 "../os_core/os_task.c" 1
 2453 0758 04009DE4 		ldmfd sp!, {r0}
 2454              	@ 0 "" 2
 2455              	@ 411 "../os_core/os_task.c" 1
 2456 075c 00F021E1 		msr   cpsr_c, r0
 2457              	@ 0 "" 2
 412:../os_core/os_task.c ****         return (OS_TASK_NOT_EXIST);
 2458              		.loc 1 412 0
 2459 0760 0B30A0E3 		mov	r3, #11
 2460 0764 B30000EA 		b	.L35
 2461              	.L40:
 413:../os_core/os_task.c ****     }
 414:../os_core/os_task.c **** 	y            =  ptcb->OSTCBY;
 2462              		.loc 1 414 0
 2463 0768 10301BE5 		ldr	r3, [fp, #-16]
 2464 076c 3030D3E5 		ldrb	r3, [r3, #48]
 2465 0770 11304BE5 		strb	r3, [fp, #-17]
 415:../os_core/os_task.c **** 	OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
 2466              		.loc 1 415 0
 2467 0774 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2468 0778 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 2469 077c D0129FE5 		ldr	r1, .L48+12
 2470 0780 0220D1E7 		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2471 0784 FF1002E2 		and	r1, r2, #255
 2472 0788 10201BE5 		ldr	r2, [fp, #-16]
 2473 078c 3120D2E5 		ldrb	r2, [r2, #49]	@ zero_extendqisi2
 2474 0790 FF2002E2 		and	r2, r2, #255
 2475 0794 0220E0E1 		mvn	r2, r2
 2476 0798 FF2002E2 		and	r2, r2, #255
 2477 079c 022001E0 		and	r2, r1, r2
 2478 07a0 FF2002E2 		and	r2, r2, #255
 2479 07a4 FF1002E2 		and	r1, r2, #255
 2480 07a8 A4229FE5 		ldr	r2, .L48+12
 2481 07ac 0310C2E7 		strb	r1, [r2, r3]
 416:../os_core/os_task.c ****     if (OSRdyTbl[y] == 0x00) {                                  /* Make task not ready             
 2482              		.loc 1 416 0
 2483 07b0 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2484 07b4 98229FE5 		ldr	r2, .L48+12
 2485 07b8 0330D2E7 		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2486 07bc 000053E3 		cmp	r3, #0
 2487 07c0 0C00001A 		bne	.L41
 417:../os_core/os_task.c ****         OSRdyGrp &= ~ptcb->OSTCBBitY;
 2488              		.loc 1 417 0
 2489 07c4 10301BE5 		ldr	r3, [fp, #-16]
 2490 07c8 3230D3E5 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 2491 07cc FF3003E2 		and	r3, r3, #255
 2492 07d0 0330E0E1 		mvn	r3, r3
 2493 07d4 FF2003E2 		and	r2, r3, #255
 2494 07d8 78329FE5 		ldr	r3, .L48+16
 2495 07dc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2496 07e0 FF3003E2 		and	r3, r3, #255
 2497 07e4 033002E0 		and	r3, r2, r3
 2498 07e8 FF3003E2 		and	r3, r3, #255
 2499 07ec FF2003E2 		and	r2, r3, #255
 2500 07f0 60329FE5 		ldr	r3, .L48+16
 2501 07f4 0020C3E5 		strb	r2, [r3, #0]
 2502              	.L41:
 418:../os_core/os_task.c ****     }
 419:../os_core/os_task.c **** #if OS_EVENT_EN
 420:../os_core/os_task.c ****     pevent = ptcb->OSTCBEventPtr;
 2503              		.loc 1 420 0
 2504 07f8 10301BE5 		ldr	r3, [fp, #-16]
 2505 07fc 1C3093E5 		ldr	r3, [r3, #28]
 2506 0800 18300BE5 		str	r3, [fp, #-24]
 421:../os_core/os_task.c ****     if (pevent != (OS_EVENT *)0) {                              /* If task is waiting on event     
 2507              		.loc 1 421 0
 2508 0804 18301BE5 		ldr	r3, [fp, #-24]
 2509 0808 000053E3 		cmp	r3, #0
 2510 080c 2900000A 		beq	.L42
 422:../os_core/os_task.c **** 	    pevent->OSEventTbl[y] &= ~ptcb->OSTCBBitX;
 2511              		.loc 1 422 0
 2512 0810 11105BE5 		ldrb	r1, [fp, #-17]	@ zero_extendqisi2
 2513 0814 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 2514 0818 18001BE5 		ldr	r0, [fp, #-24]
 2515 081c 0830A0E3 		mov	r3, #8
 2516 0820 022080E0 		add	r2, r0, r2
 2517 0824 033082E0 		add	r3, r2, r3
 2518 0828 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2519 082c FF2003E2 		and	r2, r3, #255
 2520 0830 10301BE5 		ldr	r3, [fp, #-16]
 2521 0834 3130D3E5 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 2522 0838 FF3003E2 		and	r3, r3, #255
 2523 083c 0330E0E1 		mvn	r3, r3
 2524 0840 FF3003E2 		and	r3, r3, #255
 2525 0844 033002E0 		and	r3, r2, r3
 2526 0848 FF3003E2 		and	r3, r3, #255
 2527 084c FF2003E2 		and	r2, r3, #255
 2528 0850 18001BE5 		ldr	r0, [fp, #-24]
 2529 0854 0830A0E3 		mov	r3, #8
 2530 0858 011080E0 		add	r1, r0, r1
 2531 085c 033081E0 		add	r3, r1, r3
 2532 0860 0020C3E5 		strb	r2, [r3, #0]
 423:../os_core/os_task.c ****         if (pevent->OSEventTbl[y] == 0) {                       /* ... remove task from ...        
 2533              		.loc 1 423 0
 2534 0864 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 2535 0868 18101BE5 		ldr	r1, [fp, #-24]
 2536 086c 0830A0E3 		mov	r3, #8
 2537 0870 022081E0 		add	r2, r1, r2
 2538 0874 033082E0 		add	r3, r2, r3
 2539 0878 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2540 087c 000053E3 		cmp	r3, #0
 2541 0880 0C00001A 		bne	.L42
 424:../os_core/os_task.c ****             pevent->OSEventGrp &= ~ptcb->OSTCBBitY;             /* ... event ctrl block            
 2542              		.loc 1 424 0
 2543 0884 18301BE5 		ldr	r3, [fp, #-24]
 2544 0888 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2545 088c FF2003E2 		and	r2, r3, #255
 2546 0890 10301BE5 		ldr	r3, [fp, #-16]
 2547 0894 3230D3E5 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 2548 0898 FF3003E2 		and	r3, r3, #255
 2549 089c 0330E0E1 		mvn	r3, r3
 2550 08a0 FF3003E2 		and	r3, r3, #255
 2551 08a4 033002E0 		and	r3, r2, r3
 2552 08a8 FF3003E2 		and	r3, r3, #255
 2553 08ac FF2003E2 		and	r2, r3, #255
 2554 08b0 18301BE5 		ldr	r3, [fp, #-24]
 2555 08b4 0120C3E5 		strb	r2, [r3, #1]
 2556              	.L42:
 425:../os_core/os_task.c ****         }
 426:../os_core/os_task.c ****     }
 427:../os_core/os_task.c **** #endif
 428:../os_core/os_task.c **** #if (OS_VERSION >= 251) && (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
 429:../os_core/os_task.c ****     pnode = ptcb->OSTCBFlagNode;
 2557              		.loc 1 429 0
 2558 08b8 10301BE5 		ldr	r3, [fp, #-16]
 2559 08bc 243093E5 		ldr	r3, [r3, #36]
 2560 08c0 1C300BE5 		str	r3, [fp, #-28]
 430:../os_core/os_task.c ****     if (pnode != (OS_FLAG_NODE *)0) {                           /* If task is waiting on event flag
 2561              		.loc 1 430 0
 2562 08c4 1C301BE5 		ldr	r3, [fp, #-28]
 2563 08c8 000053E3 		cmp	r3, #0
 2564 08cc 0100000A 		beq	.L43
 431:../os_core/os_task.c ****         OS_FlagUnlink(pnode);                                   /* Remove from wait list           
 2565              		.loc 1 431 0
 2566 08d0 1C001BE5 		ldr	r0, [fp, #-28]
 2567 08d4 FEFFFFEB 		bl	OS_FlagUnlink
 2568              	.L43:
 432:../os_core/os_task.c ****     }
 433:../os_core/os_task.c **** #endif
 434:../os_core/os_task.c ****     ptcb->OSTCBDly    = 0;                                      /* Prevent OSTimeTick() from updati
 2569              		.loc 1 434 0
 2570 08d8 10301BE5 		ldr	r3, [fp, #-16]
 2571 08dc 0020A0E3 		mov	r2, #0
 2572 08e0 BA22C3E1 		strh	r2, [r3, #42]	@ movhi
 435:../os_core/os_task.c ****     ptcb->OSTCBStat   = OS_STAT_RDY;                            /* Prevent task from being resumed 
 2573              		.loc 1 435 0
 2574 08e4 10301BE5 		ldr	r3, [fp, #-16]
 2575 08e8 0020A0E3 		mov	r2, #0
 2576 08ec 2C20C3E5 		strb	r2, [r3, #44]
 436:../os_core/os_task.c ****     ptcb->OSTCBPendTO = FALSE;
 2577              		.loc 1 436 0
 2578 08f0 10301BE5 		ldr	r3, [fp, #-16]
 2579 08f4 0020A0E3 		mov	r2, #0
 2580 08f8 2D20C3E5 		strb	r2, [r3, #45]
 437:../os_core/os_task.c **** 	if (OSLockNesting < 255u) {                                 /* Make sure we don't context switch  
 2581              		.loc 1 437 0
 2582 08fc 58319FE5 		ldr	r3, .L48+20
 2583 0900 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2584 0904 FF0053E3 		cmp	r3, #255
 2585 0908 0500000A 		beq	.L44
 438:../os_core/os_task.c ****         OSLockNesting++;
 2586              		.loc 1 438 0
 2587 090c 48319FE5 		ldr	r3, .L48+20
 2588 0910 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2589 0914 013083E2 		add	r3, r3, #1
 2590 0918 FF2003E2 		and	r2, r3, #255
 2591 091c 38319FE5 		ldr	r3, .L48+20
 2592 0920 0020C3E5 		strb	r2, [r3, #0]
 2593              	.L44:
 439:../os_core/os_task.c **** 	}
 440:../os_core/os_task.c ****     OS_EXIT_CRITICAL();                                         /* Enabling INT. ignores next instr
 2594              		.loc 1 440 0
 2595              	@ 440 "../os_core/os_task.c" 1
 2596 0924 04009DE4 		ldmfd sp!, {r0}
 2597              	@ 0 "" 2
 2598              	@ 440 "../os_core/os_task.c" 1
 2599 0928 00F021E1 		msr   cpsr_c, r0
 2600              	@ 0 "" 2
 441:../os_core/os_task.c ****     OS_Dummy();                                                 /* ... Dummy ensures that INTs will
 2601              		.loc 1 441 0
 2602 092c FEFFFFEB 		bl	OS_Dummy
 442:../os_core/os_task.c ****     OS_ENTER_CRITICAL();                                        /* ... disabled HERE!              
 2603              		.loc 1 442 0
 2604              	@ 442 "../os_core/os_task.c" 1
 2605 0930 00000FE1 		mrs   r0, cpsr
 2606              	@ 0 "" 2
 2607              	@ 442 "../os_core/os_task.c" 1
 2608 0934 04002DE5 		stmfd sp!, {r0}
 2609              	@ 0 "" 2
 2610              	@ 442 "../os_core/os_task.c" 1
 2611 0938 C00080E3 		orr   r0, r0, #0b11000000
 2612              	@ 0 "" 2
 2613              	@ 442 "../os_core/os_task.c" 1
 2614 093c 00F021E1 		msr   cpsr_c, r0
 2615              	@ 0 "" 2
 443:../os_core/os_task.c **** 	if (OSLockNesting > 0) {                                    /* Remove context switch lock         
 2616              		.loc 1 443 0
 2617 0940 14319FE5 		ldr	r3, .L48+20
 2618 0944 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2619 0948 000053E3 		cmp	r3, #0
 2620 094c 0500000A 		beq	.L45
 444:../os_core/os_task.c ****         OSLockNesting--;
 2621              		.loc 1 444 0
 2622 0950 04319FE5 		ldr	r3, .L48+20
 2623 0954 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2624 0958 013043E2 		sub	r3, r3, #1
 2625 095c FF2003E2 		and	r2, r3, #255
 2626 0960 F4309FE5 		ldr	r3, .L48+20
 2627 0964 0020C3E5 		strb	r2, [r3, #0]
 2628              	.L45:
 445:../os_core/os_task.c **** 	}
 446:../os_core/os_task.c ****     OSTaskDelHook(ptcb);                                        /* Call user defined hook          
 2629              		.loc 1 446 0
 2630 0968 10001BE5 		ldr	r0, [fp, #-16]
 2631 096c FEFFFFEB 		bl	OSTaskDelHook
 447:../os_core/os_task.c ****     OSTaskCtr--;                                                /* One less task being managed     
 2632              		.loc 1 447 0
 2633 0970 E8309FE5 		ldr	r3, .L48+24
 2634 0974 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2635 0978 013043E2 		sub	r3, r3, #1
 2636 097c FF2003E2 		and	r2, r3, #255
 2637 0980 D8309FE5 		ldr	r3, .L48+24
 2638 0984 0020C3E5 		strb	r2, [r3, #0]
 448:../os_core/os_task.c ****     OSTCBPrioTbl[prio] = (OS_TCB *)0;                           /* Clear old priority entry        
 2639              		.loc 1 448 0
 2640 0988 1D205BE5 		ldrb	r2, [fp, #-29]	@ zero_extendqisi2
 2641 098c BC309FE5 		ldr	r3, .L48+8
 2642 0990 0010A0E3 		mov	r1, #0
 2643 0994 021183E7 		str	r1, [r3, r2, asl #2]
 449:../os_core/os_task.c ****     if (ptcb->OSTCBPrev == (OS_TCB *)0) {                       /* Remove from TCB chain           
 2644              		.loc 1 449 0
 2645 0998 10301BE5 		ldr	r3, [fp, #-16]
 2646 099c 183093E5 		ldr	r3, [r3, #24]
 2647 09a0 000053E3 		cmp	r3, #0
 2648 09a4 0800001A 		bne	.L46
 450:../os_core/os_task.c ****         ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 2649              		.loc 1 450 0
 2650 09a8 10301BE5 		ldr	r3, [fp, #-16]
 2651 09ac 143093E5 		ldr	r3, [r3, #20]
 2652 09b0 0020A0E3 		mov	r2, #0
 2653 09b4 182083E5 		str	r2, [r3, #24]
 451:../os_core/os_task.c ****         OSTCBList                  = ptcb->OSTCBNext;
 2654              		.loc 1 451 0
 2655 09b8 10301BE5 		ldr	r3, [fp, #-16]
 2656 09bc 142093E5 		ldr	r2, [r3, #20]
 2657 09c0 9C309FE5 		ldr	r3, .L48+28
 2658 09c4 002083E5 		str	r2, [r3, #0]
 2659 09c8 090000EA 		b	.L47
 2660              	.L46:
 452:../os_core/os_task.c ****     } else {
 453:../os_core/os_task.c ****         ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 2661              		.loc 1 453 0
 2662 09cc 10301BE5 		ldr	r3, [fp, #-16]
 2663 09d0 183093E5 		ldr	r3, [r3, #24]
 2664 09d4 10201BE5 		ldr	r2, [fp, #-16]
 2665 09d8 142092E5 		ldr	r2, [r2, #20]
 2666 09dc 142083E5 		str	r2, [r3, #20]
 454:../os_core/os_task.c ****         ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 2667              		.loc 1 454 0
 2668 09e0 10301BE5 		ldr	r3, [fp, #-16]
 2669 09e4 143093E5 		ldr	r3, [r3, #20]
 2670 09e8 10201BE5 		ldr	r2, [fp, #-16]
 2671 09ec 182092E5 		ldr	r2, [r2, #24]
 2672 09f0 182083E5 		str	r2, [r3, #24]
 2673              	.L47:
 455:../os_core/os_task.c ****     }
 456:../os_core/os_task.c ****     ptcb->OSTCBNext   = OSTCBFreeList;                          /* Return TCB to free TCB list     
 2674              		.loc 1 456 0
 2675 09f4 6C309FE5 		ldr	r3, .L48+32
 2676 09f8 002093E5 		ldr	r2, [r3, #0]
 2677 09fc 10301BE5 		ldr	r3, [fp, #-16]
 2678 0a00 142083E5 		str	r2, [r3, #20]
 457:../os_core/os_task.c ****     OSTCBFreeList     = ptcb;
 2679              		.loc 1 457 0
 2680 0a04 5C309FE5 		ldr	r3, .L48+32
 2681 0a08 10201BE5 		ldr	r2, [fp, #-16]
 2682 0a0c 002083E5 		str	r2, [r3, #0]
 458:../os_core/os_task.c **** #if OS_TASK_NAME_SIZE > 1
 459:../os_core/os_task.c ****     ptcb->OSTCBTaskName[0] = '?';                               /* Unknown name                    
 2683              		.loc 1 459 0
 2684 0a10 10301BE5 		ldr	r3, [fp, #-16]
 2685 0a14 3F20A0E3 		mov	r2, #63
 2686 0a18 4820C3E5 		strb	r2, [r3, #72]
 460:../os_core/os_task.c ****     ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2687              		.loc 1 460 0
 2688 0a1c 10301BE5 		ldr	r3, [fp, #-16]
 2689 0a20 0020A0E3 		mov	r2, #0
 2690 0a24 4920C3E5 		strb	r2, [r3, #73]
 461:../os_core/os_task.c **** #endif
 462:../os_core/os_task.c ****     OS_EXIT_CRITICAL();
 2691              		.loc 1 462 0
 2692              	@ 462 "../os_core/os_task.c" 1
 2693 0a28 04009DE4 		ldmfd sp!, {r0}
 2694              	@ 0 "" 2
 2695              	@ 462 "../os_core/os_task.c" 1
 2696 0a2c 00F021E1 		msr   cpsr_c, r0
 2697              	@ 0 "" 2
 463:../os_core/os_task.c ****     OS_Sched();                                                 /* Find new highest priority task  
 2698              		.loc 1 463 0
 2699 0a30 FEFFFFEB 		bl	OS_Sched
 464:../os_core/os_task.c ****     return (OS_NO_ERR);
 2700              		.loc 1 464 0
 2701 0a34 0030A0E3 		mov	r3, #0
 2702              	.L35:
 465:../os_core/os_task.c **** }
 2703              		.loc 1 465 0
 2704 0a38 0300A0E1 		mov	r0, r3
 2705 0a3c 0CD04BE2 		sub	sp, fp, #12
 2706 0a40 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2707 0a44 1EFF2FE1 		bx	lr
 2708              	.L49:
 2709              		.align	2
 2710              	.L48:
 2711 0a48 00000000 		.word	OSIntNesting
 2712 0a4c 00000000 		.word	OSTCBCur
 2713 0a50 00000000 		.word	OSTCBPrioTbl
 2714 0a54 00000000 		.word	OSRdyTbl
 2715 0a58 00000000 		.word	OSRdyGrp
 2716 0a5c 00000000 		.word	OSLockNesting
 2717 0a60 00000000 		.word	OSTaskCtr
 2718 0a64 00000000 		.word	OSTCBList
 2719 0a68 00000000 		.word	OSTCBFreeList
 2720              		.cfi_endproc
 2721              	.LFE3:
 2723              		.align	2
 2724              		.global	OSTaskDelReq
 2726              	OSTaskDelReq:
 2727              	.LFB4:
 466:../os_core/os_task.c **** #endif
 467:../os_core/os_task.c **** /*$PAGE*/
 468:../os_core/os_task.c **** /*
 469:../os_core/os_task.c **** ***************************************************************************************************
 470:../os_core/os_task.c **** *                                    REQUEST THAT A TASK DELETE ITSELF
 471:../os_core/os_task.c **** *
 472:../os_core/os_task.c **** * Description: This function is used to:
 473:../os_core/os_task.c **** *                   a) notify a task to delete itself.
 474:../os_core/os_task.c **** *                   b) to see if a task requested that the current task delete itself.
 475:../os_core/os_task.c **** *              This function is a little tricky to understand.  Basically, you have a task that nee
 476:../os_core/os_task.c **** *              to be deleted however, this task has resources that it has allocated (memory buffers
 477:../os_core/os_task.c **** *              semaphores, mailboxes, queues etc.).  The task cannot be deleted otherwise these
 478:../os_core/os_task.c **** *              resources would not be freed.  The requesting task calls OSTaskDelReq() to indicate 
 479:../os_core/os_task.c **** *              the task needs to be deleted.  Deleting of the task is however, deferred to the task
 480:../os_core/os_task.c **** *              be deleted.  For example, suppose that task #10 needs to be deleted.  The requesting
 481:../os_core/os_task.c **** *              example, task #5, would call OSTaskDelReq(10).  When task #10 gets to execute, it ca
 482:../os_core/os_task.c **** *              this function by specifying OS_PRIO_SELF and monitors the returned value.  If the re
 483:../os_core/os_task.c **** *              value is OS_TASK_DEL_REQ, another task requested a task delete.  Task #10 would look
 484:../os_core/os_task.c **** *              this:
 485:../os_core/os_task.c **** *
 486:../os_core/os_task.c **** *                   void Task(void *p_arg)
 487:../os_core/os_task.c **** *                   {
 488:../os_core/os_task.c **** *                       .
 489:../os_core/os_task.c **** *                       .
 490:../os_core/os_task.c **** *                       while (1) {
 491:../os_core/os_task.c **** *                           OSTimeDly(1);
 492:../os_core/os_task.c **** *                           if (OSTaskDelReq(OS_PRIO_SELF) == OS_TASK_DEL_REQ) {
 493:../os_core/os_task.c **** *                               Release any owned resources;
 494:../os_core/os_task.c **** *                               De-allocate any dynamic memory;
 495:../os_core/os_task.c **** *                               OSTaskDel(OS_PRIO_SELF);
 496:../os_core/os_task.c **** *                           }
 497:../os_core/os_task.c **** *                       }
 498:../os_core/os_task.c **** *                   }
 499:../os_core/os_task.c **** *
 500:../os_core/os_task.c **** * Arguments  : prio    is the priority of the task to request the delete from
 501:../os_core/os_task.c **** *
 502:../os_core/os_task.c **** * Returns    : OS_NO_ERR          if the task exist and the request has been registered
 503:../os_core/os_task.c **** *              OS_TASK_NOT_EXIST  if the task has been deleted.  This allows the caller to know whe
 504:../os_core/os_task.c **** *                                 the request has been executed.
 505:../os_core/os_task.c **** *              OS_TASK_DEL_ERR    if the task is assigned to a Mutex.
 506:../os_core/os_task.c **** *              OS_TASK_DEL_IDLE   if you requested to delete uC/OS-II's idle task
 507:../os_core/os_task.c **** *              OS_PRIO_INVALID    if the priority you specify is higher that the maximum allowed
 508:../os_core/os_task.c **** *                                 (i.e. >= OS_LOWEST_PRIO) or, you have not specified OS_PRIO_SELF.
 509:../os_core/os_task.c **** *              OS_TASK_DEL_REQ    if a task (possibly another task) requested that the running task
 510:../os_core/os_task.c **** *                                 deleted.
 511:../os_core/os_task.c **** ***************************************************************************************************
 512:../os_core/os_task.c **** */
 513:../os_core/os_task.c **** /*$PAGE*/
 514:../os_core/os_task.c **** #if OS_TASK_DEL_EN > 0
 515:../os_core/os_task.c **** INT8U  OSTaskDelReq (INT8U prio)
 516:../os_core/os_task.c **** {
 2728              		.loc 1 516 0
 2729              		.cfi_startproc
 2730              		@ Function supports interworking.
 2731              		@ args = 0, pretend = 0, frame = 16
 2732              		@ frame_needed = 1, uses_anonymous_args = 0
 2733 0a6c 0DC0A0E1 		mov	ip, sp
 2734              	.LCFI8:
 2735              		.cfi_def_cfa_register 12
 2736 0a70 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2737 0a74 04B04CE2 		sub	fp, ip, #4
 2738              		.cfi_offset 14, -8
 2739              		.cfi_offset 13, -12
 2740              		.cfi_offset 11, -16
 2741              	.LCFI9:
 2742              		.cfi_def_cfa 11, 4
 2743 0a78 10D04DE2 		sub	sp, sp, #16
 2744 0a7c 0030A0E1 		mov	r3, r0
 2745 0a80 15304BE5 		strb	r3, [fp, #-21]
 517:../os_core/os_task.c ****     INT8U      stat;
 518:../os_core/os_task.c ****     OS_TCB    *ptcb;
 519:../os_core/os_task.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
 520:../os_core/os_task.c ****     OS_CPU_SR  cpu_sr;
 521:../os_core/os_task.c **** 
 522:../os_core/os_task.c **** 
 523:../os_core/os_task.c **** 
 524:../os_core/os_task.c ****     cpu_sr = 0;                                                 /* Prevent compiler warning        
 525:../os_core/os_task.c **** #endif    
 526:../os_core/os_task.c **** #if OS_ARG_CHK_EN > 0
 527:../os_core/os_task.c ****     if (prio == OS_IDLE_PRIO) {                                 /* Not allowed to delete idle task 
 2746              		.loc 1 527 0
 2747 0a84 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2748 0a88 3F0053E3 		cmp	r3, #63
 2749 0a8c 0100001A 		bne	.L51
 528:../os_core/os_task.c ****         return (OS_TASK_DEL_IDLE);
 2750              		.loc 1 528 0
 2751 0a90 3D30A0E3 		mov	r3, #61
 2752 0a94 320000EA 		b	.L52
 2753              	.L51:
 529:../os_core/os_task.c ****     }
 530:../os_core/os_task.c ****     if (prio >= OS_LOWEST_PRIO) {						        /* Task priority valid ?               */
 2754              		.loc 1 530 0
 2755 0a98 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2756 0a9c 3E0053E3 		cmp	r3, #62
 2757 0aa0 0400009A 		bls	.L53
 531:../os_core/os_task.c ****         if (prio != OS_PRIO_SELF) {                       
 2758              		.loc 1 531 0
 2759 0aa4 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2760 0aa8 FF0053E3 		cmp	r3, #255
 2761 0aac 0100000A 		beq	.L53
 532:../os_core/os_task.c ****             return (OS_PRIO_INVALID);
 2762              		.loc 1 532 0
 2763 0ab0 2A30A0E3 		mov	r3, #42
 2764 0ab4 2A0000EA 		b	.L52
 2765              	.L53:
 533:../os_core/os_task.c **** 		}
 534:../os_core/os_task.c ****     }
 535:../os_core/os_task.c **** #endif
 536:../os_core/os_task.c ****     if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to .
 2766              		.loc 1 536 0
 2767 0ab8 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2768 0abc FF0053E3 		cmp	r3, #255
 2769 0ac0 0B00001A 		bne	.L54
 537:../os_core/os_task.c ****         OS_ENTER_CRITICAL();                                    /* ... this task to delete itself  
 2770              		.loc 1 537 0
 2771              	@ 537 "../os_core/os_task.c" 1
 2772 0ac4 00000FE1 		mrs   r0, cpsr
 2773              	@ 0 "" 2
 2774              	@ 537 "../os_core/os_task.c" 1
 2775 0ac8 04002DE5 		stmfd sp!, {r0}
 2776              	@ 0 "" 2
 2777              	@ 537 "../os_core/os_task.c" 1
 2778 0acc C00080E3 		orr   r0, r0, #0b11000000
 2779              	@ 0 "" 2
 2780              	@ 537 "../os_core/os_task.c" 1
 2781 0ad0 00F021E1 		msr   cpsr_c, r0
 2782              	@ 0 "" 2
 538:../os_core/os_task.c ****         stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller 
 2783              		.loc 1 538 0
 2784 0ad4 98309FE5 		ldr	r3, .L57
 2785 0ad8 003093E5 		ldr	r3, [r3, #0]
 2786 0adc 3330D3E5 		ldrb	r3, [r3, #51]
 2787 0ae0 0D304BE5 		strb	r3, [fp, #-13]
 539:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 2788              		.loc 1 539 0
 2789              	@ 539 "../os_core/os_task.c" 1
 2790 0ae4 04009DE4 		ldmfd sp!, {r0}
 2791              	@ 0 "" 2
 2792              	@ 539 "../os_core/os_task.c" 1
 2793 0ae8 00F021E1 		msr   cpsr_c, r0
 2794              	@ 0 "" 2
 540:../os_core/os_task.c ****         return (stat);
 2795              		.loc 1 540 0
 2796 0aec 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2797 0af0 1B0000EA 		b	.L52
 2798              	.L54:
 541:../os_core/os_task.c ****     }
 542:../os_core/os_task.c ****     OS_ENTER_CRITICAL();
 2799              		.loc 1 542 0
 2800              	@ 542 "../os_core/os_task.c" 1
 2801 0af4 00000FE1 		mrs   r0, cpsr
 2802              	@ 0 "" 2
 2803              	@ 542 "../os_core/os_task.c" 1
 2804 0af8 04002DE5 		stmfd sp!, {r0}
 2805              	@ 0 "" 2
 2806              	@ 542 "../os_core/os_task.c" 1
 2807 0afc C00080E3 		orr   r0, r0, #0b11000000
 2808              	@ 0 "" 2
 2809              	@ 542 "../os_core/os_task.c" 1
 2810 0b00 00F021E1 		msr   cpsr_c, r0
 2811              	@ 0 "" 2
 543:../os_core/os_task.c ****     ptcb = OSTCBPrioTbl[prio];
 2812              		.loc 1 543 0
 2813 0b04 15205BE5 		ldrb	r2, [fp, #-21]	@ zero_extendqisi2
 2814 0b08 68309FE5 		ldr	r3, .L57+4
 2815 0b0c 023193E7 		ldr	r3, [r3, r2, asl #2]
 2816 0b10 14300BE5 		str	r3, [fp, #-20]
 544:../os_core/os_task.c ****     if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist       
 2817              		.loc 1 544 0
 2818 0b14 14301BE5 		ldr	r3, [fp, #-20]
 2819 0b18 000053E3 		cmp	r3, #0
 2820 0b1c 0300001A 		bne	.L55
 545:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 2821              		.loc 1 545 0
 2822              	@ 545 "../os_core/os_task.c" 1
 2823 0b20 04009DE4 		ldmfd sp!, {r0}
 2824              	@ 0 "" 2
 2825              	@ 545 "../os_core/os_task.c" 1
 2826 0b24 00F021E1 		msr   cpsr_c, r0
 2827              	@ 0 "" 2
 546:../os_core/os_task.c ****         return (OS_TASK_NOT_EXIST);                             /* Task must already be deleted    
 2828              		.loc 1 546 0
 2829 0b28 0B30A0E3 		mov	r3, #11
 2830 0b2c 0C0000EA 		b	.L52
 2831              	.L55:
 547:../os_core/os_task.c ****     }
 548:../os_core/os_task.c ****     if (ptcb == (OS_TCB *)1) {                                  /* Must NOT be assigned to a Mutex 
 2832              		.loc 1 548 0
 2833 0b30 14301BE5 		ldr	r3, [fp, #-20]
 2834 0b34 010053E3 		cmp	r3, #1
 2835 0b38 0300001A 		bne	.L56
 549:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 2836              		.loc 1 549 0
 2837              	@ 549 "../os_core/os_task.c" 1
 2838 0b3c 04009DE4 		ldmfd sp!, {r0}
 2839              	@ 0 "" 2
 2840              	@ 549 "../os_core/os_task.c" 1
 2841 0b40 00F021E1 		msr   cpsr_c, r0
 2842              	@ 0 "" 2
 550:../os_core/os_task.c ****         return (OS_TASK_DEL_ERR);
 2843              		.loc 1 550 0
 2844 0b44 3C30A0E3 		mov	r3, #60
 2845 0b48 050000EA 		b	.L52
 2846              	.L56:
 551:../os_core/os_task.c ****     }
 552:../os_core/os_task.c ****     ptcb->OSTCBDelReq = OS_TASK_DEL_REQ;                        /* Set flag indicating task to be D
 2847              		.loc 1 552 0
 2848 0b4c 14301BE5 		ldr	r3, [fp, #-20]
 2849 0b50 3E20A0E3 		mov	r2, #62
 2850 0b54 3320C3E5 		strb	r2, [r3, #51]
 553:../os_core/os_task.c ****     OS_EXIT_CRITICAL();
 2851              		.loc 1 553 0
 2852              	@ 553 "../os_core/os_task.c" 1
 2853 0b58 04009DE4 		ldmfd sp!, {r0}
 2854              	@ 0 "" 2
 2855              	@ 553 "../os_core/os_task.c" 1
 2856 0b5c 00F021E1 		msr   cpsr_c, r0
 2857              	@ 0 "" 2
 554:../os_core/os_task.c ****     return (OS_NO_ERR);
 2858              		.loc 1 554 0
 2859 0b60 0030A0E3 		mov	r3, #0
 2860              	.L52:
 555:../os_core/os_task.c **** }
 2861              		.loc 1 555 0
 2862 0b64 0300A0E1 		mov	r0, r3
 2863 0b68 0CD04BE2 		sub	sp, fp, #12
 2864 0b6c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2865 0b70 1EFF2FE1 		bx	lr
 2866              	.L58:
 2867              		.align	2
 2868              	.L57:
 2869 0b74 00000000 		.word	OSTCBCur
 2870 0b78 00000000 		.word	OSTCBPrioTbl
 2871              		.cfi_endproc
 2872              	.LFE4:
 2874              		.align	2
 2875              		.global	OSTaskNameGet
 2877              	OSTaskNameGet:
 2878              	.LFB5:
 556:../os_core/os_task.c **** #endif
 557:../os_core/os_task.c **** /*$PAGE*/
 558:../os_core/os_task.c **** /*
 559:../os_core/os_task.c **** ***************************************************************************************************
 560:../os_core/os_task.c **** *                                        GET THE NAME OF A TASK
 561:../os_core/os_task.c **** *
 562:../os_core/os_task.c **** * Description: This function is called to obtain the name of a task.
 563:../os_core/os_task.c **** *
 564:../os_core/os_task.c **** * Arguments  : prio      is the priority of the task that you want to obtain the name from.
 565:../os_core/os_task.c **** *
 566:../os_core/os_task.c **** *              pname     is a pointer to an ASCII string that will receive the name of the task.  T
 567:../os_core/os_task.c **** *                        string must be able to hold at least OS_TASK_NAME_SIZE characters.
 568:../os_core/os_task.c **** *
 569:../os_core/os_task.c **** *              err       is a pointer to an error code that can contain one of the following values
 570:../os_core/os_task.c **** *
 571:../os_core/os_task.c **** *                        OS_NO_ERR                  if the requested task is resumed
 572:../os_core/os_task.c **** *                        OS_TASK_NOT_EXIST          if the task has not been created or is assigned
 573:../os_core/os_task.c **** *                        OS_PRIO_INVALID            if you specified an invalid priority:
 574:../os_core/os_task.c **** *                                                   A higher value than the idle task or not OS_PRI
 575:../os_core/os_task.c **** *                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
 576:../os_core/os_task.c **** *
 577:../os_core/os_task.c **** * Returns    : The length of the string or 0 if the task does not exist.
 578:../os_core/os_task.c **** ***************************************************************************************************
 579:../os_core/os_task.c **** */
 580:../os_core/os_task.c **** 
 581:../os_core/os_task.c **** #if OS_TASK_NAME_SIZE > 1
 582:../os_core/os_task.c **** INT8U  OSTaskNameGet (INT8U prio, char *pname, INT8U *err)
 583:../os_core/os_task.c **** {
 2879              		.loc 1 583 0
 2880              		.cfi_startproc
 2881              		@ Function supports interworking.
 2882              		@ args = 0, pretend = 0, frame = 24
 2883              		@ frame_needed = 1, uses_anonymous_args = 0
 2884 0b7c 0DC0A0E1 		mov	ip, sp
 2885              	.LCFI10:
 2886              		.cfi_def_cfa_register 12
 2887 0b80 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2888 0b84 04B04CE2 		sub	fp, ip, #4
 2889              		.cfi_offset 14, -8
 2890              		.cfi_offset 13, -12
 2891              		.cfi_offset 11, -16
 2892              	.LCFI11:
 2893              		.cfi_def_cfa 11, 4
 2894 0b88 18D04DE2 		sub	sp, sp, #24
 2895 0b8c 0030A0E1 		mov	r3, r0
 2896 0b90 1C100BE5 		str	r1, [fp, #-28]
 2897 0b94 20200BE5 		str	r2, [fp, #-32]
 2898 0b98 15304BE5 		strb	r3, [fp, #-21]
 584:../os_core/os_task.c ****     OS_TCB    *ptcb;
 585:../os_core/os_task.c ****     INT8U      len;
 586:../os_core/os_task.c **** #if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status registe
 587:../os_core/os_task.c ****     OS_CPU_SR  cpu_sr;
 588:../os_core/os_task.c **** 
 589:../os_core/os_task.c **** 
 590:../os_core/os_task.c **** 
 591:../os_core/os_task.c ****     cpu_sr = 0;                                          /* Prevent compiler warning               
 592:../os_core/os_task.c **** #endif    
 593:../os_core/os_task.c **** #if OS_ARG_CHK_EN > 0
 594:../os_core/os_task.c ****     if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                  
 2899              		.loc 1 594 0
 2900 0b9c 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2901 0ba0 3F0053E3 		cmp	r3, #63
 2902 0ba4 0700009A 		bls	.L60
 595:../os_core/os_task.c ****         if (prio != OS_PRIO_SELF) { 
 2903              		.loc 1 595 0
 2904 0ba8 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2905 0bac FF0053E3 		cmp	r3, #255
 2906 0bb0 0400000A 		beq	.L60
 596:../os_core/os_task.c ****             *err = OS_PRIO_INVALID;                      /* No                                     
 2907              		.loc 1 596 0
 2908 0bb4 20301BE5 		ldr	r3, [fp, #-32]
 2909 0bb8 2A20A0E3 		mov	r2, #42
 2910 0bbc 0020C3E5 		strb	r2, [r3, #0]
 597:../os_core/os_task.c ****             return (0);
 2911              		.loc 1 597 0
 2912 0bc0 0030A0E3 		mov	r3, #0
 2913 0bc4 370000EA 		b	.L61
 2914              	.L60:
 598:../os_core/os_task.c ****         }
 599:../os_core/os_task.c ****     }
 600:../os_core/os_task.c ****     if (pname == (char *)0) {                             /* Is 'pname' a NULL pointer?            
 2915              		.loc 1 600 0
 2916 0bc8 1C301BE5 		ldr	r3, [fp, #-28]
 2917 0bcc 000053E3 		cmp	r3, #0
 2918 0bd0 0400001A 		bne	.L62
 601:../os_core/os_task.c ****         *err = OS_ERR_PNAME_NULL;						  /* Yes                                       */
 2919              		.loc 1 601 0
 2920 0bd4 20301BE5 		ldr	r3, [fp, #-32]
 2921 0bd8 0F20A0E3 		mov	r2, #15
 2922 0bdc 0020C3E5 		strb	r2, [r3, #0]
 602:../os_core/os_task.c ****         return (0);
 2923              		.loc 1 602 0
 2924 0be0 0030A0E3 		mov	r3, #0
 2925 0be4 2F0000EA 		b	.L61
 2926              	.L62:
 603:../os_core/os_task.c ****     }
 604:../os_core/os_task.c **** #endif
 605:../os_core/os_task.c ****     OS_ENTER_CRITICAL();
 2927              		.loc 1 605 0
 2928              	@ 605 "../os_core/os_task.c" 1
 2929 0be8 00000FE1 		mrs   r0, cpsr
 2930              	@ 0 "" 2
 2931              	@ 605 "../os_core/os_task.c" 1
 2932 0bec 04002DE5 		stmfd sp!, {r0}
 2933              	@ 0 "" 2
 2934              	@ 605 "../os_core/os_task.c" 1
 2935 0bf0 C00080E3 		orr   r0, r0, #0b11000000
 2936              	@ 0 "" 2
 2937              	@ 605 "../os_core/os_task.c" 1
 2938 0bf4 00F021E1 		msr   cpsr_c, r0
 2939              	@ 0 "" 2
 606:../os_core/os_task.c ****     if (prio == OS_PRIO_SELF) {                           /* See if caller desires it's own name   
 2940              		.loc 1 606 0
 2941 0bf8 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2942 0bfc FF0053E3 		cmp	r3, #255
 2943 0c00 0300001A 		bne	.L63
 607:../os_core/os_task.c ****         prio = OSTCBCur->OSTCBPrio;
 2944              		.loc 1 607 0
 2945 0c04 AC309FE5 		ldr	r3, .L66
 2946 0c08 003093E5 		ldr	r3, [r3, #0]
 2947 0c0c 2E30D3E5 		ldrb	r3, [r3, #46]
 2948 0c10 15304BE5 		strb	r3, [fp, #-21]
 2949              	.L63:
 608:../os_core/os_task.c ****     }
 609:../os_core/os_task.c ****     ptcb = OSTCBPrioTbl[prio];
 2950              		.loc 1 609 0
 2951 0c14 15205BE5 		ldrb	r2, [fp, #-21]	@ zero_extendqisi2
 2952 0c18 9C309FE5 		ldr	r3, .L66+4
 2953 0c1c 023193E7 		ldr	r3, [r3, r2, asl #2]
 2954 0c20 10300BE5 		str	r3, [fp, #-16]
 610:../os_core/os_task.c ****     if (ptcb == (OS_TCB *)0) {                            /* Does task exist?                      
 2955              		.loc 1 610 0
 2956 0c24 10301BE5 		ldr	r3, [fp, #-16]
 2957 0c28 000053E3 		cmp	r3, #0
 2958 0c2c 0600001A 		bne	.L64
 611:../os_core/os_task.c ****         OS_EXIT_CRITICAL();                               /* No                                    
 2959              		.loc 1 611 0
 2960              	@ 611 "../os_core/os_task.c" 1
 2961 0c30 04009DE4 		ldmfd sp!, {r0}
 2962              	@ 0 "" 2
 2963              	@ 611 "../os_core/os_task.c" 1
 2964 0c34 00F021E1 		msr   cpsr_c, r0
 2965              	@ 0 "" 2
 612:../os_core/os_task.c ****         *err = OS_TASK_NOT_EXIST;
 2966              		.loc 1 612 0
 2967 0c38 20301BE5 		ldr	r3, [fp, #-32]
 2968 0c3c 0B20A0E3 		mov	r2, #11
 2969 0c40 0020C3E5 		strb	r2, [r3, #0]
 613:../os_core/os_task.c ****         return (0);
 2970              		.loc 1 613 0
 2971 0c44 0030A0E3 		mov	r3, #0
 2972 0c48 160000EA 		b	.L61
 2973              	.L64:
 614:../os_core/os_task.c ****     }
 615:../os_core/os_task.c ****     if (ptcb == (OS_TCB *)1) {                            /* Task assigned to a Mutex?             
 2974              		.loc 1 615 0
 2975 0c4c 10301BE5 		ldr	r3, [fp, #-16]
 2976 0c50 010053E3 		cmp	r3, #1
 2977 0c54 0600001A 		bne	.L65
 616:../os_core/os_task.c ****         OS_EXIT_CRITICAL();                               /* Yes                                   
 2978              		.loc 1 616 0
 2979              	@ 616 "../os_core/os_task.c" 1
 2980 0c58 04009DE4 		ldmfd sp!, {r0}
 2981              	@ 0 "" 2
 2982              	@ 616 "../os_core/os_task.c" 1
 2983 0c5c 00F021E1 		msr   cpsr_c, r0
 2984              	@ 0 "" 2
 617:../os_core/os_task.c ****         *err = OS_TASK_NOT_EXIST;
 2985              		.loc 1 617 0
 2986 0c60 20301BE5 		ldr	r3, [fp, #-32]
 2987 0c64 0B20A0E3 		mov	r2, #11
 2988 0c68 0020C3E5 		strb	r2, [r3, #0]
 618:../os_core/os_task.c ****         return (0);
 2989              		.loc 1 618 0
 2990 0c6c 0030A0E3 		mov	r3, #0
 2991 0c70 0C0000EA 		b	.L61
 2992              	.L65:
 619:../os_core/os_task.c ****     }
 620:../os_core/os_task.c ****     len  = OS_StrCopy(pname, ptcb->OSTCBTaskName);        /* Yes, copy name from TCB               
 2993              		.loc 1 620 0
 2994 0c74 10301BE5 		ldr	r3, [fp, #-16]
 2995 0c78 483083E2 		add	r3, r3, #72
 2996 0c7c 1C001BE5 		ldr	r0, [fp, #-28]
 2997 0c80 0310A0E1 		mov	r1, r3
 2998 0c84 FEFFFFEB 		bl	OS_StrCopy
 2999 0c88 0030A0E1 		mov	r3, r0
 3000 0c8c 11304BE5 		strb	r3, [fp, #-17]
 621:../os_core/os_task.c ****     OS_EXIT_CRITICAL();
 3001              		.loc 1 621 0
 3002              	@ 621 "../os_core/os_task.c" 1
 3003 0c90 04009DE4 		ldmfd sp!, {r0}
 3004              	@ 0 "" 2
 3005              	@ 621 "../os_core/os_task.c" 1
 3006 0c94 00F021E1 		msr   cpsr_c, r0
 3007              	@ 0 "" 2
 622:../os_core/os_task.c ****     *err = OS_NO_ERR;
 3008              		.loc 1 622 0
 3009 0c98 20301BE5 		ldr	r3, [fp, #-32]
 3010 0c9c 0020A0E3 		mov	r2, #0
 3011 0ca0 0020C3E5 		strb	r2, [r3, #0]
 623:../os_core/os_task.c ****     return (len);
 3012              		.loc 1 623 0
 3013 0ca4 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 3014              	.L61:
 624:../os_core/os_task.c **** }
 3015              		.loc 1 624 0
 3016 0ca8 0300A0E1 		mov	r0, r3
 3017 0cac 0CD04BE2 		sub	sp, fp, #12
 3018 0cb0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3019 0cb4 1EFF2FE1 		bx	lr
 3020              	.L67:
 3021              		.align	2
 3022              	.L66:
 3023 0cb8 00000000 		.word	OSTCBCur
 3024 0cbc 00000000 		.word	OSTCBPrioTbl
 3025              		.cfi_endproc
 3026              	.LFE5:
 3028              		.align	2
 3029              		.global	OSTaskNameSet
 3031              	OSTaskNameSet:
 3032              	.LFB6:
 625:../os_core/os_task.c **** #endif
 626:../os_core/os_task.c **** 
 627:../os_core/os_task.c **** /*$PAGE*/
 628:../os_core/os_task.c **** /*
 629:../os_core/os_task.c **** ***************************************************************************************************
 630:../os_core/os_task.c **** *                                        ASSIGN A NAME TO A TASK
 631:../os_core/os_task.c **** *
 632:../os_core/os_task.c **** * Description: This function is used to set the name of a task.
 633:../os_core/os_task.c **** *
 634:../os_core/os_task.c **** * Arguments  : prio      is the priority of the task that you want the assign a name to.
 635:../os_core/os_task.c **** *
 636:../os_core/os_task.c **** *              pname     is a pointer to an ASCII string that contains the name of the task.  The A
 637:../os_core/os_task.c **** *                        string must be NUL terminated.
 638:../os_core/os_task.c **** *
 639:../os_core/os_task.c **** *              err       is a pointer to an error code that can contain one of the following values
 640:../os_core/os_task.c **** *
 641:../os_core/os_task.c **** *                        OS_NO_ERR                  if the requested task is resumed
 642:../os_core/os_task.c **** *                        OS_TASK_NOT_EXIST          if the task has not been created or is assigned
 643:../os_core/os_task.c **** *                        OS_ERR_TASK_NAME_TOO_LONG  if the name you are giving to the task exceeds 
 644:../os_core/os_task.c **** *                                                   storage capacity of a task name as specified by
 645:../os_core/os_task.c **** *                                                   OS_TASK_NAME_SIZE.
 646:../os_core/os_task.c **** *                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
 647:../os_core/os_task.c **** *                        OS_PRIO_INVALID            if you specified an invalid priority:
 648:../os_core/os_task.c **** *                                                   A higher value than the idle task or not OS_PRI
 649:../os_core/os_task.c **** *
 650:../os_core/os_task.c **** * Returns    : None
 651:../os_core/os_task.c **** ***************************************************************************************************
 652:../os_core/os_task.c **** */
 653:../os_core/os_task.c **** #if OS_TASK_NAME_SIZE > 1
 654:../os_core/os_task.c **** void  OSTaskNameSet (INT8U prio, char *pname, INT8U *err)
 655:../os_core/os_task.c **** {
 3033              		.loc 1 655 0
 3034              		.cfi_startproc
 3035              		@ Function supports interworking.
 3036              		@ args = 0, pretend = 0, frame = 24
 3037              		@ frame_needed = 1, uses_anonymous_args = 0
 3038 0cc0 0DC0A0E1 		mov	ip, sp
 3039              	.LCFI12:
 3040              		.cfi_def_cfa_register 12
 3041 0cc4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3042 0cc8 04B04CE2 		sub	fp, ip, #4
 3043              		.cfi_offset 14, -8
 3044              		.cfi_offset 13, -12
 3045              		.cfi_offset 11, -16
 3046              	.LCFI13:
 3047              		.cfi_def_cfa 11, 4
 3048 0ccc 18D04DE2 		sub	sp, sp, #24
 3049 0cd0 0030A0E1 		mov	r3, r0
 3050 0cd4 1C100BE5 		str	r1, [fp, #-28]
 3051 0cd8 20200BE5 		str	r2, [fp, #-32]
 3052 0cdc 15304BE5 		strb	r3, [fp, #-21]
 656:../os_core/os_task.c ****     INT8U      len;
 657:../os_core/os_task.c ****     OS_TCB    *ptcb;
 658:../os_core/os_task.c **** #if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register   
 659:../os_core/os_task.c ****     OS_CPU_SR  cpu_sr;
 660:../os_core/os_task.c **** 
 661:../os_core/os_task.c **** 
 662:../os_core/os_task.c **** 
 663:../os_core/os_task.c ****     cpu_sr = 0;                                      /* Prevent compiler warning                   
 664:../os_core/os_task.c **** #endif    
 665:../os_core/os_task.c **** #if OS_ARG_CHK_EN > 0
 666:../os_core/os_task.c ****     if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                      
 3053              		.loc 1 666 0
 3054 0ce0 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3055 0ce4 3F0053E3 		cmp	r3, #63
 3056 0ce8 0600009A 		bls	.L69
 667:../os_core/os_task.c ****         if (prio != OS_PRIO_SELF) {              
 3057              		.loc 1 667 0
 3058 0cec 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3059 0cf0 FF0053E3 		cmp	r3, #255
 3060 0cf4 0300000A 		beq	.L69
 668:../os_core/os_task.c ****             *err = OS_PRIO_INVALID;                  /* No                                         
 3061              		.loc 1 668 0
 3062 0cf8 20301BE5 		ldr	r3, [fp, #-32]
 3063 0cfc 2A20A0E3 		mov	r2, #42
 3064 0d00 0020C3E5 		strb	r2, [r3, #0]
 669:../os_core/os_task.c ****             return;
 3065              		.loc 1 669 0
 3066 0d04 3E0000EA 		b	.L68
 3067              	.L69:
 670:../os_core/os_task.c ****         }
 671:../os_core/os_task.c ****     }
 672:../os_core/os_task.c ****     if (pname == (char *)0) {                        /* Is 'pname' a NULL pointer?                 
 3068              		.loc 1 672 0
 3069 0d08 1C301BE5 		ldr	r3, [fp, #-28]
 3070 0d0c 000053E3 		cmp	r3, #0
 3071 0d10 0300001A 		bne	.L71
 673:../os_core/os_task.c ****         *err = OS_ERR_PNAME_NULL;					 /* Yes                                            */
 3072              		.loc 1 673 0
 3073 0d14 20301BE5 		ldr	r3, [fp, #-32]
 3074 0d18 0F20A0E3 		mov	r2, #15
 3075 0d1c 0020C3E5 		strb	r2, [r3, #0]
 674:../os_core/os_task.c ****         return;
 3076              		.loc 1 674 0
 3077 0d20 370000EA 		b	.L68
 3078              	.L71:
 675:../os_core/os_task.c ****     }
 676:../os_core/os_task.c **** #endif
 677:../os_core/os_task.c ****     OS_ENTER_CRITICAL();
 3079              		.loc 1 677 0
 3080              	@ 677 "../os_core/os_task.c" 1
 3081 0d24 00000FE1 		mrs   r0, cpsr
 3082              	@ 0 "" 2
 3083              	@ 677 "../os_core/os_task.c" 1
 3084 0d28 04002DE5 		stmfd sp!, {r0}
 3085              	@ 0 "" 2
 3086              	@ 677 "../os_core/os_task.c" 1
 3087 0d2c C00080E3 		orr   r0, r0, #0b11000000
 3088              	@ 0 "" 2
 3089              	@ 677 "../os_core/os_task.c" 1
 3090 0d30 00F021E1 		msr   cpsr_c, r0
 3091              	@ 0 "" 2
 678:../os_core/os_task.c ****     if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name 
 3092              		.loc 1 678 0
 3093 0d34 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3094 0d38 FF0053E3 		cmp	r3, #255
 3095 0d3c 0300001A 		bne	.L72
 679:../os_core/os_task.c ****         prio = OSTCBCur->OSTCBPrio;
 3096              		.loc 1 679 0
 3097 0d40 C8309FE5 		ldr	r3, .L76
 3098 0d44 003093E5 		ldr	r3, [r3, #0]
 3099 0d48 2E30D3E5 		ldrb	r3, [r3, #46]
 3100 0d4c 15304BE5 		strb	r3, [fp, #-21]
 3101              	.L72:
 680:../os_core/os_task.c ****     }
 681:../os_core/os_task.c ****     ptcb = OSTCBPrioTbl[prio];
 3102              		.loc 1 681 0
 3103 0d50 15205BE5 		ldrb	r2, [fp, #-21]	@ zero_extendqisi2
 3104 0d54 B8309FE5 		ldr	r3, .L76+4
 3105 0d58 023193E7 		ldr	r3, [r3, r2, asl #2]
 3106 0d5c 10300BE5 		str	r3, [fp, #-16]
 682:../os_core/os_task.c ****     if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                           
 3107              		.loc 1 682 0
 3108 0d60 10301BE5 		ldr	r3, [fp, #-16]
 3109 0d64 000053E3 		cmp	r3, #0
 3110 0d68 0500001A 		bne	.L73
 683:../os_core/os_task.c ****         OS_EXIT_CRITICAL();                          /* No                                         
 3111              		.loc 1 683 0
 3112              	@ 683 "../os_core/os_task.c" 1
 3113 0d6c 04009DE4 		ldmfd sp!, {r0}
 3114              	@ 0 "" 2
 3115              	@ 683 "../os_core/os_task.c" 1
 3116 0d70 00F021E1 		msr   cpsr_c, r0
 3117              	@ 0 "" 2
 684:../os_core/os_task.c ****         *err = OS_TASK_NOT_EXIST;
 3118              		.loc 1 684 0
 3119 0d74 20301BE5 		ldr	r3, [fp, #-32]
 3120 0d78 0B20A0E3 		mov	r2, #11
 3121 0d7c 0020C3E5 		strb	r2, [r3, #0]
 685:../os_core/os_task.c ****         return;
 3122              		.loc 1 685 0
 3123 0d80 1F0000EA 		b	.L68
 3124              	.L73:
 686:../os_core/os_task.c ****     }
 687:../os_core/os_task.c ****     if (ptcb == (OS_TCB *)1) {                       /* Task assigned to a Mutex?                  
 3125              		.loc 1 687 0
 3126 0d84 10301BE5 		ldr	r3, [fp, #-16]
 3127 0d88 010053E3 		cmp	r3, #1
 3128 0d8c 0500001A 		bne	.L74
 688:../os_core/os_task.c ****         OS_EXIT_CRITICAL();                          /* Yes                                        
 3129              		.loc 1 688 0
 3130              	@ 688 "../os_core/os_task.c" 1
 3131 0d90 04009DE4 		ldmfd sp!, {r0}
 3132              	@ 0 "" 2
 3133              	@ 688 "../os_core/os_task.c" 1
 3134 0d94 00F021E1 		msr   cpsr_c, r0
 3135              	@ 0 "" 2
 689:../os_core/os_task.c ****         *err = OS_TASK_NOT_EXIST;
 3136              		.loc 1 689 0
 3137 0d98 20301BE5 		ldr	r3, [fp, #-32]
 3138 0d9c 0B20A0E3 		mov	r2, #11
 3139 0da0 0020C3E5 		strb	r2, [r3, #0]
 690:../os_core/os_task.c ****         return;
 3140              		.loc 1 690 0
 3141 0da4 160000EA 		b	.L68
 3142              	.L74:
 691:../os_core/os_task.c ****     }
 692:../os_core/os_task.c ****     len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?     
 3143              		.loc 1 692 0
 3144 0da8 1C001BE5 		ldr	r0, [fp, #-28]
 3145 0dac FEFFFFEB 		bl	OS_StrLen
 3146 0db0 0030A0E1 		mov	r3, r0
 3147 0db4 11304BE5 		strb	r3, [fp, #-17]
 693:../os_core/os_task.c ****     if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                    
 3148              		.loc 1 693 0
 3149 0db8 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 3150 0dbc 1F0053E3 		cmp	r3, #31
 3151 0dc0 0500009A 		bls	.L75
 694:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 3152              		.loc 1 694 0
 3153              	@ 694 "../os_core/os_task.c" 1
 3154 0dc4 04009DE4 		ldmfd sp!, {r0}
 3155              	@ 0 "" 2
 3156              	@ 694 "../os_core/os_task.c" 1
 3157 0dc8 00F021E1 		msr   cpsr_c, r0
 3158              	@ 0 "" 2
 695:../os_core/os_task.c ****         *err = OS_ERR_TASK_NAME_TOO_LONG;
 3159              		.loc 1 695 0
 3160 0dcc 20301BE5 		ldr	r3, [fp, #-32]
 3161 0dd0 0E20A0E3 		mov	r2, #14
 3162 0dd4 0020C3E5 		strb	r2, [r3, #0]
 696:../os_core/os_task.c ****         return;
 3163              		.loc 1 696 0
 3164 0dd8 090000EA 		b	.L68
 3165              	.L75:
 697:../os_core/os_task.c ****     } 
 698:../os_core/os_task.c ****     (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                      
 3166              		.loc 1 698 0
 3167 0ddc 10301BE5 		ldr	r3, [fp, #-16]
 3168 0de0 483083E2 		add	r3, r3, #72
 3169 0de4 0300A0E1 		mov	r0, r3
 3170 0de8 1C101BE5 		ldr	r1, [fp, #-28]
 3171 0dec FEFFFFEB 		bl	OS_StrCopy
 699:../os_core/os_task.c ****     OS_EXIT_CRITICAL();
 3172              		.loc 1 699 0
 3173              	@ 699 "../os_core/os_task.c" 1
 3174 0df0 04009DE4 		ldmfd sp!, {r0}
 3175              	@ 0 "" 2
 3176              	@ 699 "../os_core/os_task.c" 1
 3177 0df4 00F021E1 		msr   cpsr_c, r0
 3178              	@ 0 "" 2
 700:../os_core/os_task.c ****     *err = OS_NO_ERR;
 3179              		.loc 1 700 0
 3180 0df8 20301BE5 		ldr	r3, [fp, #-32]
 3181 0dfc 0020A0E3 		mov	r2, #0
 3182 0e00 0020C3E5 		strb	r2, [r3, #0]
 3183              	.L68:
 701:../os_core/os_task.c **** }
 3184              		.loc 1 701 0
 3185 0e04 0CD04BE2 		sub	sp, fp, #12
 3186 0e08 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3187 0e0c 1EFF2FE1 		bx	lr
 3188              	.L77:
 3189              		.align	2
 3190              	.L76:
 3191 0e10 00000000 		.word	OSTCBCur
 3192 0e14 00000000 		.word	OSTCBPrioTbl
 3193              		.cfi_endproc
 3194              	.LFE6:
 3196              		.align	2
 3197              		.global	OSTaskResume
 3199              	OSTaskResume:
 3200              	.LFB7:
 702:../os_core/os_task.c **** #endif
 703:../os_core/os_task.c **** 
 704:../os_core/os_task.c **** /*$PAGE*/
 705:../os_core/os_task.c **** /*
 706:../os_core/os_task.c **** ***************************************************************************************************
 707:../os_core/os_task.c **** *                                        RESUME A SUSPENDED TASK
 708:../os_core/os_task.c **** *
 709:../os_core/os_task.c **** * Description: This function is called to resume a previously suspended task.  This is the only cal
 710:../os_core/os_task.c **** *              will remove an explicit task suspension.
 711:../os_core/os_task.c **** *
 712:../os_core/os_task.c **** * Arguments  : prio     is the priority of the task to resume.
 713:../os_core/os_task.c **** *
 714:../os_core/os_task.c **** * Returns    : OS_NO_ERR                if the requested task is resumed
 715:../os_core/os_task.c **** *              OS_PRIO_INVALID          if the priority you specify is higher that the maximum allo
 716:../os_core/os_task.c **** *                                       (i.e. >= OS_LOWEST_PRIO)
 717:../os_core/os_task.c **** *              OS_TASK_RESUME_PRIO      if the task to resume does not exist
 718:../os_core/os_task.c **** *              OS_TASK_NOT_EXIST        if the task is assigned to a Mutex PIP
 719:../os_core/os_task.c **** *              OS_TASK_NOT_SUSPENDED    if the task to resume has not been suspended
 720:../os_core/os_task.c **** ***************************************************************************************************
 721:../os_core/os_task.c **** */
 722:../os_core/os_task.c **** 
 723:../os_core/os_task.c **** #if OS_TASK_SUSPEND_EN > 0
 724:../os_core/os_task.c **** INT8U  OSTaskResume (INT8U prio)
 725:../os_core/os_task.c **** {
 3201              		.loc 1 725 0
 3202              		.cfi_startproc
 3203              		@ Function supports interworking.
 3204              		@ args = 0, pretend = 0, frame = 16
 3205              		@ frame_needed = 1, uses_anonymous_args = 0
 3206 0e18 0DC0A0E1 		mov	ip, sp
 3207              	.LCFI14:
 3208              		.cfi_def_cfa_register 12
 3209 0e1c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3210 0e20 04B04CE2 		sub	fp, ip, #4
 3211              		.cfi_offset 14, -8
 3212              		.cfi_offset 13, -12
 3213              		.cfi_offset 11, -16
 3214              	.LCFI15:
 3215              		.cfi_def_cfa 11, 4
 3216 0e24 10D04DE2 		sub	sp, sp, #16
 3217 0e28 0030A0E1 		mov	r3, r0
 3218 0e2c 15304BE5 		strb	r3, [fp, #-21]
 726:../os_core/os_task.c ****     OS_TCB    *ptcb;
 727:../os_core/os_task.c **** #if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register   
 728:../os_core/os_task.c ****     OS_CPU_SR  cpu_sr;
 729:../os_core/os_task.c **** 
 730:../os_core/os_task.c **** 
 731:../os_core/os_task.c **** 
 732:../os_core/os_task.c ****     cpu_sr = 0;                                               /* Prevent compiler warning          
 733:../os_core/os_task.c **** #endif    
 734:../os_core/os_task.c **** #if OS_ARG_CHK_EN > 0
 735:../os_core/os_task.c ****     if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid  
 3219              		.loc 1 735 0
 3220 0e30 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3221 0e34 3E0053E3 		cmp	r3, #62
 3222 0e38 0100009A 		bls	.L79
 736:../os_core/os_task.c ****         return (OS_PRIO_INVALID);
 3223              		.loc 1 736 0
 3224 0e3c 2A30A0E3 		mov	r3, #42
 3225 0e40 4A0000EA 		b	.L80
 3226              	.L79:
 737:../os_core/os_task.c ****     }
 738:../os_core/os_task.c **** #endif
 739:../os_core/os_task.c ****     OS_ENTER_CRITICAL();
 3227              		.loc 1 739 0
 3228              	@ 739 "../os_core/os_task.c" 1
 3229 0e44 00000FE1 		mrs   r0, cpsr
 3230              	@ 0 "" 2
 3231              	@ 739 "../os_core/os_task.c" 1
 3232 0e48 04002DE5 		stmfd sp!, {r0}
 3233              	@ 0 "" 2
 3234              	@ 739 "../os_core/os_task.c" 1
 3235 0e4c C00080E3 		orr   r0, r0, #0b11000000
 3236              	@ 0 "" 2
 3237              	@ 739 "../os_core/os_task.c" 1
 3238 0e50 00F021E1 		msr   cpsr_c, r0
 3239              	@ 0 "" 2
 740:../os_core/os_task.c ****     ptcb = OSTCBPrioTbl[prio];
 3240              		.loc 1 740 0
 3241 0e54 15205BE5 		ldrb	r2, [fp, #-21]	@ zero_extendqisi2
 3242 0e58 20319FE5 		ldr	r3, .L87
 3243 0e5c 023193E7 		ldr	r3, [r3, r2, asl #2]
 3244 0e60 10300BE5 		str	r3, [fp, #-16]
 741:../os_core/os_task.c ****     if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist        
 3245              		.loc 1 741 0
 3246 0e64 10301BE5 		ldr	r3, [fp, #-16]
 3247 0e68 000053E3 		cmp	r3, #0
 3248 0e6c 0300001A 		bne	.L81
 742:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 3249              		.loc 1 742 0
 3250              	@ 742 "../os_core/os_task.c" 1
 3251 0e70 04009DE4 		ldmfd sp!, {r0}
 3252              	@ 0 "" 2
 3253              	@ 742 "../os_core/os_task.c" 1
 3254 0e74 00F021E1 		msr   cpsr_c, r0
 3255              	@ 0 "" 2
 743:../os_core/os_task.c ****         return (OS_TASK_RESUME_PRIO);
 3256              		.loc 1 743 0
 3257 0e78 6430A0E3 		mov	r3, #100
 3258 0e7c 3B0000EA 		b	.L80
 3259              	.L81:
 744:../os_core/os_task.c ****     }
 745:../os_core/os_task.c ****     if (ptcb == (OS_TCB *)1) {                                /* See if assigned to Mutex          
 3260              		.loc 1 745 0
 3261 0e80 10301BE5 		ldr	r3, [fp, #-16]
 3262 0e84 010053E3 		cmp	r3, #1
 3263 0e88 0300001A 		bne	.L82
 746:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 3264              		.loc 1 746 0
 3265              	@ 746 "../os_core/os_task.c" 1
 3266 0e8c 04009DE4 		ldmfd sp!, {r0}
 3267              	@ 0 "" 2
 3268              	@ 746 "../os_core/os_task.c" 1
 3269 0e90 00F021E1 		msr   cpsr_c, r0
 3270              	@ 0 "" 2
 747:../os_core/os_task.c ****         return (OS_TASK_NOT_EXIST);
 3271              		.loc 1 747 0
 3272 0e94 0B30A0E3 		mov	r3, #11
 3273 0e98 340000EA 		b	.L80
 3274              	.L82:
 748:../os_core/os_task.c ****     }
 749:../os_core/os_task.c ****     if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended            
 3275              		.loc 1 749 0
 3276 0e9c 10301BE5 		ldr	r3, [fp, #-16]
 3277 0ea0 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 3278 0ea4 083003E2 		and	r3, r3, #8
 3279 0ea8 000053E3 		cmp	r3, #0
 3280 0eac 2C00000A 		beq	.L83
 750:../os_core/os_task.c ****         ptcb->OSTCBStat &= ~OS_STAT_SUSPEND;				  /* Remove suspension                     */
 3281              		.loc 1 750 0
 3282 0eb0 10301BE5 		ldr	r3, [fp, #-16]
 3283 0eb4 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 3284 0eb8 0830C3E3 		bic	r3, r3, #8
 3285 0ebc FF2003E2 		and	r2, r3, #255
 3286 0ec0 10301BE5 		ldr	r3, [fp, #-16]
 3287 0ec4 2C20C3E5 		strb	r2, [r3, #44]
 751:../os_core/os_task.c ****         if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready          
 3288              		.loc 1 751 0
 3289 0ec8 10301BE5 		ldr	r3, [fp, #-16]
 3290 0ecc 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 3291 0ed0 000053E3 		cmp	r3, #0
 3292 0ed4 1E00001A 		bne	.L84
 752:../os_core/os_task.c ****             if (ptcb->OSTCBDly == 0) {
 3293              		.loc 1 752 0
 3294 0ed8 10301BE5 		ldr	r3, [fp, #-16]
 3295 0edc BA32D3E1 		ldrh	r3, [r3, #42]
 3296 0ee0 000053E3 		cmp	r3, #0
 3297 0ee4 1700001A 		bne	.L85
 753:../os_core/os_task.c ****                 OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run       
 3298              		.loc 1 753 0
 3299 0ee8 10301BE5 		ldr	r3, [fp, #-16]
 3300 0eec 3220D3E5 		ldrb	r2, [r3, #50]	@ zero_extendqisi2
 3301 0ef0 8C309FE5 		ldr	r3, .L87+4
 3302 0ef4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3303 0ef8 033082E1 		orr	r3, r2, r3
 3304 0efc FF2003E2 		and	r2, r3, #255
 3305 0f00 7C309FE5 		ldr	r3, .L87+4
 3306 0f04 0020C3E5 		strb	r2, [r3, #0]
 754:../os_core/os_task.c ****                 OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 3307              		.loc 1 754 0
 3308 0f08 10301BE5 		ldr	r3, [fp, #-16]
 3309 0f0c 3030D3E5 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 3310 0f10 10201BE5 		ldr	r2, [fp, #-16]
 3311 0f14 3020D2E5 		ldrb	r2, [r2, #48]	@ zero_extendqisi2
 3312 0f18 68109FE5 		ldr	r1, .L87+8
 3313 0f1c 0210D1E7 		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 3314 0f20 10201BE5 		ldr	r2, [fp, #-16]
 3315 0f24 3120D2E5 		ldrb	r2, [r2, #49]	@ zero_extendqisi2
 3316 0f28 022081E1 		orr	r2, r1, r2
 3317 0f2c FF1002E2 		and	r1, r2, #255
 3318 0f30 50209FE5 		ldr	r2, .L87+8
 3319 0f34 0310C2E7 		strb	r1, [r2, r3]
 755:../os_core/os_task.c ****                 OS_EXIT_CRITICAL();
 3320              		.loc 1 755 0
 3321              	@ 755 "../os_core/os_task.c" 1
 3322 0f38 04009DE4 		ldmfd sp!, {r0}
 3323              	@ 0 "" 2
 3324              	@ 755 "../os_core/os_task.c" 1
 3325 0f3c 00F021E1 		msr   cpsr_c, r0
 3326              	@ 0 "" 2
 756:../os_core/os_task.c ****                 OS_Sched();
 3327              		.loc 1 756 0
 3328 0f40 FEFFFFEB 		bl	OS_Sched
 3329 0f44 040000EA 		b	.L86
 3330              	.L85:
 757:../os_core/os_task.c ****             } else {
 758:../os_core/os_task.c ****                 OS_EXIT_CRITICAL();
 3331              		.loc 1 758 0
 3332              	@ 758 "../os_core/os_task.c" 1
 3333 0f48 04009DE4 		ldmfd sp!, {r0}
 3334              	@ 0 "" 2
 3335              	@ 758 "../os_core/os_task.c" 1
 3336 0f4c 00F021E1 		msr   cpsr_c, r0
 3337              	@ 0 "" 2
 3338 0f50 010000EA 		b	.L86
 3339              	.L84:
 759:../os_core/os_task.c ****             }
 760:../os_core/os_task.c ****         } else {                                              /* Must be pending on event          
 761:../os_core/os_task.c **** 		    OS_EXIT_CRITICAL();
 3340              		.loc 1 761 0
 3341              	@ 761 "../os_core/os_task.c" 1
 3342 0f54 04009DE4 		ldmfd sp!, {r0}
 3343              	@ 0 "" 2
 3344              	@ 761 "../os_core/os_task.c" 1
 3345 0f58 00F021E1 		msr   cpsr_c, r0
 3346              	@ 0 "" 2
 3347              	.L86:
 762:../os_core/os_task.c ****         }
 763:../os_core/os_task.c ****         return (OS_NO_ERR);
 3348              		.loc 1 763 0
 3349 0f5c 0030A0E3 		mov	r3, #0
 3350 0f60 020000EA 		b	.L80
 3351              	.L83:
 764:../os_core/os_task.c ****     }
 765:../os_core/os_task.c ****     OS_EXIT_CRITICAL();
 3352              		.loc 1 765 0
 3353              	@ 765 "../os_core/os_task.c" 1
 3354 0f64 04009DE4 		ldmfd sp!, {r0}
 3355              	@ 0 "" 2
 3356              	@ 765 "../os_core/os_task.c" 1
 3357 0f68 00F021E1 		msr   cpsr_c, r0
 3358              	@ 0 "" 2
 766:../os_core/os_task.c ****     return (OS_TASK_NOT_SUSPENDED);
 3359              		.loc 1 766 0
 3360 0f6c 6530A0E3 		mov	r3, #101
 3361              	.L80:
 767:../os_core/os_task.c **** }
 3362              		.loc 1 767 0
 3363 0f70 0300A0E1 		mov	r0, r3
 3364 0f74 0CD04BE2 		sub	sp, fp, #12
 3365 0f78 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3366 0f7c 1EFF2FE1 		bx	lr
 3367              	.L88:
 3368              		.align	2
 3369              	.L87:
 3370 0f80 00000000 		.word	OSTCBPrioTbl
 3371 0f84 00000000 		.word	OSRdyGrp
 3372 0f88 00000000 		.word	OSRdyTbl
 3373              		.cfi_endproc
 3374              	.LFE7:
 3376              		.align	2
 3377              		.global	OSTaskStkChk
 3379              	OSTaskStkChk:
 3380              	.LFB8:
 768:../os_core/os_task.c **** #endif
 769:../os_core/os_task.c **** /*$PAGE*/
 770:../os_core/os_task.c **** /*
 771:../os_core/os_task.c **** ***************************************************************************************************
 772:../os_core/os_task.c **** *                                             STACK CHECKING
 773:../os_core/os_task.c **** *
 774:../os_core/os_task.c **** * Description: This function is called to check the amount of free memory left on the specified tas
 775:../os_core/os_task.c **** *              stack.
 776:../os_core/os_task.c **** *
 777:../os_core/os_task.c **** * Arguments  : prio          is the task priority
 778:../os_core/os_task.c **** *
 779:../os_core/os_task.c **** *              p_stk_data    is a pointer to a data structure of type OS_STK_DATA.
 780:../os_core/os_task.c **** *
 781:../os_core/os_task.c **** * Returns    : OS_NO_ERR           upon success
 782:../os_core/os_task.c **** *              OS_PRIO_INVALID     if the priority you specify is higher that the maximum allowed
 783:../os_core/os_task.c **** *                                  (i.e. > OS_LOWEST_PRIO) or, you have not specified OS_PRIO_SELF.
 784:../os_core/os_task.c **** *              OS_TASK_NOT_EXIST   if the desired task has not been created or is assigned to a Mut
 785:../os_core/os_task.c **** *              OS_TASK_OPT_ERR     if you did NOT specified OS_TASK_OPT_STK_CHK when the task was c
 786:../os_core/os_task.c **** ***************************************************************************************************
 787:../os_core/os_task.c **** */
 788:../os_core/os_task.c **** #if OS_TASK_CREATE_EXT_EN > 0
 789:../os_core/os_task.c **** INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
 790:../os_core/os_task.c **** {
 3381              		.loc 1 790 0
 3382              		.cfi_startproc
 3383              		@ Function supports interworking.
 3384              		@ args = 0, pretend = 0, frame = 24
 3385              		@ frame_needed = 1, uses_anonymous_args = 0
 3386 0f8c 0DC0A0E1 		mov	ip, sp
 3387              	.LCFI16:
 3388              		.cfi_def_cfa_register 12
 3389 0f90 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3390 0f94 04B04CE2 		sub	fp, ip, #4
 3391              		.cfi_offset 14, -8
 3392              		.cfi_offset 13, -12
 3393              		.cfi_offset 11, -16
 3394              	.LCFI17:
 3395              		.cfi_def_cfa 11, 4
 3396 0f98 18D04DE2 		sub	sp, sp, #24
 3397 0f9c 0030A0E1 		mov	r3, r0
 3398 0fa0 24100BE5 		str	r1, [fp, #-36]
 3399 0fa4 1D304BE5 		strb	r3, [fp, #-29]
 791:../os_core/os_task.c ****     OS_TCB    *ptcb;
 792:../os_core/os_task.c ****     OS_STK    *pchk;
 793:../os_core/os_task.c ****     INT32U     free;
 794:../os_core/os_task.c ****     INT32U     size;
 795:../os_core/os_task.c **** #if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register 
 796:../os_core/os_task.c ****     OS_CPU_SR  cpu_sr;
 797:../os_core/os_task.c **** 
 798:../os_core/os_task.c **** 
 799:../os_core/os_task.c **** 
 800:../os_core/os_task.c ****     cpu_sr = 0;                                        /* Prevent compiler warning                 
 801:../os_core/os_task.c **** #endif    
 802:../os_core/os_task.c **** #if OS_ARG_CHK_EN > 0
 803:../os_core/os_task.c ****     if (prio > OS_LOWEST_PRIO) {					   /* Make sure task priority is valid             */
 3400              		.loc 1 803 0
 3401 0fa8 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 3402 0fac 3F0053E3 		cmp	r3, #63
 3403 0fb0 0400009A 		bls	.L90
 804:../os_core/os_task.c ****         if (prio != OS_PRIO_SELF) {        
 3404              		.loc 1 804 0
 3405 0fb4 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 3406 0fb8 FF0053E3 		cmp	r3, #255
 3407 0fbc 0100000A 		beq	.L90
 805:../os_core/os_task.c ****             return (OS_PRIO_INVALID);
 3408              		.loc 1 805 0
 3409 0fc0 2A30A0E3 		mov	r3, #42
 3410 0fc4 4F0000EA 		b	.L91
 3411              	.L90:
 806:../os_core/os_task.c ****         }
 807:../os_core/os_task.c ****     }
 808:../os_core/os_task.c **** #endif
 809:../os_core/os_task.c ****     p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size            
 3412              		.loc 1 809 0
 3413 0fc8 24301BE5 		ldr	r3, [fp, #-36]
 3414 0fcc 0020A0E3 		mov	r2, #0
 3415 0fd0 002083E5 		str	r2, [r3, #0]
 810:../os_core/os_task.c ****     p_stk_data->OSUsed = 0;
 3416              		.loc 1 810 0
 3417 0fd4 24301BE5 		ldr	r3, [fp, #-36]
 3418 0fd8 0020A0E3 		mov	r2, #0
 3419 0fdc 042083E5 		str	r2, [r3, #4]
 811:../os_core/os_task.c ****     OS_ENTER_CRITICAL();
 3420              		.loc 1 811 0
 3421              	@ 811 "../os_core/os_task.c" 1
 3422 0fe0 00000FE1 		mrs   r0, cpsr
 3423              	@ 0 "" 2
 3424              	@ 811 "../os_core/os_task.c" 1
 3425 0fe4 04002DE5 		stmfd sp!, {r0}
 3426              	@ 0 "" 2
 3427              	@ 811 "../os_core/os_task.c" 1
 3428 0fe8 C00080E3 		orr   r0, r0, #0b11000000
 3429              	@ 0 "" 2
 3430              	@ 811 "../os_core/os_task.c" 1
 3431 0fec 00F021E1 		msr   cpsr_c, r0
 3432              	@ 0 "" 2
 812:../os_core/os_task.c ****     if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                    
 3433              		.loc 1 812 0
 3434 0ff0 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 3435 0ff4 FF0053E3 		cmp	r3, #255
 3436 0ff8 0300001A 		bne	.L92
 813:../os_core/os_task.c ****         prio = OSTCBCur->OSTCBPrio;
 3437              		.loc 1 813 0
 3438 0ffc 14319FE5 		ldr	r3, .L98
 3439 1000 003093E5 		ldr	r3, [r3, #0]
 3440 1004 2E30D3E5 		ldrb	r3, [r3, #46]
 3441 1008 1D304BE5 		strb	r3, [fp, #-29]
 3442              	.L92:
 814:../os_core/os_task.c ****     }
 815:../os_core/os_task.c ****     ptcb = OSTCBPrioTbl[prio];
 3443              		.loc 1 815 0
 3444 100c 1D205BE5 		ldrb	r2, [fp, #-29]	@ zero_extendqisi2
 3445 1010 04319FE5 		ldr	r3, .L98+4
 3446 1014 023193E7 		ldr	r3, [r3, r2, asl #2]
 3447 1018 18300BE5 		str	r3, [fp, #-24]
 816:../os_core/os_task.c ****     if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                     
 3448              		.loc 1 816 0
 3449 101c 18301BE5 		ldr	r3, [fp, #-24]
 3450 1020 000053E3 		cmp	r3, #0
 3451 1024 0300001A 		bne	.L93
 817:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 3452              		.loc 1 817 0
 3453              	@ 817 "../os_core/os_task.c" 1
 3454 1028 04009DE4 		ldmfd sp!, {r0}
 3455              	@ 0 "" 2
 3456              	@ 817 "../os_core/os_task.c" 1
 3457 102c 00F021E1 		msr   cpsr_c, r0
 3458              	@ 0 "" 2
 818:../os_core/os_task.c ****         return (OS_TASK_NOT_EXIST);
 3459              		.loc 1 818 0
 3460 1030 0B30A0E3 		mov	r3, #11
 3461 1034 330000EA 		b	.L91
 3462              	.L93:
 819:../os_core/os_task.c ****     }
 820:../os_core/os_task.c ****     if (ptcb == (OS_TCB *)1) {
 3463              		.loc 1 820 0
 3464 1038 18301BE5 		ldr	r3, [fp, #-24]
 3465 103c 010053E3 		cmp	r3, #1
 3466 1040 0300001A 		bne	.L94
 821:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 3467              		.loc 1 821 0
 3468              	@ 821 "../os_core/os_task.c" 1
 3469 1044 04009DE4 		ldmfd sp!, {r0}
 3470              	@ 0 "" 2
 3471              	@ 821 "../os_core/os_task.c" 1
 3472 1048 00F021E1 		msr   cpsr_c, r0
 3473              	@ 0 "" 2
 822:../os_core/os_task.c ****         return (OS_TASK_NOT_EXIST);
 3474              		.loc 1 822 0
 3475 104c 0B30A0E3 		mov	r3, #11
 3476 1050 2C0000EA 		b	.L91
 3477              	.L94:
 823:../os_core/os_task.c ****     }  
 824:../os_core/os_task.c ****     if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set   
 3478              		.loc 1 824 0
 3479 1054 18301BE5 		ldr	r3, [fp, #-24]
 3480 1058 B031D3E1 		ldrh	r3, [r3, #16]
 3481 105c 013003E2 		and	r3, r3, #1
 3482 1060 000053E3 		cmp	r3, #0
 3483 1064 0300001A 		bne	.L95
 825:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 3484              		.loc 1 825 0
 3485              	@ 825 "../os_core/os_task.c" 1
 3486 1068 04009DE4 		ldmfd sp!, {r0}
 3487              	@ 0 "" 2
 3488              	@ 825 "../os_core/os_task.c" 1
 3489 106c 00F021E1 		msr   cpsr_c, r0
 3490              	@ 0 "" 2
 826:../os_core/os_task.c ****         return (OS_TASK_OPT_ERR);
 3491              		.loc 1 826 0
 3492 1070 8230A0E3 		mov	r3, #130
 3493 1074 230000EA 		b	.L91
 3494              	.L95:
 827:../os_core/os_task.c ****     }
 828:../os_core/os_task.c ****     free = 0;
 3495              		.loc 1 828 0
 3496 1078 0030A0E3 		mov	r3, #0
 3497 107c 14300BE5 		str	r3, [fp, #-20]
 829:../os_core/os_task.c ****     size = ptcb->OSTCBStkSize;
 3498              		.loc 1 829 0
 3499 1080 18301BE5 		ldr	r3, [fp, #-24]
 3500 1084 0C3093E5 		ldr	r3, [r3, #12]
 3501 1088 1C300BE5 		str	r3, [fp, #-28]
 830:../os_core/os_task.c ****     pchk = ptcb->OSTCBStkBottom;
 3502              		.loc 1 830 0
 3503 108c 18301BE5 		ldr	r3, [fp, #-24]
 3504 1090 083093E5 		ldr	r3, [r3, #8]
 3505 1094 10300BE5 		str	r3, [fp, #-16]
 831:../os_core/os_task.c ****     OS_EXIT_CRITICAL();
 3506              		.loc 1 831 0
 3507              	@ 831 "../os_core/os_task.c" 1
 3508 1098 04009DE4 		ldmfd sp!, {r0}
 3509              	@ 0 "" 2
 3510              	@ 831 "../os_core/os_task.c" 1
 3511 109c 00F021E1 		msr   cpsr_c, r0
 3512              	@ 0 "" 2
 832:../os_core/os_task.c **** #if OS_STK_GROWTH == 1
 833:../os_core/os_task.c ****     while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the 
 3513              		.loc 1 833 0
 3514 10a0 020000EA 		b	.L96
 3515              	.L97:
 834:../os_core/os_task.c ****         free++;
 3516              		.loc 1 834 0
 3517 10a4 14301BE5 		ldr	r3, [fp, #-20]
 3518 10a8 013083E2 		add	r3, r3, #1
 3519 10ac 14300BE5 		str	r3, [fp, #-20]
 3520              	.L96:
 833:../os_core/os_task.c ****     while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the 
 3521              		.loc 1 833 0 discriminator 1
 3522 10b0 10301BE5 		ldr	r3, [fp, #-16]
 3523 10b4 003093E5 		ldr	r3, [r3, #0]
 3524 10b8 000053E3 		cmp	r3, #0
 3525 10bc 0030A013 		movne	r3, #0
 3526 10c0 0130A003 		moveq	r3, #1
 3527 10c4 FF3003E2 		and	r3, r3, #255
 3528 10c8 10201BE5 		ldr	r2, [fp, #-16]
 3529 10cc 042082E2 		add	r2, r2, #4
 3530 10d0 10200BE5 		str	r2, [fp, #-16]
 3531 10d4 000053E3 		cmp	r3, #0
 3532 10d8 F1FFFF1A 		bne	.L97
 835:../os_core/os_task.c ****     }
 836:../os_core/os_task.c **** #else
 837:../os_core/os_task.c ****     while (*pchk-- == (OS_STK)0) {
 838:../os_core/os_task.c ****         free++;
 839:../os_core/os_task.c ****     }
 840:../os_core/os_task.c **** #endif
 841:../os_core/os_task.c ****     p_stk_data->OSFree = free * sizeof(OS_STK);           /* Compute number of free bytes on the st
 3533              		.loc 1 841 0
 3534 10dc 14301BE5 		ldr	r3, [fp, #-20]
 3535 10e0 0321A0E1 		mov	r2, r3, asl #2
 3536 10e4 24301BE5 		ldr	r3, [fp, #-36]
 3537 10e8 002083E5 		str	r2, [r3, #0]
 842:../os_core/os_task.c ****     p_stk_data->OSUsed = (size - free) * sizeof(OS_STK);  /* Compute number of bytes used on the st
 3538              		.loc 1 842 0
 3539 10ec 1C201BE5 		ldr	r2, [fp, #-28]
 3540 10f0 14301BE5 		ldr	r3, [fp, #-20]
 3541 10f4 023063E0 		rsb	r3, r3, r2
 3542 10f8 0321A0E1 		mov	r2, r3, asl #2
 3543 10fc 24301BE5 		ldr	r3, [fp, #-36]
 3544 1100 042083E5 		str	r2, [r3, #4]
 843:../os_core/os_task.c ****     return (OS_NO_ERR);
 3545              		.loc 1 843 0
 3546 1104 0030A0E3 		mov	r3, #0
 3547              	.L91:
 844:../os_core/os_task.c **** }
 3548              		.loc 1 844 0
 3549 1108 0300A0E1 		mov	r0, r3
 3550 110c 0CD04BE2 		sub	sp, fp, #12
 3551 1110 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3552 1114 1EFF2FE1 		bx	lr
 3553              	.L99:
 3554              		.align	2
 3555              	.L98:
 3556 1118 00000000 		.word	OSTCBCur
 3557 111c 00000000 		.word	OSTCBPrioTbl
 3558              		.cfi_endproc
 3559              	.LFE8:
 3561              		.align	2
 3562              		.global	OSTaskSuspend
 3564              	OSTaskSuspend:
 3565              	.LFB9:
 845:../os_core/os_task.c **** #endif
 846:../os_core/os_task.c **** /*$PAGE*/
 847:../os_core/os_task.c **** /*
 848:../os_core/os_task.c **** ***************************************************************************************************
 849:../os_core/os_task.c **** *                                            SUSPEND A TASK
 850:../os_core/os_task.c **** *
 851:../os_core/os_task.c **** * Description: This function is called to suspend a task.  The task can be the calling task if the
 852:../os_core/os_task.c **** *              priority passed to OSTaskSuspend() is the priority of the calling task or OS_PRIO_SE
 853:../os_core/os_task.c **** *
 854:../os_core/os_task.c **** * Arguments  : prio     is the priority of the task to suspend.  If you specify OS_PRIO_SELF, the
 855:../os_core/os_task.c **** *                       calling task will suspend itself and rescheduling will occur.
 856:../os_core/os_task.c **** *
 857:../os_core/os_task.c **** * Returns    : OS_NO_ERR                if the requested task is suspended
 858:../os_core/os_task.c **** *              OS_TASK_SUSPEND_IDLE     if you attempted to suspend the idle task which is not allo
 859:../os_core/os_task.c **** *              OS_PRIO_INVALID          if the priority you specify is higher that the maximum allo
 860:../os_core/os_task.c **** *                                       (i.e. >= OS_LOWEST_PRIO) or, you have not specified OS_PRIO
 861:../os_core/os_task.c **** *              OS_TASK_SUSPEND_PRIO     if the task to suspend does not exist
 862:../os_core/os_task.c **** *              OS_TASK_NOT_EXITS        if the task is assigned to a Mutex PIP
 863:../os_core/os_task.c **** *
 864:../os_core/os_task.c **** * Note       : You should use this function with great care.  If you suspend a task that is waiting
 865:../os_core/os_task.c **** *              an event (i.e. a message, a semaphore, a queue ...) you will prevent this task from
 866:../os_core/os_task.c **** *              running when the event arrives.
 867:../os_core/os_task.c **** ***************************************************************************************************
 868:../os_core/os_task.c **** */
 869:../os_core/os_task.c **** 
 870:../os_core/os_task.c **** #if OS_TASK_SUSPEND_EN > 0
 871:../os_core/os_task.c **** INT8U  OSTaskSuspend (INT8U prio)
 872:../os_core/os_task.c **** {
 3566              		.loc 1 872 0
 3567              		.cfi_startproc
 3568              		@ Function supports interworking.
 3569              		@ args = 0, pretend = 0, frame = 24
 3570              		@ frame_needed = 1, uses_anonymous_args = 0
 3571 1120 0DC0A0E1 		mov	ip, sp
 3572              	.LCFI18:
 3573              		.cfi_def_cfa_register 12
 3574 1124 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3575 1128 04B04CE2 		sub	fp, ip, #4
 3576              		.cfi_offset 14, -8
 3577              		.cfi_offset 13, -12
 3578              		.cfi_offset 11, -16
 3579              	.LCFI19:
 3580              		.cfi_def_cfa 11, 4
 3581 112c 18D04DE2 		sub	sp, sp, #24
 3582 1130 0030A0E1 		mov	r3, r0
 3583 1134 1D304BE5 		strb	r3, [fp, #-29]
 873:../os_core/os_task.c ****     BOOLEAN    self;
 874:../os_core/os_task.c ****     OS_TCB    *ptcb;
 875:../os_core/os_task.c **** 	INT8U      y;
 876:../os_core/os_task.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
 877:../os_core/os_task.c ****     OS_CPU_SR  cpu_sr;
 878:../os_core/os_task.c **** 
 879:../os_core/os_task.c **** 
 880:../os_core/os_task.c **** 
 881:../os_core/os_task.c ****     cpu_sr = 0;                                                 /* Prevent compiler warning        
 882:../os_core/os_task.c **** #endif    
 883:../os_core/os_task.c **** #if OS_ARG_CHK_EN > 0
 884:../os_core/os_task.c ****     if (prio == OS_IDLE_PRIO) {                                 /* Not allowed to suspend idle task
 3584              		.loc 1 884 0
 3585 1138 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 3586 113c 3F0053E3 		cmp	r3, #63
 3587 1140 0100001A 		bne	.L101
 885:../os_core/os_task.c ****         return (OS_TASK_SUSPEND_IDLE);
 3588              		.loc 1 885 0
 3589 1144 5B30A0E3 		mov	r3, #91
 3590 1148 630000EA 		b	.L102
 3591              	.L101:
 886:../os_core/os_task.c ****     }
 887:../os_core/os_task.c ****     if (prio >= OS_LOWEST_PRIO) {								/* Task priority valid ?               */
 3592              		.loc 1 887 0
 3593 114c 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 3594 1150 3E0053E3 		cmp	r3, #62
 3595 1154 0400009A 		bls	.L103
 888:../os_core/os_task.c ****         if (prio != OS_PRIO_SELF) {
 3596              		.loc 1 888 0
 3597 1158 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 3598 115c FF0053E3 		cmp	r3, #255
 3599 1160 0100000A 		beq	.L103
 889:../os_core/os_task.c ****             return (OS_PRIO_INVALID);
 3600              		.loc 1 889 0
 3601 1164 2A30A0E3 		mov	r3, #42
 3602 1168 5B0000EA 		b	.L102
 3603              	.L103:
 890:../os_core/os_task.c ****         }
 891:../os_core/os_task.c ****     }
 892:../os_core/os_task.c **** #endif
 893:../os_core/os_task.c ****     OS_ENTER_CRITICAL();
 3604              		.loc 1 893 0
 3605              	@ 893 "../os_core/os_task.c" 1
 3606 116c 00000FE1 		mrs   r0, cpsr
 3607              	@ 0 "" 2
 3608              	@ 893 "../os_core/os_task.c" 1
 3609 1170 04002DE5 		stmfd sp!, {r0}
 3610              	@ 0 "" 2
 3611              	@ 893 "../os_core/os_task.c" 1
 3612 1174 C00080E3 		orr   r0, r0, #0b11000000
 3613              	@ 0 "" 2
 3614              	@ 893 "../os_core/os_task.c" 1
 3615 1178 00F021E1 		msr   cpsr_c, r0
 3616              	@ 0 "" 2
 894:../os_core/os_task.c ****     if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF             
 3617              		.loc 1 894 0
 3618 117c 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 3619 1180 FF0053E3 		cmp	r3, #255
 3620 1184 0600001A 		bne	.L104
 895:../os_core/os_task.c ****         prio = OSTCBCur->OSTCBPrio;
 3621              		.loc 1 895 0
 3622 1188 5C319FE5 		ldr	r3, .L111
 3623 118c 003093E5 		ldr	r3, [r3, #0]
 3624 1190 2E30D3E5 		ldrb	r3, [r3, #46]
 3625 1194 1D304BE5 		strb	r3, [fp, #-29]
 896:../os_core/os_task.c ****         self = TRUE;
 3626              		.loc 1 896 0
 3627 1198 0130A0E3 		mov	r3, #1
 3628 119c 0D304BE5 		strb	r3, [fp, #-13]
 3629 11a0 0A0000EA 		b	.L105
 3630              	.L104:
 897:../os_core/os_task.c ****     } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self          
 3631              		.loc 1 897 0
 3632 11a4 40319FE5 		ldr	r3, .L111
 3633 11a8 003093E5 		ldr	r3, [r3, #0]
 3634 11ac 2E30D3E5 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 3635 11b0 1D205BE5 		ldrb	r2, [fp, #-29]	@ zero_extendqisi2
 3636 11b4 030052E1 		cmp	r2, r3
 3637 11b8 0200001A 		bne	.L106
 898:../os_core/os_task.c ****         self = TRUE;
 3638              		.loc 1 898 0
 3639 11bc 0130A0E3 		mov	r3, #1
 3640 11c0 0D304BE5 		strb	r3, [fp, #-13]
 3641 11c4 010000EA 		b	.L105
 3642              	.L106:
 899:../os_core/os_task.c ****     } else {
 900:../os_core/os_task.c ****         self = FALSE;                                           /* No suspending another task      
 3643              		.loc 1 900 0
 3644 11c8 0030A0E3 		mov	r3, #0
 3645 11cc 0D304BE5 		strb	r3, [fp, #-13]
 3646              	.L105:
 901:../os_core/os_task.c ****     }
 902:../os_core/os_task.c ****     ptcb = OSTCBPrioTbl[prio];
 3647              		.loc 1 902 0
 3648 11d0 1D205BE5 		ldrb	r2, [fp, #-29]	@ zero_extendqisi2
 3649 11d4 14319FE5 		ldr	r3, .L111+4
 3650 11d8 023193E7 		ldr	r3, [r3, r2, asl #2]
 3651 11dc 14300BE5 		str	r3, [fp, #-20]
 903:../os_core/os_task.c ****     if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist      
 3652              		.loc 1 903 0
 3653 11e0 14301BE5 		ldr	r3, [fp, #-20]
 3654 11e4 000053E3 		cmp	r3, #0
 3655 11e8 0300001A 		bne	.L107
 904:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 3656              		.loc 1 904 0
 3657              	@ 904 "../os_core/os_task.c" 1
 3658 11ec 04009DE4 		ldmfd sp!, {r0}
 3659              	@ 0 "" 2
 3660              	@ 904 "../os_core/os_task.c" 1
 3661 11f0 00F021E1 		msr   cpsr_c, r0
 3662              	@ 0 "" 2
 905:../os_core/os_task.c ****         return (OS_TASK_SUSPEND_PRIO);
 3663              		.loc 1 905 0
 3664 11f4 5A30A0E3 		mov	r3, #90
 3665 11f8 370000EA 		b	.L102
 3666              	.L107:
 906:../os_core/os_task.c ****     }
 907:../os_core/os_task.c ****     if (ptcb == (OS_TCB *)1) {                                  /* See if assigned to Mutex        
 3667              		.loc 1 907 0
 3668 11fc 14301BE5 		ldr	r3, [fp, #-20]
 3669 1200 010053E3 		cmp	r3, #1
 3670 1204 0300001A 		bne	.L108
 908:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 3671              		.loc 1 908 0
 3672              	@ 908 "../os_core/os_task.c" 1
 3673 1208 04009DE4 		ldmfd sp!, {r0}
 3674              	@ 0 "" 2
 3675              	@ 908 "../os_core/os_task.c" 1
 3676 120c 00F021E1 		msr   cpsr_c, r0
 3677              	@ 0 "" 2
 909:../os_core/os_task.c ****         return (OS_TASK_NOT_EXIST);
 3678              		.loc 1 909 0
 3679 1210 0B30A0E3 		mov	r3, #11
 3680 1214 300000EA 		b	.L102
 3681              	.L108:
 910:../os_core/os_task.c ****     }
 911:../os_core/os_task.c **** 	y            = ptcb->OSTCBY;
 3682              		.loc 1 911 0
 3683 1218 14301BE5 		ldr	r3, [fp, #-20]
 3684 121c 3030D3E5 		ldrb	r3, [r3, #48]
 3685 1220 15304BE5 		strb	r3, [fp, #-21]
 912:../os_core/os_task.c **** 	OSRdyTbl[y] &= ~ptcb->OSTCBBitX;							/* Make task not ready                 */
 3686              		.loc 1 912 0
 3687 1224 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3688 1228 15205BE5 		ldrb	r2, [fp, #-21]	@ zero_extendqisi2
 3689 122c C0109FE5 		ldr	r1, .L111+8
 3690 1230 0220D1E7 		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 3691 1234 FF1002E2 		and	r1, r2, #255
 3692 1238 14201BE5 		ldr	r2, [fp, #-20]
 3693 123c 3120D2E5 		ldrb	r2, [r2, #49]	@ zero_extendqisi2
 3694 1240 FF2002E2 		and	r2, r2, #255
 3695 1244 0220E0E1 		mvn	r2, r2
 3696 1248 FF2002E2 		and	r2, r2, #255
 3697 124c 022001E0 		and	r2, r1, r2
 3698 1250 FF2002E2 		and	r2, r2, #255
 3699 1254 FF1002E2 		and	r1, r2, #255
 3700 1258 94209FE5 		ldr	r2, .L111+8
 3701 125c 0310C2E7 		strb	r1, [r2, r3]
 913:../os_core/os_task.c ****     if (OSRdyTbl[y] == 0x00) { 
 3702              		.loc 1 913 0
 3703 1260 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3704 1264 88209FE5 		ldr	r2, .L111+8
 3705 1268 0330D2E7 		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3706 126c 000053E3 		cmp	r3, #0
 3707 1270 0C00001A 		bne	.L109
 914:../os_core/os_task.c ****         OSRdyGrp &= ~ptcb->OSTCBBitY;
 3708              		.loc 1 914 0
 3709 1274 14301BE5 		ldr	r3, [fp, #-20]
 3710 1278 3230D3E5 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 3711 127c FF3003E2 		and	r3, r3, #255
 3712 1280 0330E0E1 		mvn	r3, r3
 3713 1284 FF2003E2 		and	r2, r3, #255
 3714 1288 68309FE5 		ldr	r3, .L111+12
 3715 128c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3716 1290 FF3003E2 		and	r3, r3, #255
 3717 1294 033002E0 		and	r3, r2, r3
 3718 1298 FF3003E2 		and	r3, r3, #255
 3719 129c FF2003E2 		and	r2, r3, #255
 3720 12a0 50309FE5 		ldr	r3, .L111+12
 3721 12a4 0020C3E5 		strb	r2, [r3, #0]
 3722              	.L109:
 915:../os_core/os_task.c ****     }
 916:../os_core/os_task.c ****     ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'   
 3723              		.loc 1 916 0
 3724 12a8 14301BE5 		ldr	r3, [fp, #-20]
 3725 12ac 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 3726 12b0 083083E3 		orr	r3, r3, #8
 3727 12b4 FF2003E2 		and	r2, r3, #255
 3728 12b8 14301BE5 		ldr	r3, [fp, #-20]
 3729 12bc 2C20C3E5 		strb	r2, [r3, #44]
 917:../os_core/os_task.c ****     OS_EXIT_CRITICAL();
 3730              		.loc 1 917 0
 3731              	@ 917 "../os_core/os_task.c" 1
 3732 12c0 04009DE4 		ldmfd sp!, {r0}
 3733              	@ 0 "" 2
 3734              	@ 917 "../os_core/os_task.c" 1
 3735 12c4 00F021E1 		msr   cpsr_c, r0
 3736              	@ 0 "" 2
 918:../os_core/os_task.c ****     if (self == TRUE) {                                         /* Context switch only if SELF     
 3737              		.loc 1 918 0
 3738 12c8 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3739 12cc 010053E3 		cmp	r3, #1
 3740 12d0 0000001A 		bne	.L110
 919:../os_core/os_task.c ****         OS_Sched();
 3741              		.loc 1 919 0
 3742 12d4 FEFFFFEB 		bl	OS_Sched
 3743              	.L110:
 920:../os_core/os_task.c ****     }
 921:../os_core/os_task.c ****     return (OS_NO_ERR);
 3744              		.loc 1 921 0
 3745 12d8 0030A0E3 		mov	r3, #0
 3746              	.L102:
 922:../os_core/os_task.c **** }
 3747              		.loc 1 922 0
 3748 12dc 0300A0E1 		mov	r0, r3
 3749 12e0 0CD04BE2 		sub	sp, fp, #12
 3750 12e4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3751 12e8 1EFF2FE1 		bx	lr
 3752              	.L112:
 3753              		.align	2
 3754              	.L111:
 3755 12ec 00000000 		.word	OSTCBCur
 3756 12f0 00000000 		.word	OSTCBPrioTbl
 3757 12f4 00000000 		.word	OSRdyTbl
 3758 12f8 00000000 		.word	OSRdyGrp
 3759              		.cfi_endproc
 3760              	.LFE9:
 3762              		.align	2
 3763              		.global	OSTaskQuery
 3765              	OSTaskQuery:
 3766              	.LFB10:
 923:../os_core/os_task.c **** #endif
 924:../os_core/os_task.c **** /*$PAGE*/
 925:../os_core/os_task.c **** /*
 926:../os_core/os_task.c **** ***************************************************************************************************
 927:../os_core/os_task.c **** *                                            QUERY A TASK
 928:../os_core/os_task.c **** *
 929:../os_core/os_task.c **** * Description: This function is called to obtain a copy of the desired task's TCB.
 930:../os_core/os_task.c **** *
 931:../os_core/os_task.c **** * Arguments  : prio         is the priority of the task to obtain information from.
 932:../os_core/os_task.c **** *
 933:../os_core/os_task.c **** *              p_task_data  is a pointer to where the desired task's OS_TCB will be stored.
 934:../os_core/os_task.c **** *
 935:../os_core/os_task.c **** * Returns    : OS_NO_ERR          if the requested task is suspended
 936:../os_core/os_task.c **** *              OS_PRIO_INVALID    if the priority you specify is higher that the maximum allowed
 937:../os_core/os_task.c **** *                                 (i.e. > OS_LOWEST_PRIO) or, you have not specified OS_PRIO_SELF.
 938:../os_core/os_task.c **** *              OS_PRIO_ERR        if the desired task has not been created
 939:../os_core/os_task.c **** *              OS_TASK_NOT_EXIST  if the task is assigned to a Mutex PIP
 940:../os_core/os_task.c **** ***************************************************************************************************
 941:../os_core/os_task.c **** */
 942:../os_core/os_task.c **** 
 943:../os_core/os_task.c **** #if OS_TASK_QUERY_EN > 0
 944:../os_core/os_task.c **** INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
 945:../os_core/os_task.c **** {
 3767              		.loc 1 945 0
 3768              		.cfi_startproc
 3769              		@ Function supports interworking.
 3770              		@ args = 0, pretend = 0, frame = 16
 3771              		@ frame_needed = 1, uses_anonymous_args = 0
 3772 12fc 0DC0A0E1 		mov	ip, sp
 3773              	.LCFI20:
 3774              		.cfi_def_cfa_register 12
 3775 1300 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3776 1304 04B04CE2 		sub	fp, ip, #4
 3777              		.cfi_offset 14, -8
 3778              		.cfi_offset 13, -12
 3779              		.cfi_offset 11, -16
 3780              	.LCFI21:
 3781              		.cfi_def_cfa 11, 4
 3782 1308 10D04DE2 		sub	sp, sp, #16
 3783 130c 0030A0E1 		mov	r3, r0
 3784 1310 1C100BE5 		str	r1, [fp, #-28]
 3785 1314 15304BE5 		strb	r3, [fp, #-21]
 946:../os_core/os_task.c ****     OS_TCB    *ptcb;
 947:../os_core/os_task.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
 948:../os_core/os_task.c ****     OS_CPU_SR  cpu_sr;
 949:../os_core/os_task.c **** 
 950:../os_core/os_task.c **** 
 951:../os_core/os_task.c **** 
 952:../os_core/os_task.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
 953:../os_core/os_task.c **** #endif    
 954:../os_core/os_task.c **** #if OS_ARG_CHK_EN > 0
 955:../os_core/os_task.c ****     if (prio > OS_LOWEST_PRIO) {				 /* Task priority valid ?    	                       */
 3786              		.loc 1 955 0
 3787 1318 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3788 131c 3F0053E3 		cmp	r3, #63
 3789 1320 0400009A 		bls	.L114
 956:../os_core/os_task.c ****         if (prio != OS_PRIO_SELF) {   
 3790              		.loc 1 956 0
 3791 1324 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3792 1328 FF0053E3 		cmp	r3, #255
 3793 132c 0100000A 		beq	.L114
 957:../os_core/os_task.c ****             return (OS_PRIO_INVALID);
 3794              		.loc 1 957 0
 3795 1330 2A30A0E3 		mov	r3, #42
 3796 1334 250000EA 		b	.L115
 3797              	.L114:
 958:../os_core/os_task.c ****         }
 959:../os_core/os_task.c ****     }
 960:../os_core/os_task.c **** #endif
 961:../os_core/os_task.c ****     OS_ENTER_CRITICAL();
 3798              		.loc 1 961 0
 3799              	@ 961 "../os_core/os_task.c" 1
 3800 1338 00000FE1 		mrs   r0, cpsr
 3801              	@ 0 "" 2
 3802              	@ 961 "../os_core/os_task.c" 1
 3803 133c 04002DE5 		stmfd sp!, {r0}
 3804              	@ 0 "" 2
 3805              	@ 961 "../os_core/os_task.c" 1
 3806 1340 C00080E3 		orr   r0, r0, #0b11000000
 3807              	@ 0 "" 2
 3808              	@ 961 "../os_core/os_task.c" 1
 3809 1344 00F021E1 		msr   cpsr_c, r0
 3810              	@ 0 "" 2
 962:../os_core/os_task.c ****     if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                            
 3811              		.loc 1 962 0
 3812 1348 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 3813 134c FF0053E3 		cmp	r3, #255
 3814 1350 0300001A 		bne	.L116
 963:../os_core/os_task.c ****         prio = OSTCBCur->OSTCBPrio;
 3815              		.loc 1 963 0
 3816 1354 84309FE5 		ldr	r3, .L119
 3817 1358 003093E5 		ldr	r3, [r3, #0]
 3818 135c 2E30D3E5 		ldrb	r3, [r3, #46]
 3819 1360 15304BE5 		strb	r3, [fp, #-21]
 3820              	.L116:
 964:../os_core/os_task.c ****     }
 965:../os_core/os_task.c ****     ptcb = OSTCBPrioTbl[prio];
 3821              		.loc 1 965 0
 3822 1364 15205BE5 		ldrb	r2, [fp, #-21]	@ zero_extendqisi2
 3823 1368 74309FE5 		ldr	r3, .L119+4
 3824 136c 023193E7 		ldr	r3, [r3, r2, asl #2]
 3825 1370 10300BE5 		str	r3, [fp, #-16]
 966:../os_core/os_task.c ****     if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                       
 3826              		.loc 1 966 0
 3827 1374 10301BE5 		ldr	r3, [fp, #-16]
 3828 1378 000053E3 		cmp	r3, #0
 3829 137c 0300001A 		bne	.L117
 967:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 3830              		.loc 1 967 0
 3831              	@ 967 "../os_core/os_task.c" 1
 3832 1380 04009DE4 		ldmfd sp!, {r0}
 3833              	@ 0 "" 2
 3834              	@ 967 "../os_core/os_task.c" 1
 3835 1384 00F021E1 		msr   cpsr_c, r0
 3836              	@ 0 "" 2
 968:../os_core/os_task.c ****         return (OS_PRIO_ERR);
 3837              		.loc 1 968 0
 3838 1388 2930A0E3 		mov	r3, #41
 3839 138c 0F0000EA 		b	.L115
 3840              	.L117:
 969:../os_core/os_task.c ****     }
 970:../os_core/os_task.c ****     if (ptcb == (OS_TCB *)1) {                   /* Task to query must not be assigned to a Mutex  
 3841              		.loc 1 970 0
 3842 1390 10301BE5 		ldr	r3, [fp, #-16]
 3843 1394 010053E3 		cmp	r3, #1
 3844 1398 0300001A 		bne	.L118
 971:../os_core/os_task.c ****         OS_EXIT_CRITICAL();
 3845              		.loc 1 971 0
 3846              	@ 971 "../os_core/os_task.c" 1
 3847 139c 04009DE4 		ldmfd sp!, {r0}
 3848              	@ 0 "" 2
 3849              	@ 971 "../os_core/os_task.c" 1
 3850 13a0 00F021E1 		msr   cpsr_c, r0
 3851              	@ 0 "" 2
 972:../os_core/os_task.c ****         return (OS_TASK_NOT_EXIST);
 3852              		.loc 1 972 0
 3853 13a4 0B30A0E3 		mov	r3, #11
 3854 13a8 080000EA 		b	.L115
 3855              	.L118:
 973:../os_core/os_task.c ****     }
 974:../os_core/os_task.c ****                                                  /* Copy TCB into user storage area                
 975:../os_core/os_task.c ****     OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));  
 3856              		.loc 1 975 0
 3857 13ac 1C201BE5 		ldr	r2, [fp, #-28]
 3858 13b0 10301BE5 		ldr	r3, [fp, #-16]
 3859 13b4 0200A0E1 		mov	r0, r2
 3860 13b8 0310A0E1 		mov	r1, r3
 3861 13bc 6820A0E3 		mov	r2, #104
 3862 13c0 FEFFFFEB 		bl	OS_MemCopy
 976:../os_core/os_task.c ****     OS_EXIT_CRITICAL();
 3863              		.loc 1 976 0
 3864              	@ 976 "../os_core/os_task.c" 1
 3865 13c4 04009DE4 		ldmfd sp!, {r0}
 3866              	@ 0 "" 2
 3867              	@ 976 "../os_core/os_task.c" 1
 3868 13c8 00F021E1 		msr   cpsr_c, r0
 3869              	@ 0 "" 2
 977:../os_core/os_task.c ****     return (OS_NO_ERR);
 3870              		.loc 1 977 0
 3871 13cc 0030A0E3 		mov	r3, #0
 3872              	.L115:
 978:../os_core/os_task.c **** }
 3873              		.loc 1 978 0
 3874 13d0 0300A0E1 		mov	r0, r3
 3875 13d4 0CD04BE2 		sub	sp, fp, #12
 3876 13d8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3877 13dc 1EFF2FE1 		bx	lr
 3878              	.L120:
 3879              		.align	2
 3880              	.L119:
 3881 13e0 00000000 		.word	OSTCBCur
 3882 13e4 00000000 		.word	OSTCBPrioTbl
 3883              		.cfi_endproc
 3884              	.LFE10:
 3886              		.align	2
 3887              		.global	OS_TaskStkClr
 3889              	OS_TaskStkClr:
 3890              	.LFB11:
 979:../os_core/os_task.c **** #endif
 980:../os_core/os_task.c **** /*$PAGE*/
 981:../os_core/os_task.c **** /*
 982:../os_core/os_task.c **** ***************************************************************************************************
 983:../os_core/os_task.c **** *                                        CLEAR TASK STACK
 984:../os_core/os_task.c **** *
 985:../os_core/os_task.c **** * Description: This function is used to clear the stack of a task (i.e. write all zeros)
 986:../os_core/os_task.c **** *
 987:../os_core/os_task.c **** * Arguments  : pbos     is a pointer to the task's bottom of stack.  If the configuration constant
 988:../os_core/os_task.c **** *                       OS_STK_GROWTH is set to 1, the stack is assumed to grow downward (i.e. from
 989:../os_core/os_task.c **** *                       memory to low memory).  'pbos' will thus point to the lowest (valid) memory
 990:../os_core/os_task.c **** *                       location of the stack.  If OS_STK_GROWTH is set to 0, 'pbos' will point to 
 991:../os_core/os_task.c **** *                       highest memory location of the stack and the stack will grow with increasin
 992:../os_core/os_task.c **** *                       memory locations.  'pbos' MUST point to a valid 'free' data item.
 993:../os_core/os_task.c **** *
 994:../os_core/os_task.c **** *              size     is the number of 'stack elements' to clear.
 995:../os_core/os_task.c **** *
 996:../os_core/os_task.c **** *              opt      contains additional information (or options) about the behavior of the task
 997:../os_core/os_task.c **** *                       LOWER 8-bits are reserved by uC/OS-II while the upper 8 bits can be applica
 998:../os_core/os_task.c **** *                       specific.  See OS_TASK_OPT_??? in uCOS-II.H.
 999:../os_core/os_task.c **** *
1000:../os_core/os_task.c **** * Returns    : none
1001:../os_core/os_task.c **** ***************************************************************************************************
1002:../os_core/os_task.c **** */
1003:../os_core/os_task.c **** #if OS_TASK_CREATE_EXT_EN > 0
1004:../os_core/os_task.c **** void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
1005:../os_core/os_task.c **** {
 3891              		.loc 1 1005 0
 3892              		.cfi_startproc
 3893              		@ Function supports interworking.
 3894              		@ args = 0, pretend = 0, frame = 16
 3895              		@ frame_needed = 1, uses_anonymous_args = 0
 3896 13e8 0DC0A0E1 		mov	ip, sp
 3897              	.LCFI22:
 3898              		.cfi_def_cfa_register 12
 3899 13ec 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3900 13f0 04B04CE2 		sub	fp, ip, #4
 3901              		.cfi_offset 14, -8
 3902              		.cfi_offset 13, -12
 3903              		.cfi_offset 11, -16
 3904              	.LCFI23:
 3905              		.cfi_def_cfa 11, 4
 3906 13f4 10D04DE2 		sub	sp, sp, #16
 3907 13f8 10000BE5 		str	r0, [fp, #-16]
 3908 13fc 14100BE5 		str	r1, [fp, #-20]
 3909 1400 0230A0E1 		mov	r3, r2
 3910 1404 B6314BE1 		strh	r3, [fp, #-22]	@ movhi
1006:../os_core/os_task.c ****     if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled   
 3911              		.loc 1 1006 0
 3912 1408 B6315BE1 		ldrh	r3, [fp, #-22]
 3913 140c 013003E2 		and	r3, r3, #1
 3914 1410 FF3003E2 		and	r3, r3, #255
 3915 1414 000053E3 		cmp	r3, #0
 3916 1418 1000000A 		beq	.L121
1007:../os_core/os_task.c ****         if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared         
 3917              		.loc 1 1007 0
 3918 141c B6315BE1 		ldrh	r3, [fp, #-22]
 3919 1420 023003E2 		and	r3, r3, #2
 3920 1424 000053E3 		cmp	r3, #0
 3921 1428 0C00000A 		beq	.L121
1008:../os_core/os_task.c **** #if OS_STK_GROWTH == 1                     
1009:../os_core/os_task.c ****             while (size > 0) {                         /* Stack grows from HIGH to LOW memory      
 3922              		.loc 1 1009 0
 3923 142c 080000EA 		b	.L123
 3924              	.L124:
1010:../os_core/os_task.c ****                 size--;
 3925              		.loc 1 1010 0
 3926 1430 14301BE5 		ldr	r3, [fp, #-20]
 3927 1434 013043E2 		sub	r3, r3, #1
 3928 1438 14300BE5 		str	r3, [fp, #-20]
1011:../os_core/os_task.c ****                 *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!       
 3929              		.loc 1 1011 0
 3930 143c 10301BE5 		ldr	r3, [fp, #-16]
 3931 1440 0020A0E3 		mov	r2, #0
 3932 1444 002083E5 		str	r2, [r3, #0]
 3933 1448 10301BE5 		ldr	r3, [fp, #-16]
 3934 144c 043083E2 		add	r3, r3, #4
 3935 1450 10300BE5 		str	r3, [fp, #-16]
 3936              	.L123:
1009:../os_core/os_task.c ****             while (size > 0) {                         /* Stack grows from HIGH to LOW memory      
 3937              		.loc 1 1009 0 discriminator 1
 3938 1454 14301BE5 		ldr	r3, [fp, #-20]
 3939 1458 000053E3 		cmp	r3, #0
 3940 145c F3FFFF1A 		bne	.L124
 3941              	.L121:
1012:../os_core/os_task.c ****             }
1013:../os_core/os_task.c **** #else
1014:../os_core/os_task.c ****             while (size > 0) {                         /* Stack grows from LOW to HIGH memory      
1015:../os_core/os_task.c ****                 size--;
1016:../os_core/os_task.c ****                 *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down      
1017:../os_core/os_task.c ****             }
1018:../os_core/os_task.c **** #endif
1019:../os_core/os_task.c ****         }
1020:../os_core/os_task.c ****     }
1021:../os_core/os_task.c **** }
 3942              		.loc 1 1021 0
 3943 1460 0CD04BE2 		sub	sp, fp, #12
 3944 1464 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3945 1468 1EFF2FE1 		bx	lr
 3946              		.cfi_endproc
 3947              	.LFE11:
 3949              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 os_task.c
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:1662   .text:00000000 $a
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:1665   .text:00000000 OSTaskChangePrio
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:2000   .text:000003b0 $d
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:2008   .text:000003c4 $a
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:2011   .text:000003c4 OSTaskCreate
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:2171   .text:00000514 $d
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:2177   .text:00000520 $a
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:2180   .text:00000520 OSTaskCreateExt
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:3889   .text:000013e8 OS_TaskStkClr
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:2346   .text:00000684 $d
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:2352   .text:00000690 $a
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:2355   .text:00000690 OSTaskDel
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:2711   .text:00000a48 $d
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:2723   .text:00000a6c $a
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:2726   .text:00000a6c OSTaskDelReq
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:2869   .text:00000b74 $d
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:2874   .text:00000b7c $a
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:2877   .text:00000b7c OSTaskNameGet
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:3023   .text:00000cb8 $d
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:3028   .text:00000cc0 $a
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:3031   .text:00000cc0 OSTaskNameSet
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:3191   .text:00000e10 $d
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:3196   .text:00000e18 $a
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:3199   .text:00000e18 OSTaskResume
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:3370   .text:00000f80 $d
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:3376   .text:00000f8c $a
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:3379   .text:00000f8c OSTaskStkChk
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:3556   .text:00001118 $d
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:3561   .text:00001120 $a
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:3564   .text:00001120 OSTaskSuspend
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:3755   .text:000012ec $d
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:3762   .text:000012fc $a
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:3765   .text:000012fc OSTaskQuery
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:3881   .text:000013e0 $d
C:\Users\VUser\AppData\Local\Temp\ccm9WNQU.s:3886   .text:000013e8 $a
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
OS_Sched
OSTCBPrioTbl
OSTCBCur
OSMapTbl
OSRdyTbl
OSRdyGrp
OSTaskStkInit
OS_TCBInit
OSIntNesting
OSRunning
OS_FlagUnlink
OS_Dummy
OSTaskDelHook
OSLockNesting
OSTaskCtr
OSTCBList
OSTCBFreeList
OS_StrCopy
OS_StrLen
OS_MemCopy
